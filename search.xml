<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git</title>
      <link href="/2022/03/30/Git/"/>
      <url>/2022/03/30/Git/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="9be256c11aac5181a12e105d960edf426bc0c3743794e37779dbcc46f98faac3">472f0d2124ee617a2f29ff331422d5d3bd292059877923b2bde10f8b4beeb582b5677b97997720bb57b85e0be7567461086ac77154c3b73a123f9a7bd362615b985202fe042ae33378e199941510a256bd119c3f7bd94adfec7da650e928f3eb07c7e884e2c2926cf60d80d96d41147a7feee723b83d1f7b2b19a4cda3c6c4b1cbde4f18c0b820e742620d77c0e341839b114b65dce617bbd7ce6f44f6e393a0da648346fd65a5d49ec00b39e58d5d925ef0fc3a269a5edbe6d03c305189ee3261e43ee03b42068d6aaccc4d563c4d51d14088883f9decdf86ab07117e3a43f6ea70e45e9d9474f4e06b9fc82ed5b8eaed59df06dc7f6aceac3a4e8df60c4f9d703e6580959c1a6d43af49507aa95abe73bea0c92e45c405e2d09a9d10c8f963462176b3666e5b8a951c3974ffcc0342f1dd40638a276d6e76e40c55b15e9b2f86bbc05263e053f499936125e765237e88a244f987b56451e7940b1f1ed7efba10a68c0bce250725543dc7cc9f598065de90d61d18443a45657fa1977cd82bfb1caa82825d25afbc2fe631a5319f076d644b2e81a2d6f657a7fd53cf3f17cf25da278f6691f1e94fe8a209ed2593164eacaf7b6686afb47f16a790103621ac06c573d52559d0cf10c3e99a64166bac8c9bc9f975da9943f81742a5b11c3571b7b5533d5a8889ed852582db0df44515070948b3ce5648d4a4c923feed8f7892251d423a0435849a9a275ea6a3464647f17146ba716b8ff79776bcfa34bdf408adb13f4a529b350a339a3c829c460854a4bd9d3fb35b693088aea0588e701887321ff28b8d6f3a0da8ad8d4c8ef6d820742396239aee8e091bb41ad5dc0519a578aa35446985f9f6f0e17b400d7851b93cb57b10fff555695329ed7860d23e9906f52563721196e43e3a27ef2c7bc788f03361814670b35fdf7c793eb611f11e8588f916c80c40db5714a5b0065f27577eb4581abdc1f95bc0386ef017cbd7e681c7acdd38f639a6f9c4825fe5c7a5d41e732a0c6ac188780cd857ba0de35083641ba21c0586b791b5b3235385b76f42a5b44ac30aea7e4ce73b56da1ec5226d79f2a36f9bb3d555450f2ebc6b0c8d165e14dbf33010caef86244ec4826353fd9ac813b83e4ae3bec17883498dd06e00d125e93b9d0f7a8ff4c63020e785ca49f99a4ccae2e760df1b3fd276205e6c4274ea1af658522c0761f6caf5caaafc7a963f77c2935cebdbd4ed2579667e96de4a5b2790608c0cd085fd2168ea85b03e1d018b327f60c070b11365a2bd0c9e0716914e19ec6d77f5e27b15bb20ec57acc4c92a0d7c6277770688cc8a441289c50eeb50e7028569c4daaecc233b6ba1839a6fcc037fe5f479d4c53bec8302e603cdc003e417d2c8607dbf26ff26a74a2d67385a1c76f40794e849c27f6a514f49c9d862948cc11c1f5bff7e812681d7d8e58f047518173306ed11eaff69c5ea412362d899d676f6b81e82480c11aef8e533b74fc0a1dc73cea66864eebec698f4c9f2a5d64f91c8142ff1a4a4ecc47143e9014e7953c2488aaac0c5b3ac6498abb41c653c0e4f187aeb03a0e20c4ca22177fbd9ec425b456ce1b89244b979d7285d474b210b9afe79e4b4c3815b23787d0758323aef6d8fecd8baa7cf8c02977c85c5228e636e051e189f904ec1dd47b7f86f8b4abca5859808e90d2a7f7cddc0b8</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="Hey, password is required here.">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>cppRest</title>
      <link href="/2022/03/28/cppRest/"/>
      <url>/2022/03/28/cppRest/</url>
      
        <content type="html"><![CDATA[<h1 id="Cpp-其余问题"><a href="#Cpp-其余问题" class="headerlink" title="Cpp 其余问题"></a>Cpp 其余问题</h1><h2 id="1、C-的多态性"><a href="#1、C-的多态性" class="headerlink" title="1、C++的多态性"></a>1、C++的多态性</h2><p>C++的多态性，一言以蔽之即：<br>在基类的函数前加上virtual关键字，在派生类中重写该函数<br>运行时将会根据所指对象的实际类型来调用相应的函数<br>如果对象类型是派生类，就调用派生类的函数；<br>如果对象类型是基类，就调用基类的函数。</p><p>举例：</p><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>C++多态性</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base::func()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son1</span>: <span class="keyword">public</span> Base&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span> <span class="keyword">override</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Son1::func()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son2</span>: <span class="keyword">public</span> Base&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Base* base = <span class="keyword">new</span> Son1;</span><br><span class="line">    base-&gt;<span class="built_in">fun</span>();</span><br><span class="line"></span><br><span class="line">    base = <span class="keyword">new</span> Son2;</span><br><span class="line">    base-&gt;<span class="built_in">fun</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> base;</span><br><span class="line">    base = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行结果：</span></span><br><span class="line"><span class="comment">// Son1::func()</span></span><br><span class="line"><span class="comment">// Base::func()</span></span><br></pre></td></tr></table></figure>     </div></div>    </div><p>例子中，Base为基类，其中的函数为虚函数。<br>子类1继承并重写了基类的函数，子类2继承基类但并没有重写基类的函数，从结果分析，子类体现了多态性。</p><ul><li>多态性和底层原理？</li></ul><ol><li><p>虚表<br>  虚函数表的缩写，类中含有virtual关键字修饰的方法时，编译器会自动生成虚表。</p></li><li><p>虚表指针<br>  在含有虚函数的类实例化对象时，对象地址的前四个字节存储指向虚表的指针。</p></li></ol><img src="/2022/03/28/cppRest/vptr.png" class=""><p><b>上图展示了虚表和虚表指针在基类对象和派生类对象中的模型，下面阐述实现多态的过程：</b></p><ol><li><p>编译器在发现基类中有虚函数时，会自动为每个含有虚函数的类生成一份虚表，该表是一个一维数组，虚表里面保存了虚函数的入口地址。</p></li><li><p>编译器会在每个对象的前四个字节中保存一个虚表指针，即vptr，指向对象所属类的虚表。<br>在构造时，根据对象的类型去初始化虚指针vptr，从而让vptr指向正确的虚表，从而在调用虚函数时，能找到正确的函数。</p></li><li><p>所谓合适时机，在派生类<b>定义</b>对象时，程序运行会自动调用构造函数，在构造函数中创建虚表并对虚表初始化。<br>在构造子类对象时，会先调用父类的构造函数，此时，编译器只”看到了”父类，并为父类对象初始化虚表指针，令它指向父类的虚表；<br>当调用子类的构造函数时，为子类对象初始化虚表指针，令它指向子类的虚表。</p></li><li><p>当派生类对基类的虚函数没有重写时，派生类的虚表指针指向的是基类的虚表；<br>当派生类对基类的虚函数重写时，派生类的虚表指针指向的是自身的虚表；<br>当派生类中有自己的虚函数时，在自己的虚表中将此虚函数地址添加在后面。</p></li></ol><h2 id="这样指向派生类的基类指针在运行时，就可以根据派生类对虚函数重写情况动态进行调用，从而实现多态性。"><a href="#这样指向派生类的基类指针在运行时，就可以根据派生类对虚函数重写情况动态进行调用，从而实现多态性。" class="headerlink" title="这样指向派生类的基类指针在运行时，就可以根据派生类对虚函数重写情况动态进行调用，从而实现多态性。"></a>这样指向派生类的基类指针在运行时，就可以根据派生类对虚函数重写情况动态进行调用，从而实现多态性。</h2><h2 id="2、为什么析构函数一般写成虚函数"><a href="#2、为什么析构函数一般写成虚函数" class="headerlink" title="2、为什么析构函数一般写成虚函数"></a>2、为什么析构函数一般写成虚函数</h2><p>由于类的多态性，基类指针可以指向派生类的对象，如果删除该基类的指针，就会调用该指针指向的派生类析构函数。<br>而派生类的析构函数又自动调用基类的析构函数，这样整个派生类的对象完全被释放。</p><p>如果析构函数不被声明称虚函数，则编译器实施静态绑定，在删除基类指针时，只会调用基类的析构函数而不调用派生类析构函数<br>从而导致派生类对象析构不完全，造成内存泄漏.</p><p>所以将析构函数声明为虚函数是十分必要的。<br>在实现多态时，当用基类操作派生类，在析构时防止只析构基类而不析构派生类的情况发生，要将基类的析构函数声明为虚函数。</p><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>析构函数不是虚函数</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Parent</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Parent constructor function&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Parent</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Parent destructor function&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span>: <span class="keyword">public</span> Parent&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Son</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Son constructor function&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Son</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Son destructor function&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Parent* p = <span class="keyword">new</span> <span class="built_in">Son</span>();</span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">    p = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行结果：</span></span><br><span class="line"><span class="comment">// Parent constructor function</span></span><br><span class="line"><span class="comment">// Son constructor function</span></span><br><span class="line"><span class="comment">// Parent destrctor function</span></span><br></pre></td></tr></table></figure>     </div></div>    </div><p>将基类的析构函数声明为虚函数：</p><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>析构函数是虚函数</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Parent</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Parent constructor function&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Parent</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Parent destructor function&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span>: <span class="keyword">public</span> Parent&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Son</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Son constructor funtion&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Son</span>() <span class="keyword">override</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Son destructor function&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Parent* p = <span class="keyword">new</span> <span class="built_in">Son</span>();</span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">    p = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行结果：</span></span><br><span class="line"><span class="comment">// Parent constructor function</span></span><br><span class="line"><span class="comment">// Son constructor function</span></span><br><span class="line"><span class="comment">// Son destructor function</span></span><br><span class="line"><span class="comment">// Parent destructor function</span></span><br></pre></td></tr></table></figure>     </div></div>    </div><p>但存在一种特例，在<code>CRTP</code>【编译时绑定】模板中，不应该将析构函数声明为虚函数<br>理论上所有的父类函数都不应该声明为虚函数，因为这种继承方式，不需要虚函数表。</p><hr><h2 id="3、构造函数能否声明为虚函数或者纯虚函数，析构函数？"><a href="#3、构造函数能否声明为虚函数或者纯虚函数，析构函数？" class="headerlink" title="3、构造函数能否声明为虚函数或者纯虚函数，析构函数？"></a>3、构造函数能否声明为虚函数或者纯虚函数，析构函数？</h2><ul><li><p>析构函数：</p><ul><li><p>析构函数可以为虚函数，并且一般情况下基类析构函数要定义为虚函数</p></li><li><p>只有在基类析构函数定义为虚函数时，调用操作符delete销毁指向对象的基类指针时，<br>才会精准调用派生类的析构函数（从该级向上调用虚函数），才能准确销毁数据</p></li><li><p><b>析构函数可以是纯虚函数</b>，含有纯虚函数的类是抽象类，此时不能被实例化。<br>但派生类可以根据自身需求重新改写基类中的纯虚函数。</p></li></ul></li><li><p>构造函数：</p><ul><li><p>构造函数不能定义为虚函数。在构造函数中可以调用虚函数，不过此时调用的是正在构造的类中的虚函数，而非子类虚函数<br>因为此时子类尚未构造好。</p></li><li><p>虚函数对应一个vtable（虚函数表），类中存储一个vptr指向这个vtable。<br>如果构造函数是虚函数，就要通过vtable调用，可是对象没有初始化就没有vptr，无法找到vtable，所以构造函数不能是虚函数。<br>【只有在构造函数之后，才有虚函数表，只有虚函数表，才能调用虚函数】</p></li></ul></li></ul><hr><h2 id="4、基类的虚函数表存放在内存的什么区，虚表指针vptr的初始化时间"><a href="#4、基类的虚函数表存放在内存的什么区，虚表指针vptr的初始化时间" class="headerlink" title="4、基类的虚函数表存放在内存的什么区，虚表指针vptr的初始化时间"></a>4、基类的虚函数表存放在内存的什么区，虚表指针vptr的初始化时间</h2><p>首先整理虚函数表的特征：</p><ul><li><p>虚函数表是全局共享的元素，即全局只有一个，在<code>编译时就构造完成</code>。</p></li><li><p>虚函数表类似一个数组，类对象中存储vptr指针，指向虚函数表，即虚函数表不是函数，不是程序代码，不可能存储在代码段。</p></li><li><p>虚函数表存储虚函数的地址，即虚函数表的元素是指向类成员函数的指针，而类中虚函数的个数在编译时期可以确定<br>即虚函数表的大小可以确定，即大小是在编译时期确定的，不必动态分配内存空间存储虚函数表，所以不在堆中。</p></li></ul><p>根据以上特征，虚函数表类似于类中静态成员变量。<br>静态成员变量也是全局共享，大小确定，因此最有可能存在<code>全局数据区</code>，测试结果显示：</p><p>虚函数表vtable在Linux&#x2F;Unix中存放在可执行文件的只读数据段中（rodata）<br>这与MS的编译器将虚函数表存放在常量段存在一些差别</p><p>由于虚表指针vptr和虚函数密不可分，对于有虚函数或者继承于拥有虚函数的基类<br>对该类进行实例化时，在构造函数执行时会对虚表指针进行初始化，并且存在对象内存布局的最前面。</p><p>一般分为五个区域：栈区、堆区、函数区（存放函数体等二进制代码）、全局静态区、常量区。</p><p>C++中<code>虚函数表</code>位于只读数据段（.rodata），也就是C++内存模型中的常量区；<br>而<code>虚函数</code>位于代码段（.text），也就是C++内存模型中的代码区。</p><hr><h2 id="5、模板函数和模板类的特例化"><a href="#5、模板函数和模板类的特例化" class="headerlink" title="5、模板函数和模板类的特例化"></a>5、模板函数和模板类的特例化</h2><ul><li><p>引入原因：<br>编写单一的模板，能适应多种类型的需求，使每种类型都具有相同的功能<br>但对于某种特定的类型，如果要实现其特有的功能，单一模板就无法做到，此时需要模板特例化</p></li><li><p>定义：<br>对单一模板提供的一个特殊实例，它将一个或多个模板参数绑定到特定的类型或值上</p></li></ul><ol><li>模板函数特例化<br>  必须为原函数模板的每个模板参数都提供实参，且使用关键字template后跟一对空尖括号<br>  表明将原模板的所有模板参数提供实参<br>  举例：  <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>特例化模板函数</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;  <span class="comment">// 模板函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">compare</span><span class="params">(<span class="type">const</span> T &amp;v1, <span class="type">const</span> T &amp;v2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(v1 &gt; v2)   <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(v2 &gt; v1)   <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;    <span class="comment">// 模板特例化，满足针对字符串特定的比较，要提供所有实参，此处只有一个T</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">compare</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* <span class="type">const</span> &amp;v1, <span class="type">const</span> <span class="type">char</span>* <span class="type">const</span> &amp;v2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strcmp</span>(v1, v2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div></li></ol><ul><li><p>本质<br>特例化的本质是实例化一个模板，而非重载它。<br>特例化不影响参数匹配。参数匹配都以最佳匹配为原则。<br>例如：此处如果是compare(3, 5)，则调用普通的模板，若为compare(“hi”, “haha”)则调用<b>特例化版本</b>（因为const char*相对于T，更匹配实参类型）</p><p>注意二者函数体的语句不同，实现不同功能。</p></li><li><p>注意<br>模板及其特例化版本应该声明在同一个头文件中，且所有同名模板的声明应该放在前面，后面放特例化版本。</p></li></ul><ol start="2"><li>类模板特例化<br>  原理类似函数模板，<br>  不过在类中，我们可以对模板进行特例化，也可以对类进行部分特例化。<br>  对类进行特例化时，仍然用template&lt;&gt;表示是一个特例化版本，例如：  <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>特例化类模板</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">hash</span>&lt;sales_data&gt;&#123;</span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(sales_data&amp; s)</span></span>;</span><br><span class="line">    <span class="comment">// 里面左右的T都换成特例化类型版本 sales_data</span></span><br><span class="line">    <span class="comment">// 按照最佳匹配原则，若T != sales_data，就用普通类模板，否则就使用含有特定功能的特例化版本。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div></li></ol><ul><li><p>类模板的部分实例化<br>不必为所有模板参数提供实参，可以<b>指定一部分而非所有模板参数</b><br>一个类模板的部分特例化本身仍是一个模板，使用它时还必须为其特例化版本中未指定的模板参数提供实参<br>（特例化时类名一定要和原来的模板相同，只是参数类型不同，按照最佳匹配原则，哪个最匹配，就调用相应的模板）</p></li><li><p>特例化类中的部分成员<br><b>可以特例化类中的部分成员函数而非整个类，举例：</b></p><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>特例化部分成员</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Bar</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Barst</span><span class="params">(T a)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="type">void</span> Foo&lt;<span class="type">int</span>&gt;::<span class="built_in">Bar</span>()&#123;</span><br><span class="line">    <span class="comment">// 进行int类型的特例化处理</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;int类型特例化&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo&lt;string&gt; fs;</span><br><span class="line">Foo&lt;<span class="type">int</span>&gt; fi;  <span class="comment">// 使用特例化</span></span><br><span class="line">fs.<span class="built_in">Bar</span>();     <span class="comment">// 使用普通模板，即Foo&lt;string&gt;::Bar()</span></span><br><span class="line">fi.<span class="built_in">Bar</span>();     <span class="comment">// 特例化版本，执行Foo&lt;int&gt;::Bar()</span></span><br><span class="line"><span class="comment">// Foo&lt;string&gt;::Bar()和Foo&lt;int&gt;::Bar()功能不同</span></span><br></pre></td></tr></table></figure>     </div></div>    </div></li></ul><hr><h2 id="6、构造函数、析构函数、虚函数可否声明为内联函数"><a href="#6、构造函数、析构函数、虚函数可否声明为内联函数" class="headerlink" title="6、构造函数、析构函数、虚函数可否声明为内联函数"></a>6、构造函数、析构函数、虚函数可否声明为内联函数</h2><p>首先，将这些函数声明为内联函数，在语法上没有错误。<br>因为inline和register一样，只是个建议，编译器并不一定内联。</p><blockquote><p>register关键字：这个关键字请求编译器尽可能将变量存在CPU内部寄存器中，而不是通过内存寻址，可以提高效率。</p></blockquote><p>举例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="title">A</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;inline constructor()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> ~<span class="built_in">A</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;inline destructor()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">virtual</span> <span class="type">void</span> <span class="title">virtualFun</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;inline virtual function&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A a;</span><br><span class="line">    a.<span class="built_in">virtualFun</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="comment">// inline constructor()</span></span><br><span class="line"><span class="comment">// inline virtual function</span></span><br><span class="line"><span class="comment">// inline destructor()</span></span><br></pre></td></tr></table></figure><ul><li>构造函数和析构函数声明为内联函数是没有意义的<br>《Effective C++》中阐述的是：<br>将构造函数和析构函数声明为inline是没有什么意义的，即编译器并不真正对声明为inline的构造和析构函数进行内联操作<br>因为编译器会在构造和析构函数中添加额外的操作（申请&#x2F;释放内存，构造&#x2F;析构对象等）<br>导致构造函数&#x2F;析构函数并不像看上去的那么精简。</li></ul><p>其次，class中的函数默认是inline型的，编译器也只是有选择地inline<br>将构造函数和析构函数声明为内联函数是没什么意义的。</p><ul><li><p>将虚函数声明为inline，要分情况讨论。<br>有的人认为虚函数被声明为inline，但是编译器并没有对其内联，理由是：inline是编译期决定的，虚函数是运行期决定的<br>即在不知道将要调用哪个函数的情况下，如何将函数内联呢？</p><p>上述观点看似正确，实则不然<br>如果虚函数在编译器就能够决定将要调用哪个函数时，就能够内联，那么什么情况下编译器可以确定要调用哪个函数？<br>即对象调用虚函数（此时不具有多态性）时，就内联展开。</p><p>综上：<br>  当是指向派生类指针（具有多态性）调用声明为inline的虚函数时，不会内联展开；<br>  当是对象本身调用虚函数时，会内联展开，当然前提依然是函数并不复杂的情况下；【不用指针时】</p></li></ul><hr><h2 id="7、C-模板是什么、底层如何实现？"><a href="#7、C-模板是什么、底层如何实现？" class="headerlink" title="7、C++模板是什么、底层如何实现？"></a>7、C++模板是什么、底层如何实现？</h2><ol><li><p>编译器并不是把函数模板处理成能够处理任意类的函数<br>编译器从函数模板通过具体类型产生不同的函数；<br>编译器会对函数模板进行两次编译：在声明的地方对模板代码本身进行编译，在调用的地方对参数替代后的代码进行编译。</p></li><li><p>这是因为函数模板要<code>被实例化后</code>才能成为真正的函数，<br>在使用函数模板的源文件中包含函数模板的头文件，如果该头文件中只有声明，没有定义，则编译器无法实例化该模板，最终导致链接错误，</p></li></ol><hr><h2 id="8、构造函数为什么不能为虚函数？析构函数为什么要虚函数？"><a href="#8、构造函数为什么不能为虚函数？析构函数为什么要虚函数？" class="headerlink" title="8、构造函数为什么不能为虚函数？析构函数为什么要虚函数？"></a>8、构造函数为什么不能为虚函数？析构函数为什么要虚函数？</h2><ol><li>从存储空间角度<br>  虚函数需要一个指向vtable虚函数表的指针，但该指针事实上是存储在对象的内存空间的。</li></ol><p>  假设构造函数是虚函数，就必须要用vtable来调用，但对象还没有实例化，也就是说内存空间还没有，如何找到vtable？<br>  所以<code>构造函数不能是虚函数</code>。</p><ol start="2"><li>从使用角度<br>  虚函数主要用于在信息不全情况下，能使重载的函数得到相应的调用。【指针指向不明确】</li></ol><p>  构造函数本身就是要初始化实例，那使用虚函数也没有实际意义。</p><p>  所以构造函数没有必要是虚函数，虚函数的作用在于通过父类的指针或者引用来调用它的时候可以变成调用子类的成员函数。<br>  而构造函数是在创建对象时自己主动调用的，不可能通过父类的指针或者引用去调用，因此也就规定构造函数不能是虚函数。</p><ol start="3"><li>构造函数不需要是虚函数，也不同意是虚函数<br>  由于创建一个对象时我们总是要明白指定对象的类型，虽然我们可能通过基类指针或引用去访问它但析构函数不一定</li></ol><p>  我们往往通过基类的指针去销毁对象。<br>  此时假设析构函数不是虚函数，就不能正确识别对象类型从而不能正确调用析构函数。</p><ol start="4"><li>从实现上看<br>  vtable在构造函数调用后才建立，因而构造函数不可能成为虚函数</li></ol><p>  从实际意义上看，在调用构造函数时还不能确定对象的真实类型（由于子类会调用父类的构造函数）</p><p>  并且构造函数的作用是提供初始化，在对象生命期仅仅运行一次，不是对象的动态行为，没有必要成为虚函数。</p><ol start="5"><li>当一个构造函数被调用时，它要做的首要的事情其中一个就是初始化vptr<br>  因此，它仅仅能够知道它是“当前”类的，而全然忽视这个对象后面是否还有继承者。</li></ol><p>  当编译器为这个构造函数产生代码时，它是为这个类的构造函数产生代码 —— 既不是基类，也不是它的派生类（由于类不知道谁继承他）<br>  所以它使用的vptr必须是对应这个类的vtable。【构造函数值对应自己】</p><p>  并且，仅仅要它是最后的构造函数调用，那么在这个对象的生命周期内，vptr将保存被初始化为指向这个vtable，<br>  但假设接着另一个更晚派生的构造函数被调用，这个构造函数又将设置vptr指向它的vtable…等。直到最后的构造函数结束。</p><p>  vptr的状态是由被最后调用的构造函数确定的。这就是为什么构造函数调用是从基类到更加派生类顺序的还一个理由。</p><p>  可是，当这一系列构造函数调用正发生时，每一个构造函数都已经设置vptr指向它自己的vtable。<br>  假设函数调用使用虚函数机制，它将仅仅产生通过它自己的table调用，而不是最后的vtable（全部构造函数被调用后才有最后的vtable）</p><p>  因为构造函数本来就是为了明确初始化对象成员才产生的，然而virtual function主要是为了在不完全了解细节的情况下也能正确处理对象。<br>  另外，virtual函数是在不同类型的对象产生不同的动作，而现在对象还没有产生，如何使用virtual函数实现想要的动作？</p><p>  直白的讲：C++中基类采用的virtual虚析构函数是为了<b>防止内存泄漏</b></p><p>  具体地说，如果派生类中申请了内存空间，并在其析构函数中对这些内存空间进行释放。<br>  假设基类中采用的是非析构函数，当删除基类指针指向的派生类对象时，就<b>不会产生动态绑定</b>，因而只会调用基类的析构函数，而不是派生类析构函数。</p><p>  这种情况下，派生类中申请的空间就会因为得不到释放而产生内存泄漏</p><h2 id="所以，为了防止这种情况发生，C-中基类的析构函数应采用virtual虚析构函数。"><a href="#所以，为了防止这种情况发生，C-中基类的析构函数应采用virtual虚析构函数。" class="headerlink" title="  所以，为了防止这种情况发生，C++中基类的析构函数应采用virtual虚析构函数。"></a>  所以，为了防止这种情况发生，C++中基类的析构函数应采用virtual虚析构函数。</h2><h2 id="9、析构函数的作用，如何起作用？"><a href="#9、析构函数的作用，如何起作用？" class="headerlink" title="9、析构函数的作用，如何起作用？"></a>9、析构函数的作用，如何起作用？</h2><ol><li><p>构造函数只是起初始化值的作用，但实例化一个对象的时候，可以通过实例去传递参数，从主函数传递到其他的函数里面，这样就使其他的函数里有值了</p><p>规则：只要你一实例化对象，系统自动回调一个构造函数；尽管不写，编译器也自动调用一次</p></li><li><p>析构函数与构造函数的作用相反，用于撤销对象的一些特殊任务处理，可以是释放对象分配的内存空间；<br>特点：析构函数与构造函数同名，但该函数面前加~</p><p>析构函数没有参数，也没有返回值，而且不能重载，在一个类中只能有一个析构函数。<br>当撤销对象时，编译器也会自动调用析构函数。</p><p>每一个类必须有一个析构函数，用户可以自定义析构函数，也可以是编译器自动生成默认的析构函数。<br>一般析构函数定义为类的公有成员。</p></li></ol><hr><h2 id="10、构造函数和析构函数可以调用虚函数吗，为什么？"><a href="#10、构造函数和析构函数可以调用虚函数吗，为什么？" class="headerlink" title="10、构造函数和析构函数可以调用虚函数吗，为什么？"></a>10、构造函数和析构函数可以调用虚函数吗，为什么？</h2><ol><li><p>在C++中，不提倡在构造函数和析构函数中调用虚函数；</p></li><li><p>构造函数和析构函数调用虚函数时都不使用动态联编，<br>如果在构造函数和析构函数中调用虚函数，则运行的是构造函数或析构函数自身类型定义的版本。</p></li><li><p>因为父类对象会在子类之前进行构造，此时子类部分的数据成员还未初始化，因此调用子类的虚函数时不安全，因此C++不会进行动态联编</p></li><li><p>析构函数是用来销毁一个对象的，在销毁一个对象时，先调用子类的析构函数，然后再调用基类的析构函数。<br>所以在调用基类的析构函数时，派生类对象的数据成员已经销毁，这个时候再调用子类的虚函数没有任何意义</p></li></ol><hr><h2 id="11、构造函数、构造函数的执行顺序？构造函数和拷贝构造的内部都干了啥？"><a href="#11、构造函数、构造函数的执行顺序？构造函数和拷贝构造的内部都干了啥？" class="headerlink" title="11、构造函数、构造函数的执行顺序？构造函数和拷贝构造的内部都干了啥？"></a>11、构造函数、构造函数的执行顺序？构造函数和拷贝构造的内部都干了啥？</h2><ol><li><p>构造函数顺序</p></li><li><p>基类构造函数。如果有多个基类，则构造函数的调用顺序是某类在类<code>派生表中出现的顺序</code>，而非在成员初始化表中的顺序</p></li><li><p>成员类对象构造函数，如果有多个成员类对象，则构造函数的调用顺序是对象在类中<code>被声明的顺序</code>，而非在成员初始化表中的顺序</p></li><li><p>派生类构造函数</p></li><li><p>析构函数顺序</p></li><li><p>调用派生类的析构函数</p></li><li><p>调用成员类对象的析构函数</p></li><li><p>调用基类的析构函数</p></li></ol><hr><h2 id="12、虚析构函数的作用、父类的析构函数是否要设置为虚函数？"><a href="#12、虚析构函数的作用、父类的析构函数是否要设置为虚函数？" class="headerlink" title="12、虚析构函数的作用、父类的析构函数是否要设置为虚函数？"></a>12、虚析构函数的作用、父类的析构函数是否要设置为虚函数？</h2><ol><li>C++中基类采用virtual虚析构函数是为了防止内存泄漏<br>  具体地说，如果派生类中申请了内存空间，并在其析构函数中对这些内存空间进行释放。</li></ol><p>  假设基类中采用的是非虚析构函数，当删除基类指针指向的派生类对象时就不会触发动态绑定，因而只会调用基类的析构函数，而不会调用派生类的析构函数。</p><p>  那么在这种情况下，派生类中申请的空间就得不到释放从而产生内存泄漏。</p><p>  所以，为了防止这种情况的发生，C++中基类的析构函数应采用virtual虚析构函数。</p><ol start="2"><li>纯虚析构函数一定得定义，因为每一个派生类析构函数会被编译器加以扩张，以静态调用的方式调用其每一个虚基类以及上一层基类的析构函数。</li></ol><p>  因此，缺乏任何一个基类析构函数的定义，就会导致链接失败<br>  最好不要把虚析构函数定义为纯虚析构函数。</p><hr><h2 id="13、构造函数析构函数可否抛出异常？"><a href="#13、构造函数析构函数可否抛出异常？" class="headerlink" title="13、构造函数析构函数可否抛出异常？"></a>13、构造函数析构函数可否抛出异常？</h2><ol><li><p>C++只会析构已经完成的对象，对象只有在其析构函数执行完毕才算是完全构造妥当。<br>在构造函数中发生异常，控制权转出构造函数之外。</p><p>因此，在对象b的构造函数中发生异常，对象b的析构函数不会被调用。因此会造成内存泄漏。</p></li><li><p>用auto_ptr对象来取代指针<b>类成员</b>，便对构造函数做了强化，免除了抛出异常时发生资源泄漏的危机，不在要在析构函数中手动释放资源。</p></li><li><p>如果控制权基于异常的因素离开析构函数，而此时正有另一个异常处于作用状态，C++会调用terminate函数让程序结束。</p></li><li><p>如果异常从析构函数抛出，而且没有在当地进行捕捉，那个析构函数便是执行不全的。如果析构函数执行不全，就是没有完成他应该执行的每一件事情。</p></li></ol><hr><h2 id="14、构造函数一般不定义为虚函数的原因"><a href="#14、构造函数一般不定义为虚函数的原因" class="headerlink" title="14、构造函数一般不定义为虚函数的原因"></a>14、构造函数一般不定义为虚函数的原因</h2><ol><li><p>创建一个对象时需要确定对象的类型，而虚函数是在运行时动态确定其类型的。<br>在构造一个对象时，由于对象还未创建成功，编译器无法知道对象的实际类型。</p></li><li><p>虚函数的调用需要虚函数表指针vptr，而该指针存放在对象的内存空间中<br>若构造函数声明为虚函数，那么由于对象还未创建，还没有内存空间，更没有虚函数表vtable地址用来调用虚析构函数了</p></li><li><p>虚函数的作用在于通过父类的指针或者引用调用它时能变成调用相应子类的成员函数。<br>而构造函数是在创建对象时自动调用的，不可能通过父类或引用去调用，因此就规定构造函数不能是虚函数。</p></li><li><p>析构函数一般都要声明为虚函数，不再赘述。</p></li></ol><hr><h2 id="15、类什么时候会析构？"><a href="#15、类什么时候会析构？" class="headerlink" title="15、类什么时候会析构？"></a>15、类什么时候会析构？</h2><ol><li><p>对象生命周期结束，被销毁时</p></li><li><p>delete指向对象的指针时，或delete指向对象的基类类型指针，而其基类析构函数是虚函数时</p></li><li><p>对象i是对象o的成员，o的析构函数被调用时，对象i的析构函数也被调用</p></li></ol><hr><h2 id="16、构造函数或者析构函数中可以调用虚函数吗？"><a href="#16、构造函数或者析构函数中可以调用虚函数吗？" class="headerlink" title="16、构造函数或者析构函数中可以调用虚函数吗？"></a>16、构造函数或者析构函数中可以调用虚函数吗？</h2><p>简要结论：</p><ul><li><p>从语法上讲，没有问题</p></li><li><p>从效果上将，往往不能达到需要的目的。</p></li></ul><blockquote><p>《Effective C++》的解释：派生类对象构造期间进入基类的构造函数时<br>对象类型变成了基类类型，而非派生类类型；进入基类析构函数时，对象也是基类类型。</p></blockquote><p>举个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Base</span>()&#123;</span><br><span class="line">    <span class="built_in">Function</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Base::Function&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  ~<span class="built_in">Base</span>()&#123;</span><br><span class="line">    <span class="built_in">Function</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>: <span class="keyword">public</span> Base&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">A</span>()&#123;</span><br><span class="line">    <span class="built_in">Function</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;A::Function&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ~<span class="built_in">A</span>()&#123;</span><br><span class="line">    <span class="built_in">Function</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  Base *a = <span class="keyword">new</span> <span class="built_in">Base</span>();</span><br><span class="line">  <span class="keyword">delete</span> a;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;----------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">  Base *b = <span class="keyword">new</span> <span class="built_in">A</span>();  <span class="comment">// 语句1</span></span><br><span class="line">  <span class="keyword">delete</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果：</span></span><br><span class="line"><span class="comment">// Base::Function</span></span><br><span class="line"><span class="comment">// Base::Function</span></span><br><span class="line"><span class="comment">// ---------------------</span></span><br><span class="line"><span class="comment">// Base::Function</span></span><br><span class="line"><span class="comment">// A::Function</span></span><br><span class="line"><span class="comment">// Base::Function</span></span><br></pre></td></tr></table></figure><p>语句1，理论上应该体现多态性，执行类A中的构造和析构函数<br>从实验结果来看，语句1并没有体现，执行流程是先构造基类，所以先调用基类的构造函数，构造完成再执行A自己的构造函数<br>析构时也是调用基类的析构函数，也就是说构造和析构中调用虚函数并不能达到目的，应该避免。【没有实现动态绑定，只是和指针相关类对应的虚函数】</p><h2 id="如果析构函数改为虚函数，则可以多一个A-Function"><a href="#如果析构函数改为虚函数，则可以多一个A-Function" class="headerlink" title="如果析构函数改为虚函数，则可以多一个A::Function"></a>如果析构函数改为虚函数，则可以多一个A::Function</h2><h2 id="17、构造函数的几种关键字"><a href="#17、构造函数的几种关键字" class="headerlink" title="17、构造函数的几种关键字"></a>17、构造函数的几种关键字</h2><ul><li><p>default<br>default关键字可以显式要求编译器生成合成构造函数，防止在调用时相关构造函数类型没有定义而报错</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CString</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">CString</span>() = <span class="keyword">default</span>;  <span class="comment">// 语句1</span></span><br><span class="line">  <span class="comment">// 构造函数</span></span><br><span class="line">  <span class="built_in">CString</span>(<span class="type">const</span> <span class="type">char</span>* pstr) : _str(pstr)&#123;&#125;</span><br><span class="line">  <span class="function"><span class="type">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> t)</span> </span>= <span class="keyword">delete</span>; <span class="comment">// 这样不允许使用new关键字</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 析构函数</span></span><br><span class="line">  ~<span class="built_in">CString</span>()&#123;&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  string _str;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">auto</span> a = <span class="keyword">new</span> <span class="built_in">CString</span>(); <span class="comment">// 语句2</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;Hello World&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line"><span class="comment">// Hello World</span></span><br></pre></td></tr></table></figure><p>如果没有语句1，语句2会报错，表示找不到参数为空的构造函数，将其设置为default可以解决这个问题</p></li><li><p>detele<br>delete关键字可以删除构造函数、赋值运算符函数等，这样在使用时会得到提示</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CString</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">()</span> </span>= <span class="keyword">delete</span>;  <span class="comment">// 这样不允许使用new关键字</span></span><br><span class="line">  <span class="comment">// 析构函数</span></span><br><span class="line">  ~<span class="built_in">CString</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">auto</span> a = <span class="keyword">new</span> <span class="built_in">CString</span>(); <span class="comment">// 语句1</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;Hello World&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在执行语句1时，会提示new方法已经被删除，如果将new设置为私有方法，则会报惨不忍睹的错误<br>因此使用delete关键字可以更加人性化的删除一些默认方法。</p></li><li><p>0<br>将虚函数定义为纯虚函数，纯虚函数无需定义，&#x3D;0只能出现在类内部虚函数的声明语句处<br>当然，也可以为纯虚函数提供定义，函数体可以定义在类的外部也可以定义在内部。</p></li></ul><hr><h2 id="18、构造函数、拷贝构造函数和赋值操作符的区别"><a href="#18、构造函数、拷贝构造函数和赋值操作符的区别" class="headerlink" title="18、构造函数、拷贝构造函数和赋值操作符的区别"></a>18、构造函数、拷贝构造函数和赋值操作符的区别</h2><ul><li><p>构造函数<br>对象不存在，没用别的对象初始化，在创建一个对象时调用构造函数</p></li><li><p>拷贝构造函数<br>对象不存在，但是使用别的已经存在的对象来进行初始化</p></li><li><p>赋值运算符<br>对象存在，用别的对象给它赋值，这属于重载“&#x3D;”号运算符的范畴，“&#x3D;”两侧的对象都是已经存在的。</p></li></ul><p>举例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">A</span>()&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;普通构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">A</span>(<span class="type">const</span> A&amp; a)&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  A&amp; <span class="keyword">operator</span>= (A&amp; a)&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;赋值操作符&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ~<span class="built_in">A</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  A a1; <span class="comment">// 调用普通构造函数</span></span><br><span class="line">  A a2 = a1;  <span class="comment">// 调用拷贝构造函数</span></span><br><span class="line">  a2 = a1;  <span class="comment">// 调用赋值操作符</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="comment">// 普通构造函数</span></span><br><span class="line"><span class="comment">// 拷贝构造函数</span></span><br><span class="line"><span class="comment">// 赋值操作符</span></span><br></pre></td></tr></table></figure><hr><h2 id="19、拷贝构造函数和赋值运算符重载的区别？"><a href="#19、拷贝构造函数和赋值运算符重载的区别？" class="headerlink" title="19、拷贝构造函数和赋值运算符重载的区别？"></a>19、拷贝构造函数和赋值运算符重载的区别？</h2><ul><li><p>拷贝构造函数是函数，赋值运算符是运算符重载。</p></li><li><p>拷贝构造函数会生成新的类对象，赋值运算符不生成新的对象</p></li><li><p>拷贝构造函数是直接构造一个新的类对象，所以在初始化之前不需要检查源对象和新建对象是否相同<br>赋值运算符需要上述操作并提供两套不同的复制策略，另外赋值运算符中如果原来的对象有内存分配则需要先把内存释放掉</p></li><li><p>形参传递是调用拷贝构造函数（调用的被赋值对象的拷贝构造函数）<br>但并不是所有出现”&#x3D;”的地方都是使用赋值运算符，如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Student s;</span><br><span class="line">Student s1 = s; <span class="comment">// 调用拷贝构造函数</span></span><br><span class="line">Student s2; </span><br><span class="line">s2 = s; <span class="comment">//赋值运算符操作</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="注意：类中有指针变量时要重写析构函数、拷贝构造函数和赋值运算符。"><a href="#注意：类中有指针变量时要重写析构函数、拷贝构造函数和赋值运算符。" class="headerlink" title="注意：类中有指针变量时要重写析构函数、拷贝构造函数和赋值运算符。"></a>注意：类中有指针变量时要重写析构函数、拷贝构造函数和赋值运算符。</h2><h2 id="20、什么是虚拟继承"><a href="#20、什么是虚拟继承" class="headerlink" title="20、什么是虚拟继承"></a>20、什么是虚拟继承</h2><p>由于C++支持多继承，除了Public、Protected、Private三种继承方式外，还支持虚拟（virtual）继承<br>举例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>: <span class="keyword">virtual</span> <span class="keyword">public</span> A&#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>: <span class="keyword">virtual</span> <span class="keyword">public</span> A&#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>: <span class="keyword">public</span> B, <span class="keyword">public</span> C&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;sizeof(A):&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(A) &lt;&lt; endl;  <span class="comment">// 1，空对象，只有一个占位</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;sizeof(B):&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(B) &lt;&lt; endl;  <span class="comment">// 4，一个bptr指针，省去占位，不需要对齐</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;sizeof(C):&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(C) &lt;&lt; endl;  <span class="comment">// 4，一个bptr指针，省去占位，不需要对齐</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;sizeof(D):&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(D) &lt;&lt; endl;  <span class="comment">// 8，两个bptr指针，省去占位，不需要对齐</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码所体现的关系是：<br>B和C虚拟继承A，D又公有继承B和C，<br>这种方式是一种<b>菱形继承或钻石继承</b>，可以用下图来表示</p><img src="/2022/03/28/cppRest/diamondDerive.png" class=""><img src="/2022/03/28/cppRest/vDerive.png" class=""><p><b>虚拟继承情况下，无论基类被继承多少次，只会存在一个实体</b>。<br>虚拟继承基类的子类中，子类会增加某种形式的指针，或者指向虚基类子对象，或者指向一个相关的表格；<br>表格中存放的不是虚基类子对象的地址，就是其偏移量，此类指针又称为bptr，如上图所示。</p><p>如果既存在vptr又存在bptr，某些编译器会将其优化，合并为一个指针。</p><blockquote><p>补充：虚继承中，B和C不再保存A中的内容，保存了一份偏移地址，将A的数据保存在一个公共位置处，降低数据冗余性。</p></blockquote><hr><h2 id="21、什么情况会自动生成默认构造函数？"><a href="#21、什么情况会自动生成默认构造函数？" class="headerlink" title="21、什么情况会自动生成默认构造函数？"></a>21、什么情况会自动生成默认构造函数？</h2><ol><li><p>带有默认构造函数的类成员对象<br>如果一个类没有任何构造函数，但它含有一个成员对象，而后者有默认构造函数，那么编译器为该类合成出一个默认构造函数。</p><p>不过这个合成操作只有在构造函数真正被需要的时候才会发生。</p><p>如果一个类A含有多个成员类对象的话，那么类A的每一个构造函数必须调用每一个成员对象的默认构造函数而且必须按照类对象在类A中的声明顺序进行。</p></li><li><p>带有默认构造函数的基类<br>如果一个没有任务构造函数的派生类派生自一个带有默认构造函数基类，那么该派生类会合成一个构造函数调用上一层基类的默认构造函数</p></li><li><p>带有一个虚函数的类【生成vptr】</p></li><li><p>带有一个虚基类的类【生成bptr】</p></li><li><p>合成的默认构造函数中，只有基类子对象和成员类对象会被初始化。<br>其他所有的非静态数据成员都不会被初始化。【仅初始化类】</p></li></ol><hr><h2 id="22、抽象基类为什么不能创建对象？"><a href="#22、抽象基类为什么不能创建对象？" class="headerlink" title="22、抽象基类为什么不能创建对象？"></a>22、抽象基类为什么不能创建对象？</h2><p>抽象类是一种特殊的类，它是为了抽象和设计的目的而建立的，它处于继承层次结构的较上层。</p><ol><li><p>抽象类的定义：称带有纯虚函数的类为抽象类</p></li><li><p>抽象类的作用：<br>抽象类的主要作用是将有关的操作作为结果接口组织在一个继承层次结构中，由它来为派生类提供一个公共的根<br>派生类将<code>具体实现</code>在其基类中作为接口的操作。</p><p>所以派生类实际上刻画了一组子类的操作接口通用语义，这些语义也传给子类，子类可以具体实现这些语义，也可以再将这些语义传给自己的子类。</p></li><li><p>抽象类只能作为基类来使用，其纯虚函数的实现由派生类给出。<br>如果派生类中没有重新定义纯虚函数，而只是继承基类的纯虚函数，则这个派生类仍然还是一个抽象类。<br>如果派生类中给出了基类纯虚函数的实现，则该派生类就不再是抽象类了，它是一个可以建立对象的具体的类。</p><p>抽象类是不能定义对象的，一个纯虚函数不需要（但是可以）被定义。</p></li><li><p>纯虚函数定义：纯虚函数是一种特殊的虚函数，它的一般格式如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> &lt;类名&gt; &#123;</span><br><span class="line">  <span class="keyword">virtual</span> &lt;类型&gt; &lt;函数名&gt; ( &lt;参数表&gt; ) = <span class="number">0</span>;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在许多情况下，在基类中不能对虚函数给出有意义的实现，而把它声明为纯虚函数，它的实现留给该基类的派生类去做。这就是纯虚函数的作用。<br>纯虚函数可以让类现有一个操作名称，但没有操作内容，让派生类在继承时具体地给出定义。</p><p>凡是含有纯虚函数的类叫做抽象类。这种类不能声明对象，只是作为基类为派生类服务。<br>除非在派生类中完全实现基类中所有的纯虚函数，否则，派生类变成了抽象类，也不能实例化对象。</p></li><li><p>纯虚函数引入原因：</p><ol><li><p>为了方便使用多态特性，我们常常需要在基类中定义虚拟函数。</p></li><li><p>在很多情况下，基类本身生成对象是不合情理的。<br>例如：动物作为一个基类可以派生出猫狗等子类，但动物本身生成对象明显不合理。<br>为了解决上述问题，引入了纯虚函数的概念，将函数定义为纯虚函数（方法：virtual ReturnType Function() &#x3D; 0）</p><p>若要使派生类为非抽象类，则编译器要求在派生类中，必须对纯虚函数予以重载以实现多态性。<br>同时含有纯虚函数的类称为抽象类，它不能生成对象。这样就很好地解决了上述两个问题。</p><p>例如：绘画程序中，shape作为一个基类可以派生出圆形、矩形、正方形、梯形等<br>如果要求面积总和的话，那可以使用一个shape *的数组，只要一次调用派生类的area()函数了。</p><p>如果不用接口就没法定义成数组，因为既可以是circle，也可以是square，而且以后还可能加上rectangle等等。</p></li></ol></li><li><p>相似概念</p><ol><li><p>多态性<br>指相同对象收到不同消息或不同对象收到相同消息时产生的不同实现动作<br>C++支持两种多态性：编译时多态性、运行时多态性。</p><ol><li>编译时多态性：通过重载函数、模板实现。</li><li>运行时多态性：通过虚函数实现。</li></ol></li><li><p>虚函数<br>虚函数是在基类中被声明为virtual，并在派生类中重新定义的成员函数，可实现成员函数的动态重载。</p></li><li><p>抽象类<br>包含纯虚函数的类称为抽象类。由于抽象类包含了没有定义的纯虚函数，所以不能定义抽象类的对象。</p></li></ol></li></ol><hr><h2 id="23、模板类和模板函数的区别是什么？"><a href="#23、模板类和模板函数的区别是什么？" class="headerlink" title="23、模板类和模板函数的区别是什么？"></a>23、模板类和模板函数的区别是什么？</h2><p>函数模板的实例化是由编译程序在处理函数调用时自动完成的，而类模板的实例化必须由程序员在程序中显式地指定。</p><p>即函数模板允许隐式调用和显式调用<br>而类模板只允许显式调用。</p><h2 id="在使用时类模板必须加，而函数模板不必加。"><a href="#在使用时类模板必须加，而函数模板不必加。" class="headerlink" title="在使用时类模板必须加，而函数模板不必加。"></a>在使用时类模板必须加，而函数模板不必加。</h2><h2 id="24、多继承的优点，作为一个开发者怎么看待多继承"><a href="#24、多继承的优点，作为一个开发者怎么看待多继承" class="headerlink" title="24、多继承的优点，作为一个开发者怎么看待多继承"></a>24、多继承的优点，作为一个开发者怎么看待多继承</h2><ol><li><p>C++允许一个派生类指定多个基类，这样的继承结构被称为多继承。</p></li><li><p>多重继承的优点很明显，就是对象可以调用多个基类中的接口</p></li><li><p>如果派生类所继承的多个基类有相同的基类，而派生类对象需要调用这个祖先类的接口方法，就会容易出现二义性。</p></li><li><p>加上全局符确定调用哪一份拷贝，比如pa.Author::eat()调用属于Author的拷贝</p></li><li><p>使用虚拟继承，使得多重继承类Programmer_Author只拥有Person类的一份拷贝</p></li></ol><hr><h2 id="25、模板和实现可不可以不写在一个文件里？为什么？"><a href="#25、模板和实现可不可以不写在一个文件里？为什么？" class="headerlink" title="25、模板和实现可不可以不写在一个文件里？为什么？"></a>25、模板和实现可不可以不写在一个文件里？为什么？</h2><p>因为在编译时模板并不能生成真正的二进制代码，而是在编译<code>调用模板类或函数的CPP文件</code>时才会去找对应的模板声明和实现</p><p>在这种情况下编译器是不知道<code>实现模板类或函数的cpp文件所在，所以只能找到模板类或函数的声明而找不到实现</code>，而只好创建一个符号寄希望于链接程序找地址。</p><p>但模板类或函数的实现并不能被编译成二进制代码，结果链接程序找不到地址只好报错了。</p><p>《C++编程思想》第15章（300页）说明了原因：模板定义很特殊。由template&lt;…&gt;处理的任何东西都意味着编译器在当时不为它分配存储空间。<br>它一直处于等待状态直到被一个模板实例告知。<br>在编译器和链接器的某一处，有一个机制能去掉指定模板的多重定义。<br>所以为了容易使用，几乎总是在头文件中放置全部的模板声明和定义。</p><blockquote><p>即，不能不写在一个文件里，因为由template处理的任何东西都意味着编译器在当时不分配存储空间</p></blockquote><hr><h2 id="26、将字符串”hello-world”从开始到打印到屏幕上的全过程？"><a href="#26、将字符串”hello-world”从开始到打印到屏幕上的全过程？" class="headerlink" title="26、将字符串”hello world”从开始到打印到屏幕上的全过程？"></a>26、将字符串”hello world”从开始到打印到屏幕上的全过程？</h2><ol><li><p>用户告诉操作系统执行HelloWorld程序（通过键盘输入等）</p></li><li><p>操作系统：找到helloworld程序的相关信息，检查其类型是否是可执行文件；<br>并通过程序首部信息，确定代码和数据在可执行文件中的位置并计算出对应的磁盘块地址。</p></li><li><p>操作系统：创建一个新进程，将HelloWorld可执行文件映射到该进程结构，表示由该进程执行helloworld程序。</p></li><li><p>操作系统：为helloworld程序设置cpu上下文环境，并跳转到程序开始处。</p></li><li><p>执行helloworld程序的第一条指令，发生缺页异常。</p></li><li><p>操作系统：分配一页物理内存，并将代码从磁盘读入内存，然后继续执行helloworld程序</p></li><li><p>helloworld程序执行puts函数（系统调用），在显示器上写一字符串</p></li><li><p>操作系统：找到要将字符串送往的显示设备，通常设备是由一个进程控制的，所以操作系统将要写的字符串送给该进程。</p></li><li><p>操作系统：控制设备的进程告诉设备的窗口系统，它要显示该字符串，窗口系统确定这是一个合法的操作<br>然后将字符串转换成像素，将像素写入设备的存储映像区</p></li><li><p>视频硬件将像素转换成显示器可接收和一组控制数据信号</p></li><li><p>显示器解释信号，激发液晶屏</p></li><li><p>屏幕上看到了HelloWorld</p></li></ol><hr><h2 id="27、为什么拷贝构造函数必须传引用不能传值"><a href="#27、为什么拷贝构造函数必须传引用不能传值" class="headerlink" title="27、为什么拷贝构造函数必须传引用不能传值"></a>27、为什么拷贝构造函数必须传引用不能传值</h2><ol><li><p>拷贝构造函数的作用就是用来复制对象的，在使用这个对象的实例来初始化这个对象的一个新的实例</p></li><li><p>参数传递过程到底发生了什么？<br>将地址传递和值传递统一起来，归根结底还是传递的是“值”（地址也是值，只不过通过它可以找到目标值）</p><ol><li>值传递：<br>  对于内置数据类型的传递时，直接赋值拷贝给形参（注意形参是函数内局部变量）；<br>  对于类类型的传递时，需要首先调用该<code>类的拷贝构造函数</code>来初始化形参（局部对象）；</li></ol><p>  如void foo(class_type obj_local){}，如果要调用foo(obj);<br>  首先class_type obj_local(obj)，这样就定义了局部变量obj_local供函数内部使用。</p><ol start="2"><li>引用传递：<br>  无论对内置类型还是类类型，传递引用和指针最终都是传递的地址值<br>  而地址总是指针类型（属于简单类型），显然参数传递时，按简单类型的赋值拷贝，而不会有拷贝构造函数的调用（对于类类型）</li></ol><p>因此，如果拷贝构造函数使用值传递会产生无限递归调用，内存溢出。</p><p>拷贝构造函数用来初始化一个非引用类类型对象<br>如果用值方式进行传参数，那么构造实参需要调用拷贝构造函数，而拷贝构造函数需要传递实参，所以会一直递归</p></li></ol><hr><h2 id="28、静态函数能定义为虚函数吗？常函数呢？"><a href="#28、静态函数能定义为虚函数吗？常函数呢？" class="headerlink" title="28、静态函数能定义为虚函数吗？常函数呢？"></a>28、静态函数能定义为虚函数吗？常函数呢？</h2><ol><li><p>static成员不属于任何类对象或类实例，所以即使给此函数加上virtual也是没有任何意义的。</p></li><li><p>静态与非静态成员函数之间有一个主要的区别，那就是静态成员函数没有this指针。</p><p>虚函数依靠 vptr 和 vtable 来处理。vptr是一个指针，在类的构造函数中创建生成，并且只能用this指针来访问它，因为它是类的一个成员。<br>并且vptr指向保存虚函数地址的vtable，对于静态成员函数，它没有this指针，所以无法访问 vptr。</p></li></ol><p>这就是为何static函数不能为virtual<br>虚函数的调用关系：<br>  this-&gt;vptr-&gt;vtable-&gt;virtual function</p><hr><h2 id="29、虚函数的代价？"><a href="#29、虚函数的代价？" class="headerlink" title="29、虚函数的代价？"></a>29、虚函数的代价？</h2><ol><li><p>带有虚函数的类，每一个类会产生一个虚函数表，用来存储指向虚成员函数的指针，增大类所占空间。</p></li><li><p>带有虚函数的每个类的每一个对象，都会有一个指向虚表的指针，会增加对象的空间大小；</p></li><li><p>不能再是内联函数，因为内联函数在编译阶段进行替代，而虚函数需要动态等待<br>在运行阶段才能确定到底是采用哪种函数，虚函数不能是内联函数。</p></li></ol><hr><h2 id="30、说一说移动构造函数？"><a href="#30、说一说移动构造函数？" class="headerlink" title="30、说一说移动构造函数？"></a>30、说一说移动构造函数？</h2><ol><li><p>有时候我们会遇到这样一些情况，我们用对象a初始化对象b之后，对象a就不再使用了，但对象a的空间还在（在析构之前）<br>既然拷贝构造函数，实际上就是把a对象的内容复制一份到b中，为什么不能直接使用对象a的空间？</p><p>这样就避免了新的空间分配，大大降低了构造成本，这就是移动构造函数设计的初衷。</p></li><li><p>拷贝构造函数中，对于指针，我们一定要使用深拷贝；<br>移动构造函数中，对于指针，我们使用浅拷贝</p></li><li><p>C++引入了移动构造函数，专门处理这种，用对象a处理对象b之后就将a析构的情况。</p></li><li><p>与拷贝类似，移动也使用一个对象的值去设置另一个对象的值。<br>但是，与拷贝不同的是，移动实现的是对象值真实的转移（源对象到目的对象）：<br>  源对象将丢失其内容，其内容被目的对象占有。移动操作发生的时候，是当移动值的对象是未命名对象的时候。</p><p>  这里未命名的对象就是那些临时变量，甚至都不会有名称。</p><p>  典型的未命名对象就是函数的返回值或类型转换的对象。<br>  使用临时对象的值初始化另一个对象值，不会要求对对象的复制：因为临时对象不会有其他使用，因为，它的值可以被移动到目的对象。</p><p>  做到这些，就要使用移动构造函数和移动赋值：当使用一个临时变量对象进行构造初始化时，调用移动构造函数。</p><p>  类似的，使用未命名的变量值赋值给一个对象时，调用移动赋值函数。</p></li><li><p>举例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Example6</span> (Example6 &amp;&amp;x) : <span class="built_in">ptr</span>(x.ptr)&#123;</span><br><span class="line">  x.ptr = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// move assignment</span></span><br><span class="line">Example6&amp; <span class="keyword">operator</span>= (Example6&amp;&amp; x)&#123;</span><br><span class="line">  <span class="keyword">delete</span> ptr;</span><br><span class="line">  ptr = x.ptr;</span><br><span class="line">  x.ptr = <span class="literal">nullptr</span>;</span><br><span class="line">  <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="31、什么情况下会合成构造函数？"><a href="#31、什么情况下会合成构造函数？" class="headerlink" title="31、什么情况下会合成构造函数？"></a>31、什么情况下会合成构造函数？</h2><ol><li><p>如果一个类没有任何构造函数，但他含有一个<code>成员对象</code>，该成员对象含有默认构造函数<br>那么编译器就为该类合成一个默认构造函数，因为不合成一个默认构造函数那么该成员对象的构造函数不能调用</p></li><li><p>没有任何构造函数的类<code>派生</code>自一个带有默认构造函数的基类<br>那么需要为该派生类合成一个构造函数，只有这样基类的构造函数才能被调用。</p></li><li><p>带有<code>虚函数</code>的类，虚函数的引入需要进入虚表，指向虚表的指针<br>该指针是在构造函数中初始化的，所以没有构造函数的话该指针无法被初始化。【vptr】</p></li><li><p>带有一个虚基类的类</p></li></ol><p>还有一点需要注意的是：</p><ol><li><p>并不是任何没有构造函数的类都会合成一个构造函数</p></li><li><p>编译器合成出来的构造函数并不会显示设定类内的每一个成员变量</p></li></ol><hr><h2 id="32、什么时候需要合成拷贝构造函数？"><a href="#32、什么时候需要合成拷贝构造函数？" class="headerlink" title="32、什么时候需要合成拷贝构造函数？"></a>32、什么时候需要合成拷贝构造函数？</h2><p>三种情况会以一个对象的内容作为另一个对象的初值：</p><ol><li><p>对一个对象做显式的初始化操作 X xx &#x3D; x;</p></li><li><p>当对象被当做参数交给某个函数时;（传值）</p></li><li><p>当函数传回一个类对象时;</p></li></ol><p>注意：</p><ol><li><p>如果一个类没有拷贝构造函数，但是含有一个类类型的成员变量，该类型含有拷贝构造函数，此时编译器会为该类合成一个拷贝构造函数</p></li><li><p>如果一个类没有拷贝构造函数，但是该类继承自含有拷贝构造函数的基类，此时编译器会为该类合成一个拷贝构造函数</p></li><li><p>如果一个类没有拷贝构造函数，但是该类声明或继承了虚函数，此时编译器会为该类合成一个拷贝构造函数</p></li><li><p>如果一个类没有拷贝构造函数，但是该类含有虚基类，此时编译器会为该类合成一个拷贝构造函数</p></li></ol><hr><h2 id="33、构造函数的执行顺序？"><a href="#33、构造函数的执行顺序？" class="headerlink" title="33、构造函数的执行顺序？"></a>33、构造函数的执行顺序？</h2><ol><li><p>在派生类构造函数中，所有虚基类及上一层基类的构造函数调用</p></li><li><p>对象vptr被初始化</p></li><li><p>如果有成员初始化列表，将在构造函数体内扩展开来，这必须在vptr被设定之后才做</p></li><li><p>执行程序员所提供的代码</p></li></ol><hr><h2 id="34、一个类中全部构造函数的扩展过程是什么？"><a href="#34、一个类中全部构造函数的扩展过程是什么？" class="headerlink" title="34、一个类中全部构造函数的扩展过程是什么？"></a>34、一个类中全部构造函数的扩展过程是什么？</h2><ol><li><p>记录在成员初始化列表中的数据成员初始化操作会被放在构造函数的函数体内，并与成员的声明顺序为顺序</p></li><li><p>如果一个成员并没有出现在成员初始化列表中，但它有一个默认构造函数，那么默认构造函数必须被调用</p></li><li><p>如果class有虚表，那么它必须被设定初值</p></li><li><p>所有上一层基类的构造函数必须被调用</p></li><li><p>所有虚基类的构造函数必须被调用</p></li></ol><hr><h2 id="35、哪些函数不能是虚函数？"><a href="#35、哪些函数不能是虚函数？" class="headerlink" title="35、哪些函数不能是虚函数？"></a>35、哪些函数不能是虚函数？</h2><ol><li><p>构造函数，构造函数初始化对象，派生类必须知道基类函数干了什么，才能进行构造；<br>当有虚函数时，每一个类有一个虚表，每一个对象有一个虚表指针，虚表指针在构造函数中初始化</p></li><li><p>内联函数，内联函数表示在编译阶段进行函数体的替换操作，而虚函数意味着在运行期间进行类型确定<br>编译阶段和运行阶段冲突，所以内联函数不能是虚函数。</p></li><li><p>静态函数，静态函数不属于对象而属于类整体<br>静态函数没有this指针，因此静态函数设置为虚函数没有任何意义</p></li><li><p>友元函数，友元函数不属于类的成员函数，不能被继承。<br>对于没有继承特性的函数没有虚函数的说法。</p></li><li><p>普通函数，普通函数不属于类的成员函数，不具有继承特性<br>因此普通函数没有虚函数</p></li></ol><hr><h2 id="36、什么是纯虚函数，与虚函数区别"><a href="#36、什么是纯虚函数，与虚函数区别" class="headerlink" title="36、什么是纯虚函数，与虚函数区别"></a>36、什么是纯虚函数，与虚函数区别</h2><ul><li>虚函数和纯虚函数区别？<ul><li><p>虚函数是为了实现动态联编产生的，目的是通过基类类型的<b>指针</b>指向不同对象时，自动调用相应的、和基类同名的函数<br>（使用同一种调用形式，既能调用派生类又能调用基类的同名函数）</p><p>虚函数需要在基类中加上virtual修饰符修饰，因为virtual会被隐式继承，所以子类中相同函数都是虚函数。【返回类型，参数等要相同】<br>当一个成员函数被声明为虚函数之后，其派生类中同名函数自动成为虚函数</p><p>在派生类中重新定义此函数时要求函数名、返回值类型、参数个数和类型全部与基类函数相同.</p></li><li><p>纯虚函数只是相当于一个接口名，但含有纯虚函数的类不能够实例化</p></li></ul></li></ul><p>纯虚函数首先是虚函数，其次没有函数体，取而代之的是用”&#x3D;0”。</p><p>既然是虚函数，它的指针就会被存在虚函数表中，由于纯虚函数并没有具体的函数体，因此它在虚函数表中的值就为0，而须有函数体的虚函数则是函数的具体地址。</p><p>一个类中如果有纯虚函数的话，称其为抽象类。<br>抽象类不能用于实例化对象，否则会报错。</p><p>抽象类一般用于定义一些公有的方法。子类继承抽象类也必须实现其中的纯虚函数才能实例化对象【否则也是接口】</p><p>举例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">fun1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;普通虚函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">fun2</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">virtual</span> ~<span class="built_in">Base</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span>: <span class="keyword">public</span> Base&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">fun2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;子类实现的纯虚函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  Base *b = <span class="keyword">new</span> Son;</span><br><span class="line">  b-&gt;<span class="built_in">fun1</span>();  <span class="comment">// 普通虚函数</span></span><br><span class="line">  b-&gt;<span class="built_in">fun2</span>();  <span class="comment">// 子类实现的纯虚函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>cpp11</title>
      <link href="/2022/03/27/cpp11/"/>
      <url>/2022/03/27/cpp11/</url>
      
        <content type="html"><![CDATA[<h1 id="C-11新标准"><a href="#C-11新标准" class="headerlink" title="C++ 11新标准"></a>C++ 11新标准</h1><h2 id="1-C-11有哪些新特性？"><a href="#1-C-11有哪些新特性？" class="headerlink" title="1. C++ 11有哪些新特性？"></a>1. C++ 11有哪些新特性？</h2><ul><li><p>nullptr 替代 NULL</p></li><li><p>引入了auto 和 decltype 这两个关键字实现了类型推导</p></li><li><p>基于范围的 for 循环 for(auto &amp;i : res){}</p></li><li><p>类和结构体中的初始化列表</p></li><li><p>Lambda表达式（匿名函数）</p></li><li><p>std::forward_list（单向链表）</p></li><li><p>右值引用和move语义</p></li><li><p>…</p></li></ul><hr><h2 id="2、auto、decltype和decltype-auto-的用法"><a href="#2、auto、decltype和decltype-auto-的用法" class="headerlink" title="2、auto、decltype和decltype(auto)的用法"></a>2、auto、decltype和decltype(auto)的用法</h2><ol><li>auto<br>C++ 11新标准引入了auto类型说明符，用它就能让编译器替我们去分析表达式所属的类型。<br>和原来哪些只对应某种特定类型的说明符（例如int）不同</li></ol><p><b>auto让编译器通过初始值来进行类型推演。从而获得定义变量的类型，所以说auto定义的变量必须有初始值。</b></p><p>举例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通类型</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>, b = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">auto</span> c = a + b; <span class="comment">// c 为 int 类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const 类型</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> i = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">auto</span> j = i; <span class="comment">// 变量i是顶层const，会被忽略，所以j的类型是int【初始值】</span></span><br><span class="line"><span class="keyword">auto</span> k = &amp;i;    <span class="comment">// 变量i是一个常量，对常量取地址是一种底层const，所以k的类型是const int*</span></span><br><span class="line"><span class="type">const</span> <span class="keyword">auto</span> l = i;   <span class="comment">// 如果希望推断出的类型是顶层const，则需要手动在auto前加上const</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用和指针类型</span></span><br><span class="line"><span class="type">int</span> x = <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span>&amp; y = x;</span><br><span class="line"><span class="keyword">auto</span> z = y; <span class="comment">// z是int类型不是int&amp;类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span>&amp; p1 = y;   <span class="comment">// p1是int&amp;类型</span></span><br><span class="line"><span class="keyword">auto</span> p2 = &amp;x;   <span class="comment">// p2是指针类型int*</span></span><br></pre></td></tr></table></figure><ol start="2"><li>decltype<br>有时候我们还会遇到这种情况：<br><b>我们希望从表达式中推断出要定义变量的类型，却不想用表达式的值去初始化变量。</b></li></ol><p>还有可能是函数的返回值为某表达式的值类型。<br>此时auto无能为力，所以C++11引入了第二种类型说明符decltype<br><b>它的作用是选择并返回操作数的数据类型。在此过程中，编译器只是分析表达式并得到它的类型，却不进行实际的计算表达式的值</b></p><p>例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通类型</span></span><br><span class="line"><span class="keyword">decltype</span>(<span class="built_in">func</span>())    sum = <span class="number">5</span>;    <span class="comment">// sum的类型是func()的返回值类型int，但此时不会实际调用func()</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">decltype</span>(a) b = <span class="number">4</span>;  <span class="comment">// a的类型是int，所以b的类型也是int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不论是顶层const还是底层const，decltype都会保留</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">decltype</span>(c) d = c;  <span class="comment">// d 的类型和c的类型是一样的，都是顶层const</span></span><br><span class="line"><span class="type">int</span> e = <span class="number">4</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* f = &amp;e;  <span class="comment">// f 是底层const</span></span><br><span class="line"><span class="keyword">decltype</span>(f) g = f;  <span class="comment">// g 是底层const</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用于指针类型</span></span><br><span class="line"><span class="comment">//1. 如果表达式是引用类型，则decltype的类型也是引用</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> i = <span class="number">3</span>, &amp;j = i;</span><br><span class="line"><span class="keyword">decltype</span>(j) k = <span class="number">5</span>;  <span class="comment">// k 的类型是 const int&amp;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 如果表达式是引用类型，但是想要得到这个引用所指向的类型，需要修改表达式：</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">3</span>, &amp;r = i;</span><br><span class="line"><span class="keyword">decltype</span>(r + <span class="number">0</span>) t = <span class="number">5</span>;  <span class="comment">// 此时是int类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 对指针的解引用操作返回的是引用类型</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">3</span>, j = <span class="number">6</span>, *p = &amp;i;</span><br><span class="line"><span class="keyword">decltype</span>(*p) c = j; <span class="comment">// c是int&amp; 类型，c和j绑定在一起</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 如果一个表达式的类型不是引用，但是我们需要推断出引用，那么可以加上一对括号，就变成引用类型</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">decltype</span>((i)) j = i;    <span class="comment">// 此时j的类型是int&amp;类型，j和i绑定在了一起</span></span><br></pre></td></tr></table></figure><ol start="3"><li>decltype(auto)<br>decltype(auto) 是 C++14 新增的类型指示符，可以用来声明变量以及指示函数返回类型。<br>在使用时，会将”&#x3D;”左侧的表达式替换掉auto，在根据decltype的语法规则来确定类型。</li></ol><p>举例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> e = <span class="number">4</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* f = &amp;e;  <span class="comment">// f是底层const</span></span><br><span class="line"><span class="keyword">decltype</span>(<span class="keyword">auto</span>) j = f;   <span class="comment">// j的类型是 const int* 并且指向的是e</span></span><br><span class="line"><span class="comment">// 相当于此处j替换了auto</span></span><br></pre></td></tr></table></figure><hr><ol start="3"><li>C++中NULL和nullptr的区别<br>算是为了与C语言进行兼容而定义的一个问题</li></ol><p>NULL来自C语言，一般由宏定义实现，而nullptr则是C++11的新增关键字。<br><b>在C语言中，NULL被定义为(void*) 0，而在C++语言中，NULL则被定义为整数0。</b></p><p>编译器一般对其实际定义如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NULL 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NULL ((void *)0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>在C++中指针必须有明确的类型定义。<br>但是将NULL定义为0带来的一个问题是无法与整数的0区分。<br>因为C++中允许有函数重载，所以可以试想如下函数定义情况：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">char</span>* p)</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;char*&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;int&quot;</span> &lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">fun</span>(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果: int</span></span><br></pre></td></tr></table></figure><p>那么在传入NULL参数时，会把NULL当做整数0来看，但如果想调用参数是指针的函数，如何解决？</p><p>nullptr在C++中被引入解决这一问题，nullptr可以明确区分整型和指针类型，能够根据环境自动转换成相应的指针类型，但不会被转换为任何整型，所以不会造成参数传递错误。</p><p>nullptr的一种实现方式如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="keyword">class</span> <span class="title class_">nullptr_t</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;   <span class="keyword">inline</span> <span class="keyword">operator</span> T*() <span class="type">const</span>&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">C</span>, <span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="keyword">inline</span> <span class="keyword">operator</span> T C::*() <span class="type">const</span>&#123; <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">void</span> <span class="keyword">operator</span>&amp;() <span class="type">const</span>&#123;&#125;;</span><br><span class="line">&#125; <span class="literal">nullptr</span> = &#123;&#125;;</span><br></pre></td></tr></table></figure><p>以上通过模板类和运算符重载的方式来对不同类型的指针进行实例化，从而解决了（void）指针带来的参数类型不明问题</p><ul><li><p>另外由于nullptr是明确的指针类型，所以不会与整形变量相混淆</p></li><li><p>但nullptr仍存在一些问题，例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">char</span>* p)</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;char* p&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">int</span>* p)</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;int* p&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;int p&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">fun</span>((<span class="type">char</span>*) <span class="literal">nullptr</span>);   <span class="comment">// 语句1</span></span><br><span class="line">    <span class="built_in">fun</span>(<span class="literal">nullptr</span>);   <span class="comment">// 语句2</span></span><br><span class="line">    <span class="built_in">fun</span>(<span class="literal">NULL</span>);      <span class="comment">// 语句3</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行结果：</span></span><br><span class="line"><span class="comment">// 语句1：char* p</span></span><br><span class="line"><span class="comment">// 语句2：报错，有多个匹配</span></span><br><span class="line"><span class="comment">// 语句3：int p</span></span><br></pre></td></tr></table></figure><p>在这种情况下存在对不同指针类型的函数重载，次数如果传入nullptr指针则仍然存在无法区分应实际调用哪个函数，这种情况下必须显式指明指针参数类型。</p></li></ul><hr><h2 id="4、智能指针的原理、常用的智能指针及实现"><a href="#4、智能指针的原理、常用的智能指针及实现" class="headerlink" title="4、智能指针的原理、常用的智能指针及实现"></a>4、智能指针的原理、常用的智能指针及实现</h2><ul><li><p>原理<br>智能指针是一个类，用来存储指向动态分配对象的指针，负责自动释放动态分配的对象，防止堆内存泄漏。<br>动态分配的资源，交给一个类对象去管理，当类对象生命周期结束时，自动调用析构函数释放资源。</p></li><li><p>常用的智能指针</p><ol><li>shared_ptr<br>  实现原理：采用引用计数器的方法，允许多个智能指针指向同一个对象，每当多一个指针指向该对象时，指向该对象的所有智能指针内部引用计数加1<br>    每当减少一个智能指针指向对象时，引用计数会减1，当计数为0的时候会自动释放动态分配的资源。</li></ol><ul><li><p>智能指针将一个计数器与类指向的对象相关联，引用计数器跟踪共多少个类对象共享一个指针</p></li><li><p>每次创建类的新对象时，初始化指针并将引用计数置为1</p></li><li><p>当对象作为另一个对象的副本而创建时，拷贝构造函数拷贝指针增加与之相应的引用计数</p></li><li><p>当一个对象进行赋值时，赋值操作符减少左操作数所指对象的引用计数（若引用计数减为0，则删除对象，并增加右操作数所指对象的引用计数。</p></li><li><p>调用析构函数时，构造函数减少引用计数（如果引用计数减为0，则删除基础对象）</p></li></ul><ol start="2"><li>unique_ptr<br>  unique_ptr采用的是独享所有权语义，一个非空的unique_ptr总是拥有它所指向的资源。</li></ol><p>  转移一个unique_ptr将会把所有权全部从源指针转移给目标指针，源指针被置空；<br>  所以unique_ptr不支持普通的拷贝的赋值操作，不能用在STL标准容器中；</p><p>  局部变量的返回值除外（因为编译器知道返回的对象将要被销毁）<br>  如果拷贝一个unique_ptr，那么拷贝结束后，两个unique_ptr都会指向相同的资源，造成在结束时对同一内存指针多次释放而导致程序崩溃。</p><ol start="3"><li>weak_ptr<br>  weak_ptr：弱引用。<br>  引用计数有一个问题就是互相引用形成环（环形引用），这样两个指针指向的内存都无法释放。</li></ol><p>  需要使用weak_ptr打破环形引用。<br>  weak_ptr是一个弱引用，它是为了配合shared_ptr而引入的一种智能指针<br>  它指向一个由shared_ptr管理的对象而不影响所指对象的生命周期，也就是说，<code>只引用，不计数</code>。</p><p>  如果一块内存被shared_ptr和weak_ptr同时引用，当所有shared_ptr析构了之后，不管还有没有weak_ptr引用该内存，内存也会被释放。<br>  所以weak_ptr不保证它所指向的内存一定是有效的<br>  在使用之前使用函数lock()检查weak_ptr是否为空指针。</p><ol start="4"><li>auto_ptr<br>  主要是为了解决“有异常抛出时发生内存泄漏”的问题。因为发生异常，无法正常释放内存。<br>  【构造函数构造A&#x2F;B资源时候有一个失败，则其析构函数不会触发】</li></ol><p>  auto_ptr有拷贝语义，拷贝后源对象变得无效，这可能引发很严重的问题；<br>  而unique_ptr则无语义拷贝，但提供了移动语义，这样的错误不再可能发生，因为很明显必须使用std::move()进行转移。</p><p>  auto_ptr不支持拷贝和赋值操作，不能用在STL标准容器中。<br>  STL容器中的元素经常要支持拷贝、赋值操作，在这过程中auto_ptr会传递所有权，所以不能在STL中使用。</p></li><li><p>智能指针shared_ptr代码实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SharedPtr</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SharedPtr</span>(T* ptr = <span class="literal">NULL</span>):_ptr(ptr), _pcount(<span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">1</span>))&#123;&#125;</span><br><span class="line">    <span class="built_in">SharedPtr</span>(<span class="type">const</span> SharedPtr&amp; s):_ptr(s._ptr), _pcount(s._pcount)&#123; <span class="comment">// 复制构造函数</span></span><br><span class="line">        (*_pcount)++;</span><br><span class="line">    &#125;</span><br><span class="line">    SharedPtr&lt;T&gt;&amp; <span class="keyword">operator</span>=(<span class="type">const</span> SharedPtr&amp; s)&#123;    <span class="comment">// 赋值运算符</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> != s)&#123;</span><br><span class="line">            <span class="keyword">if</span>(--(*(<span class="keyword">this</span>-&gt;_pcount)) == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">delete</span> <span class="keyword">this</span>-&gt;_ptr;</span><br><span class="line">                <span class="keyword">delete</span> <span class="keyword">this</span>-&gt;_pcount;</span><br><span class="line">            &#125;</span><br><span class="line">            _ptr = s._ptr;</span><br><span class="line">            _pcount = s._pcount;</span><br><span class="line">            *(_pcount)++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    T&amp; <span class="keyword">operator</span>*()&#123;</span><br><span class="line">        <span class="keyword">return</span> *(<span class="keyword">this</span>-&gt;_ptr);</span><br><span class="line">    &#125;</span><br><span class="line">    T* <span class="keyword">operator</span>-&gt;()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;_ptr;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">SharedPtr</span>()&#123;</span><br><span class="line">        <span class="keyword">if</span>(--(*(<span class="keyword">this</span>-&gt;_pcount)) == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">delete</span> _ptr;</span><br><span class="line">            _ptr = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">delete</span> _pcount;</span><br><span class="line">            _pcount = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T* _ptr;</span><br><span class="line">    <span class="type">int</span>* _pcount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="5、关于lambda函数的全部知识"><a href="#5、关于lambda函数的全部知识" class="headerlink" title="5、关于lambda函数的全部知识"></a>5、关于lambda函数的全部知识</h2><ol><li><p>利用lambda表达式可以编写内嵌的匿名函数，用以替换独立函数或者函数对象。</p></li><li><p>每当定义一个lambda表达式后，编译器会自动生成一个匿名类（这个类重载了()运算符），我们称之为闭包类型（closure type）<br>那么在运行时，这个lambda表达式就会返回一个匿名的闭包实例，是一个右值。</p><p>所以，我们上面的lambda表达式的结果就是一个个闭包。<br>闭包的一个强大之处是其可以通过传值或者引用的方式捕捉器封装作用域内的变量，前面的方括号就是用来定义捕捉模式以及变量，称之为lambda捕捉块。</p></li><li><p>lambda表达式的语法定义如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[capture](parameters)<span class="keyword">mutable</span>-&gt;<span class="keyword">return</span>-type&#123;statement&#125;;</span><br></pre></td></tr></table></figure></li><li><p>lambda必须使用尾置返回来指定返回类型，可以忽略参数列表和返回值，但必须永远包含捕获列表和函数体。</p></li></ol><hr><h2 id="6、智能指针的作用"><a href="#6、智能指针的作用" class="headerlink" title="6、智能指针的作用"></a>6、智能指针的作用</h2><ol><li><p>C++11中引入了智能指针的概念，方便管理堆内存。使用普通指针，容易造成堆内存泄漏（忘记释放）、二次释放、程序发生异常时内存泄漏等问题<br>使用智能指针可以更好地管理内存。</p></li><li><p>智能指针在C++11版本后提供，包含在头文件&lt; memory&gt;中，shared_ptr、unique_ptr、weak_ptr。<br>shared_ptr多个指针指向相同的对象，shared_ptr使用引用计数，每一个shared_ptr的拷贝都指向相同的内存。<br>每使用他一次，内部的引用计数就会加1；每析构一次，内部的引用计数就会减1，减为0时，自动删除所指向的堆内存。<br>shared_ptr内部的引用计数是线程安全的，但是对象的读取需要加锁。</p></li><li><p>初始化<br>智能指针是个模板类，可以指定类型，传入指针通过构造函数初始化。也可以使用make_shared函数初始化。<br>不能将指针直接赋值给一个智能指针，一个是类，一个是指针。</p><p>例如：std::stared_ptr<int> p4 &#x3D; new int(1);写法是错误的</p></li><li><p>拷贝和赋值<br>拷贝使得对象的引用计数+1，赋值使得原对象引用计数-1，当计数为0时，自动释放内存。<br>后来指向的对象引用计数+1，指向后来的对象。</p></li><li><p>unique_ptr“唯一”拥有其所指对象，同一时刻只能有一个unique_ptr指向给定对象（通过禁止拷贝语义、只有移动语义来实现）。<br>相比于原始指针，unique_ptr用于其RAII的特性，使得在出现异常的情况下，动态资源能得到释放。</p><p>unique_ptr指针本身的生命周期：<br>  从unique_ptr指针创建时开始，直到离开作用域。离开作用域时，若其指向对象存在，则将其所指对象销毁（默认用delete操作符，用户可指定其他操作）</p><p>unique指针与其所指对象关系：<br>  在智能指针生命周期内，可以改变智能指针所指对象，<br>  如创建智能指针时通过构造函数指定、通过reset方法重新指定、通过release方法释放所有权、通过移动语义转移所有权</p></li><li><p>智能指针类将一个计数器与类指向的对象相关联，引用计数跟踪该类有多少个对象共享同一指针。<br>每次创建类的新对象时，初始化指针并将引用计数置为1；<br>当对象作为另一对象的副本而创建时，拷贝构造函数拷贝指针并增加与之相应的引用计数；<br>对一个对象进行赋值时，赋值操作符减少左操作数所指对象的引用计数（如果减为0，则删除对象），并增加右操作数所指对象的引用计数；<br>调用析构函数时，构造函数减少引用计数（若引用计数减为0，则删除基础对象）</p></li><li><p>weak_ptr是一种不控制对象生命周期的智能指针，它指向一个shared_ptr管理的对象<br>进行该对象的内存管理的是那个强引用的shared_ptr<br>weak_ptr只是提供了对管理对象的一个访问手段。<br>weak_ptr设计的目的是为了配合shared_ptr而引入的一种智能指针来协助shared_ptr工作，它置可以从一个shared_ptr或另外一个weak_ptr对象构造<br>它的构造和析构不会引起计数的增加或减少。</p></li></ol><hr><h2 id="7、说说了解的auto-ptr作用"><a href="#7、说说了解的auto-ptr作用" class="headerlink" title="7、说说了解的auto_ptr作用"></a>7、说说了解的auto_ptr作用</h2><ol><li><p>auto_ptr的出现，主要是为了解决“有异常抛出时发生内存泄漏”的问题；<br>抛出异常，将导致指针p所指向的空间得不到释放而导致内存泄漏。</p></li><li><p>auto_ptr构造时取得某个对象的控制权，在析构时释放该对象。<br>我们实际上是创建一个auto_ptr类型的局部对象，该局部对象析构时，会将自身拥有的指针空间释放，所以不会有内存泄漏；</p></li><li><p>auto_ptr的构造函数是explicit，阻止了一般指针隐式转换为auto_ptr的构造，所以不能直接将一般类型的指针赋值给auto_ptr类型的喜爱那个<br>必须要用auto_ptr的构造函数创建对象；</p></li><li><p>由于auto_ptr对象析构时会删除它所拥有的指针，所以使用时避免多个auto_ptr对象管理同一指针；</p></li><li><p>auto_ptr内部实现，析构函数中删除对象用的是delete而非delete[]，所以auto_ptr不能管理数组；</p></li><li><p>auto_ptr支持所拥有的指针类型之间的隐式类型转换；</p></li><li><p>可以通过*和-&gt;运算符对auto_ptr所有用的指针进行操作</p></li><li><p>T* get()，获得auto_ptr所拥有的指针；<br>T* release()，释放auto_ptr的所有权，并将所有用的指针返回。</p></li></ol><hr><h2 id="8、智能指针的循环引用"><a href="#8、智能指针的循环引用" class="headerlink" title="8、智能指针的循环引用"></a>8、智能指针的循环引用</h2><p>循环引用是指使用多个智能指针shared_ptr，出现了指针之间相互指向，从而形成环的情况，有点类似于死锁<br>这种情况下，智能指针往往不能正常调用对象的析构函数，从而造成内存泄漏。</p><p>举例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Node</span>(<span class="type">const</span> T&amp; value):_pPre(<span class="literal">nullptr</span>), _pNext(<span class="literal">nullptr</span>), _value(value)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Node()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Node</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Node()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;this:&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    shared_ptr&lt;Node&lt;T&gt; &gt; _pPre;</span><br><span class="line">    shared_ptr&lt;Node&lt;T&gt; &gt; _pNext;</span><br><span class="line">    T _value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Funtest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    shared_ptr&lt;Node&lt;<span class="type">int</span>&gt; &gt; <span class="built_in">sp1</span>(<span class="keyword">new</span> <span class="built_in">Node</span>&lt;<span class="type">int</span>&gt;(<span class="number">1</span>));</span><br><span class="line">    shared_ptr&lt;Node&lt;<span class="type">int</span>&gt; &gt; <span class="built_in">sp2</span>(<span class="keyword">new</span> <span class="built_in">Node</span>&lt;<span class="type">int</span>&gt;(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp1.use_count:&quot;</span> &lt;&lt; sp1.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp2.use_count:&quot;</span> &lt;&lt; sp2.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    sp1-&gt;_pNext = sp2;  <span class="comment">// sp2的引用+1</span></span><br><span class="line">    sp2-&gt;_pPre = sp1;   <span class="comment">// sp1的引用+1</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp1.use_count:&quot;</span> &lt;&lt; sp1.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp2.use_count:&quot;</span> &lt;&lt; sp2.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">Funtest</span>();</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="comment">// Node()</span></span><br><span class="line"><span class="comment">// Node()</span></span><br><span class="line"><span class="comment">// sp1.use_count: 1</span></span><br><span class="line"><span class="comment">// sp2.use_count: 1</span></span><br><span class="line"><span class="comment">// sp1.use_count: 2</span></span><br><span class="line"><span class="comment">// sp2.use_count: 2</span></span><br></pre></td></tr></table></figure><p>从上面shared_ptr的实现中我们知道了只有当引用计数–之后等于0，析构时才会释放对象，而上述情况造成了一个僵局<br>那就是析构对象时限析构sp2，可是由于sp2的空间sp1还在使用中，所以sp2.use_count–后为1，不释放，<br>sp1也同理，由于sp1的空间sp2还在使用中，所以sp1.use_count–之后为1，也不释放。</p><p>sp1等着sp2先释放，sp2等着sp1先释放，二者互不谦让，导致最终都没能释放，内存泄漏。</p><h2 id="在实际编程过程中，应该尽量避免出现智能指针之间相互指向的情况，如果不可避免，可以使用弱指针weak-ptr，不增加引用计数，只要出了作用域自动析构。"><a href="#在实际编程过程中，应该尽量避免出现智能指针之间相互指向的情况，如果不可避免，可以使用弱指针weak-ptr，不增加引用计数，只要出了作用域自动析构。" class="headerlink" title="在实际编程过程中，应该尽量避免出现智能指针之间相互指向的情况，如果不可避免，可以使用弱指针weak_ptr，不增加引用计数，只要出了作用域自动析构。"></a>在实际编程过程中，应该尽量避免出现智能指针之间相互指向的情况，如果不可避免，可以使用弱指针weak_ptr，不增加引用计数，只要出了作用域自动析构。</h2><h2 id="9、手写实现智能指针需要实现哪些函数？"><a href="#9、手写实现智能指针需要实现哪些函数？" class="headerlink" title="9、手写实现智能指针需要实现哪些函数？"></a>9、手写实现智能指针需要实现哪些函数？</h2><ol><li><p>智能指针是一个数据类型，一般用模板实现，模拟指针行为的同时还要提供自动垃圾回收机制。<br>他会自动记录SmartPointer&lt; T*&gt; 对象的引用计数，一旦T类型对象的引用计数为0，就释放该对象</p><p>除了<code>指针对象</code>以外，还需要一个<code>引用计数的指针</code>设定对象的值，并将引用计数记为1，需要一个构造函数。<br>新增对象还需要一个构造函数，析构函数负责引用计数减少和释放内存。</p><p>通过覆写赋值运算符，才能将一个旧的智能指针赋值给另一个指针，同时旧的引用计数减1，新的引用计数加1</p></li><li><p>一个构造函数、拷贝构造函数、复制构造函数、析构函数、移动函数</p></li></ol><hr><h2 id="10、智能指针出现循环引用如何解决？"><a href="#10、智能指针出现循环引用如何解决？" class="headerlink" title="10、智能指针出现循环引用如何解决？"></a>10、智能指针出现循环引用如何解决？</h2><p>弱指针weak_ptr专门解决shared_ptr循环引用的问题，weak_ptr不会修改引用计数，即其存在与否并不会影响对象的引用计数器。</p><p>循环引用即：<br>两个对象互相使用一个shared_ptr成员变量指向对方。<br>弱引用并不对对象的内存进行管理，在功能上类似普通指针，<br>然而一个比较大的区别是，弱引用能检测到所管理的对象是否已经被释放，从而避免访问非法内存。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>cppMemory</title>
      <link href="/2022/03/26/cppMemory/"/>
      <url>/2022/03/26/cppMemory/</url>
      
        <content type="html"><![CDATA[<h1 id="C-内存管理"><a href="#C-内存管理" class="headerlink" title="C++内存管理"></a>C++内存管理</h1><h2 id="1、类的对象存储空间？"><a href="#1、类的对象存储空间？" class="headerlink" title="1、类的对象存储空间？"></a>1、类的对象存储空间？</h2><ul><li><p>非静态成员数据类型大小之和</p></li><li><p>编译器加入的额外成员变量（如指向虚函数表的指针）。</p></li><li><p>为了边缘对齐优化增加的padding<br>空类（无非静态数据成员）的对象的size为1，当作为基类时，size为0。</p></li></ul><hr><h2 id="2、简要说明C-的内存分区"><a href="#2、简要说明C-的内存分区" class="headerlink" title="2、简要说明C++的内存分区"></a>2、简要说明C++的内存分区</h2><p>C++中的内存分区，分别是堆、栈、自由存储区、全局&#x2F;静态存储区、常量存储区和代码区。如下图所示：</p><img src="/2022/03/26/cppMemory/cppMemory.png" class=""><p>栈：在执行函数时，函数内<code>局部变量</code>的存储单元都可以在栈上创建，函数执行结束时这些存储单元自动被释放。<br>    栈内存分配运算内置于处理器的指令集中，效率很高，但是分配的内存容量有限</p><p>堆：就是那些由<code>new</code>分配的内存块，他们的释放编译器不去管，由应用程序控制（程序员控制），一般一个<code>new</code>要对应一个<code>delete</code>。<br>    如果程序员没有释放掉，那么程序结束后，操作系统会自动回收。</p><p>自由存储区：如果说堆是操作系统维护的一块内存，那么自由存储区就是C++中通过new和delete动态分配和释放对象的抽象概念。<br>           注意，自由存储区和堆比较像，但不等价。【自由存储区是一个逻辑概念】</p><p>全局&#x2F;静态存储区：全局变量和静态变量被分配到同一块内存中，在以前的C语言中，全局变量和静态变量又分为初始化和未初始化的。<br>                在C++中没有这个区分了，他们共同占用同一块内存区，在该区定义的变量如果没有初始化，则会被自动初始化，例如int类型自动初始化为0</p><p>常量存储区：是一块比较特殊的存储区，里面存放的是常量，不允许修改</p><h2 id="代码区：存放函数体的二进制代码"><a href="#代码区：存放函数体的二进制代码" class="headerlink" title="代码区：存放函数体的二进制代码"></a>代码区：存放函数体的二进制代码</h2><h2 id="3、什么是内存池，如何实现？"><a href="#3、什么是内存池，如何实现？" class="headerlink" title="3、什么是内存池，如何实现？"></a>3、什么是内存池，如何实现？</h2><p>内存池（Memory Pool）是一种<code>内存分配</code>方式<br>通常我们习惯直接用new、malloc等申请内存，这样做的缺点在于：<br>由于所申请内存块的大小不定，当频繁使用时会造成大量的内存碎片进而降低性能。<br>内存池则是在真正使用内存之前，先申请分配一定数量的、大小相等（一般情况下）的内存块留作备用。<br>当有新的内存需求时，就从内存池中分出一部分内存块，若内存块不够再继续申请新的内存。<br>这样做的一个显著优点是尽量避免了内存碎片，使得内存分配效率得到提升。</p><p>简述《STL源码剖析》中内存池实现机制：</p><p>allocate包装malloc、deallocate包装free</p><p>一般是一次20*2个的申请，先用一半，再留一半【原因未知】，说是C++委员会认为20是个比较好的数字，不大也不小。</p><ol><li><p>首先客户端会调用malloc()配置一定数量的区块（固定大小的内存块，通常为8的倍数）<br>假设40个32B的区块，其中20个区块（一半）给程序实际使用，1个区块交出，另外19个处于维护状态。<br>剩余20个（一半）留给内存池，此时一共有（20*32B）</p></li><li><p>客户端之后有内存需求，想申请（20*64B）的空间，这时内存池只有（20 *32B）<br>就先将（10 *64B）个区块返回，1个区块交出，另外9个维护状态，此时内存池空空如也。</p></li><li><p>接下来如果客户端还有内存需求，就必须再调用malloc()配置空间，此时新申请的区块数量会增加一个随着配置次数越来越大的附加量。<br>同样一般提供程序使用，另外一般留给内存池。<br>申请内存的时候永远是先看内存池有无剩余，有的话就用，然后挂载到0-15号某一条链表上，要不然就重新申请。</p></li><li><p>如果整个堆的空间都不够了，就会在原先已经分配区块中寻找能满足当前需求的区块数量，<br>能满足就返回，不能满足就向客户端报bad_alloc异常。</p></li></ol><p>allocator 就是用来分配内存的，最重要的两个函数是allocate和deallocate，就是用来申请内存和回收内存的，<br>外部（一般指容器）调用的时候只需要知道这些就够了。</p><p>内部实现，目前的所有编译器都是直接调用的::operator new()和::operator delete()<br>说白了就是和直接使用new运算符的效果是一样的，所以没做任何特殊处理</p><ul><li>其实最开始GC2.9之前<br>new 和 operator new 的区别：new是个运算符，编辑器会调用 operator new(0)</li></ul><p>operator new()里面有调用malloc的操作，同样operator delete()里面有调用 free的操作。</p><ul><li>GC 2.9 下的alloc函数一个比较好的分配器实现规则如下：<br>维护一条0-15号的一共16条链表，其中0号表示8B，1号表示16B，2号表示24B……15号表示16 * 8 &#x3D; 128B。</li></ul><p>如果在申请内存时，申请内存的大小并不是8的倍数（例如2&#x2F;4&#x2F;7&#x2F;9&#x2F;18这样不是8的倍数），那就找到刚好能满足内存大小的链表。<br>比如想申请12个内存大小，就按照16来处理，也就是找1号链表。想申请20，距离最近的就是24，则找2号链表。</p><ul><li>在GC 4.9及其以后<br>也还有alloc函数，只不过变成了_pool_alloc这个名字了，名字改了，也不再是默认的了</li></ul><p>需要自己手动指定也可以他自己指定，比如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;string, __gnu_cxx:pool_alloc&lt;string&gt; &gt; vec;</span><br></pre></td></tr></table></figure><h2 id="这样来使用它，相当于兜兜转转回到了以前的malloc和free的包装形式了。"><a href="#这样来使用它，相当于兜兜转转回到了以前的malloc和free的包装形式了。" class="headerlink" title="这样来使用它，相当于兜兜转转回到了以前的malloc和free的包装形式了。"></a>这样来使用它，相当于兜兜转转回到了以前的malloc和free的包装形式了。</h2><h2 id="4、C-的管理内存？"><a href="#4、C-的管理内存？" class="headerlink" title="4、C++的管理内存？"></a>4、C++的管理内存？</h2><p>在C++中，内存分为5个区，分别是堆、栈、全局&#x2F;静态存储区和常量存储区和代码区。</p><ul><li><p>栈，在执行函数时，函数内<code>局部变量</code>的存储单元都可以在栈上创建，函数执行结束时这些存储单元自动被释放。<br>栈内存分配运算内置于处理器的指令集中，效率很高，但是分配的内存容量有限。</p></li><li><p>堆，就是那些由new分配的内存块，他们的释放编译器不去管，由应用程序【程序员】去控制<br>一般一个new就要对应一个delete。如果程序员没有手动释放，那么程序结束后，操作系统会自动回收。</p></li><li><p>全局&#x2F;静态存储区，内存在程序编译时就已经分配好，这块内存在程序的整个运行期间都存在。<br>            它主要存放静态数据（局部static变量，全局static变量）、全局变量和常量。</p></li><li><p>常量存储区，这是一块比较特殊的存储区，他们里面存放的是常量字符串，不允许修改。</p></li><li><p>代码区，存放程序的二进制代码。</p></li></ul><hr><h2 id="5、C-中类的数据成员和成员函数内存分布情况"><a href="#5、C-中类的数据成员和成员函数内存分布情况" class="headerlink" title="5、C++中类的数据成员和成员函数内存分布情况"></a>5、C++中类的数据成员和成员函数内存分布情况</h2><p>C++类是由结构体发展得来的，所以他们的成员变量（C语言的结构体只有成员变量）的内存分配机制是一样的。</p><p>类分为成员变量和成员函数，先讨论成员变量：</p><p>一个类对象的地址就是类所包含的这一片内存空间的首地址，这个首地址也就对应具体某一个成员变量的地址。<br>（在定义类对象的时候这些成员变量也就被定义了）<br>例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = <span class="number">23</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">printAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="keyword">this</span>-&gt;age &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Person</span>()&#123;&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person p;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;对象地址：&quot;</span> &lt;&lt; &amp;p &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;age地址：&quot;</span> &lt;&lt; &amp;(p.age) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;对象大小：&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(p) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;age大小：&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(p.age) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="comment">// 对象地址：0x7fffec0f15a8</span></span><br><span class="line"><span class="comment">// age地址：0x7fffec0f15a8</span></span><br><span class="line"><span class="comment">// 对象大小：4</span></span><br><span class="line"><span class="comment">// age大小：4</span></span><br></pre></td></tr></table></figure><p>从代码运行结果来看，对象的大小和对象中数据成员的大小是一致的，也就是说，成员函数不占用对象的内存。<br>这是因为，<code>所有的函数都是要存放在代码区的</code>，不管是全局函数还是成员函数。</p><p>要是成员函数占用类的对象空间，那么每定义一次类对象，就有成员函数占用一段空间。</p><p>再来补充一下静态成员函数的存放问题：<code>静态成员函数与一般成员函数的唯一区别：没有this指针</code>，因此不能访问类的非静态数据成员。</p><h2 id="因为：所有函数都存放在代码区，静态函数也不例外，所有有人一看到static这个单词就主观的认为在全局数据区是不对的。"><a href="#因为：所有函数都存放在代码区，静态函数也不例外，所有有人一看到static这个单词就主观的认为在全局数据区是不对的。" class="headerlink" title="因为：所有函数都存放在代码区，静态函数也不例外，所有有人一看到static这个单词就主观的认为在全局数据区是不对的。"></a>因为：<b>所有函数都存放在代码区，静态函数也不例外，所有有人一看到static这个单词就主观的认为在全局数据区是不对的。</b></h2><h2 id="6、关于this指针知道什么？"><a href="#6、关于this指针知道什么？" class="headerlink" title="6、关于this指针知道什么？"></a>6、关于this指针知道什么？</h2><ul><li><p>this指针是类的指针，指向对象的首地址。</p></li><li><p>this指针只能在成员函数中使用，在全局函数、静态函数中都不能用this指针。</p></li><li><p>this指针只有在成员函数中才有定义，且存储位置会因编译器不同有不同存储位置。</p></li></ul><ol><li>this指针的用处<br>一个对象的this指针并不是对象本身的一部分，不会影响 sizeof(对象) 的结果。<br>this作用域是在类内部，当在类的<b>非静态成员函数</b>中访问类的<b>非静态成员</b>的时候（全局函数，静态函数中不能使用this指针）<br>编译器会自动将对象本身的地址作为一个隐含参数传递给函数。</li></ol><p>也就是说，即使没有写上this指针，编译器在编译的时候也是加上this的，它作为非静态成员函数的隐含形参，对各成员的访问均通过this进行。</p><ol start="2"><li>this指针的使用<br>一种情况就是，在类的非静态成员函数中返回类对象本身的时候，直接使用return *this;</li></ol><p>另外一种情况就是当形参数域成员变量名相同时用于区分，例如 this-&gt;n &#x3D; n（不能写成n&#x3D;n，普通的n是形参）</p><ol start="3"><li><p>类的this指针有以下特点</p></li><li><p>this只能在成员函数中使用，全局函数、静态函数都不能使用this。<br>实际上，传入参数为当前对象地址，成员函数第一个参数为：T* const this</p><p>例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中，func的原型在编译器看来应该是：<br>int func(A* const this, int p);</p></li><li><p>由此可见，this在成员函数的开始前构造，在成员函数的结束后清除。<br>这个生命周期同任何一个函数的参数是一样的，没有任何区别。<br>当调用一个类的成员函数时，编译器将类的指针作为函数的this参数传递进去，如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A a;</span><br><span class="line">a.<span class="built_in">func</span>(<span class="number">10</span>);    <span class="comment">// 此处，编译器会变异成 A::func(&amp;a, 10);</span></span><br></pre></td></tr></table></figure><p>看起来和静态函数没区别。<br>但区别还是有的，编译器通常会对this指针做一些优化，因此this指针的传递效率比较高<br>例如VC通常是通过ecx（技术寄存器）传递this参数的。</p></li></ol><hr><h2 id="7、几个this指针的易混问题"><a href="#7、几个this指针的易混问题" class="headerlink" title="7、几个this指针的易混问题"></a>7、几个this指针的易混问题</h2><ol><li>this指针是什么时候创建的？<br>this在成员函数的开始执行前构造，在成员函数的执行结束后清除。</li></ol><p>但是如果class或struct里面没有方法的话，它们是没有构造函数的，只能当做C的struct来使用。</p><p>采用TYPE xx 的方式定义的话，在栈里分配内存，此时this指针的值就是这块内存的地址。<br>采用new的方式创建对象的话，在堆里分配内存，new操作符通过eax（累加寄存器）返回分配的地址，然后设置给指针变量。</p><p>之后去调用构造函数（如果有构造函数的话），这时将这个内存块的地址传给ecx，之后构造函数里面怎么处理请看上面。</p><ol start="2"><li>this指针存放在何处？堆、栈、全局变量，还是其他？<br>this指针会因为编译器不同而有不同的放置位置。<br>可能是栈，可能是寄存器，甚至全局变量。</li></ol><p>在汇编级别里，一个值只会以三种形式出现：立即数、寄存器值和内存变量值。<br>不是放在寄存器内就是放在内存中，它们并不是和高级语言变量对应的。</p><ol start="3"><li>this指针是如何传递类中参数的？绑定？还是函数参数的首参数就是this指针？那么，this指针又是如何找到“类实例后函数的”？<br>大多数编译器通过ecx（寄数寄存器）传递this指针。<br>事实上，这是一个潜规则，一般来说，不同编译器都会遵从一致的传参规则，否则不同编译器产生的obj就无法匹配了。</li></ol><p>在 call 之前，编译器会把对应的对象地址放到eax中。<br>this是通过函数参数的首参数来传递的【隐含参数】。<br>this指针在调用之前生成，至于“类实例后函数”，没有这个说法。<br>类在实例化时，只分配类中的变量空间，<code>没有为函数分配空间</code>。自从类的函数定义完成后，它就在那，不会移动。</p><ol start="4"><li>this指针是如何访问类中的变量的？<br>如果不是类，而是结构体，那么如何通过结构指针来访问结构中的变量？</li></ol><p>在C++中，类和结构体只有一个区别：类的成员默认是private，结构体是public</p><p>this是类的指针，如果换成结构体，那this就是结构的指针了。</p><ol start="5"><li>我们只有获得一个对象后，才能通过对象使用this指针。如果我们知道一个对象this指针的位置，可以直接使用吗？<br><b>this指针只有在成员函数中才有定义。</b><br>因此，获得一个对象后，也不能通过对象使用this指针。<br>所以，无法知道一个对象的this指针的位置（只有在成员函数中才有this指针的位置）</li></ol><p>当然，在成员函数里，可以知道this指针位置（可以通过&amp;this）获得，也可以直接使用。</p><ol start="6"><li>每个类编译后，是否创建一个类中函数表保存函数指针，以便用来调用函数？<br>普通的类函数（不论是成员函数还是静态函数）都不会创建一个函数表来保存指针。<br>只有虚函数才会被放到函数表中。<br>但是，即使是虚函数，如果编译器就能明确知道调用的是哪个函数，编译器就不会通过函数表中的指针来间接调用，而是直接调用函数。</li></ol><h2 id="正是由于this指针的存在，用来指向不同的对象，从而确保不同对象之间调用相同函数可以互不干扰。"><a href="#正是由于this指针的存在，用来指向不同的对象，从而确保不同对象之间调用相同函数可以互不干扰。" class="headerlink" title="正是由于this指针的存在，用来指向不同的对象，从而确保不同对象之间调用相同函数可以互不干扰。"></a>正是由于this指针的存在，用来指向不同的对象，从而确保不同对象之间调用相同函数可以互不干扰。</h2><h2 id="8、内存泄漏的后果？如何监测？解决方法？"><a href="#8、内存泄漏的后果？如何监测？解决方法？" class="headerlink" title="8、内存泄漏的后果？如何监测？解决方法？"></a>8、内存泄漏的后果？如何监测？解决方法？</h2><ol><li><p>内存泄漏<br>内存泄漏是指由于疏忽或错误造成了程序未能释放掉不再使用内存的情况。<br>内存情况并非内存在物理上消失，而是应用程序分配某段内存后，由于设计错误，失去了对该段内存的控制。</p></li><li><p>后果<br>只发生一次小的内存泄漏可能不被注意，但泄漏大量内存的程序将会出现各种情况：<br> 性能下降到内存逐渐用完，导致另一个程序失败。</p></li><li><p>如何排除<br>使用工具软件BoundsChecker，BoundsChecker是一个运行时错误检测工具，它主要定位程序运行时期发生的各种错误；</p></li></ol><p>调试运行DEBUG版程序，运用以下技术：</p><ul><li>CRT（C run-time libraries）、</li><li>运行时函数调用堆栈、</li><li>内存泄漏时提示的内存分配序号（集成开发环境OUTPUT窗口），综合分析内存泄漏的原因，排除内存泄漏</li></ul><ol start="4"><li><p>解决办法<br>智能指针</p></li><li><p>检查、定位内存泄漏<br>检查方法：<br>  在main函数最后一行，加上一句_CrtDumpMemoryLeaks()。调试程序，自然关闭程序让其退出，查看输出：<br>  输出这样的格式：{453} normal block at 0x02432CA8, 868 bytes long<br>  被{}包围的453就是我们需要的内存泄漏定位值，868 bytes long就是说这个地方有868比特内存没有释放。</p></li></ol><p>定位代码位置：<br>  在main函数第一行加上_CrtSetBreakAlloc(453);<br>  就是在申请453这块内存位置中断。<br>  然后调试程序，程序中断了，查看调用堆栈。<br>  加上头文件#include &lt; crtdbg.h&gt;</p><hr><h2 id="9、在成员函数中调用delete-this会出现什么问题？对象还可以使用吗？"><a href="#9、在成员函数中调用delete-this会出现什么问题？对象还可以使用吗？" class="headerlink" title="9、在成员函数中调用delete this会出现什么问题？对象还可以使用吗？"></a>9、在成员函数中调用delete this会出现什么问题？对象还可以使用吗？</h2><p>在类的对象空间中，只有数据成员和虚函数指针表，并不包含代码内容，类的成员函数单独放在代码段中。</p><p>在调用成员函数时，隐含传递一个this指针，让成员函数知道当前是哪个对象正在调用它。<br>当delete this时，类对象的内存空间被释放。</p><p>在delete this之后的其他任何函数调用，只要不涉及this指针的内容，都能正常运行。<br>一旦涉及到this指针，如操作数据成员，调用虚函数等，就会出现不可预期的问题。</p><hr><h2 id="10、为什么是不可预期的问题？"><a href="#10、为什么是不可预期的问题？" class="headerlink" title="10、为什么是不可预期的问题？"></a>10、为什么是不可预期的问题？</h2><p>delete this之后释放了类对象的内存空间，那么这段内存应该已经归还给系统，不再属于这个进程。<br>照这个逻辑来看，应该是发生了指针错误，无访问权限之类的令系统崩溃的问题才对？</p><p>这个问题牵扯到操作系统的内存管理策略。<br>delete this释放了类对象的内存空间，但是内存空间却并不是马上被回收到系统中，可能是缓冲或者其他什么原因，导致这段内存空间暂时没被系统收回。<br>此时这段内存是可以访问的，可以进行算术运算，但是其中值无法确定。</p><p>当获取数据成员，可能得到的是一串很长的未初始化的随机数；<br>当访问虚函数表，其中指针无效可能性非常高，造成系统崩溃。</p><hr><h2 id="11、如果在类的析构函数中调用delete-this，会发生什么？"><a href="#11、如果在类的析构函数中调用delete-this，会发生什么？" class="headerlink" title="11、如果在类的析构函数中调用delete this，会发生什么？"></a>11、如果在类的析构函数中调用delete this，会发生什么？</h2><p>会导致堆栈溢出。<br>原因很简单，delete的本质是“为将被释放的内存调用一个或多个<code>析构函数</code>，然后释放内存”</p><h2 id="显然，delete-this会去调用本对象的析构函数，而析构函数中又调用delete-this，形成无限递归，造成堆栈溢出，系统崩溃。"><a href="#显然，delete-this会去调用本对象的析构函数，而析构函数中又调用delete-this，形成无限递归，造成堆栈溢出，系统崩溃。" class="headerlink" title="显然，delete this会去调用本对象的析构函数，而析构函数中又调用delete this，形成无限递归，造成堆栈溢出，系统崩溃。"></a>显然，delete this会去调用本对象的析构函数，而析构函数中又调用delete this，形成无限递归，造成堆栈溢出，系统崩溃。</h2><h2 id="12、空类的大小？"><a href="#12、空类的大小？" class="headerlink" title="12、空类的大小？"></a>12、空类的大小？</h2><ol><li><p>C++空类大小不为0，不同编译器设置不一样，vs设置为1；</p></li><li><p>C++标准指出，不允许一个对象（当然包括类对象）的大小为0，不同的对象不能具有相同的地址。</p></li><li><p>带有虚函数的C++类大小不为1，因为每一个对象会有一个vptr指向虚函数表，具体大小根据指针大小确定。</p></li><li><p>C++中要求对于类的每个实例都必须有独一无二的地址，那么编译器自动为空类分配一个字节大小，这样便保证了每个实例均有独一无二的内存地址。</p></li></ol><hr><h2 id="13、以下几种情况下，几个类的大小？"><a href="#13、以下几种情况下，几个类的大小？" class="headerlink" title="13、以下几种情况下，几个类的大小？"></a>13、以下几种情况下，几个类的大小？</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(A) &lt;&lt; endl;  <span class="comment">// 输出1</span></span><br><span class="line">    A a;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(a) &lt;&lt; endl;  <span class="comment">// 输出1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>空类大小为1，在C++中空类会占一个字节，这是为了让对象的实例能相互区别。<br>具体来说，空类同样可以被实例化，并且每个实例在内存中都有独一无二的地址，因此，编译器会给空类隐含加上一个字节，这样空类实例化后就会拥有独一无二的内存地址。<br>当该空白类作为基类时，该类的大小就优化为0了，子类的大小就是子类本身的大小。这就是所谓空白基类最优化。</p><p>空类的实例大小就是类的大小，所以sizeof(a) &#x3D; 1字节，如果a是指针，则sizeof(a)就是指针的大小，即4字节。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="title">Fun</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(A) &lt;&lt; endl;  <span class="comment">// 输出 4(32位机器)/ 8(64位机器)</span></span><br><span class="line">    A a;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(a) &lt;&lt; endl;  <span class="comment">// 输出 4(32位机器)/ 8(64位机器)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>因为有虚函数的类对象中都有一个虚函数表指针__vptr，其大小是4字节</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(A) &lt;&lt; endl;  <span class="comment">// 输出1</span></span><br><span class="line">    A a;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(a) &lt;&lt; endl;  <span class="comment">// 输出1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>静态成员存放在静态存储区，不占用类的大小，普通函数也不占用类的大小。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(A) &lt;&lt; endl;  <span class="comment">// 输出4</span></span><br><span class="line">    A a;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(a) &lt;&lt; endl;  <span class="comment">// 输出4</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(A) &lt;&lt; endl;  <span class="comment">// 输出4</span></span><br><span class="line">    A a;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(a) &lt;&lt; endl;  <span class="comment">// 输出4</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>静态成员a不占用类的大小，所以类的大小就是b变量的大小，即4字节</p></blockquote><hr><h2 id="14、this指针调用成员变量时，堆栈会发生什么变化？"><a href="#14、this指针调用成员变量时，堆栈会发生什么变化？" class="headerlink" title="14、this指针调用成员变量时，堆栈会发生什么变化？"></a>14、this指针调用成员变量时，堆栈会发生什么变化？</h2><p>当在类的非静态成员函数访问类的非静态成员时，编译器会自动将对象的地址作为隐含参数传递给地址，这个隐含参数就是this指针</p><p>即使并没有写this指针，编译器在连接时也会加上this，对各个成员的访问都是通过this的。</p><p>例如建立了类的多个对象时，在调用类的成员函数时，你并不知道具体是哪个对象在调用，此时可以通过查看this指针来查看具体是哪个对象在调用。<br>this指针首先入栈，然后成员函数的参数从右向左进行入栈，最后函数返回地址入栈。</p><hr><h2 id="15、类对象的大小受哪些因素影响？"><a href="#15、类对象的大小受哪些因素影响？" class="headerlink" title="15、类对象的大小受哪些因素影响？"></a>15、类对象的大小受哪些因素影响？</h2><ol><li><p>类的非静态成员变量大小，静态成员不占据类的空间，成员函数也不占据类的空间大小。</p></li><li><p>内存对齐另外分配的空间大小，类内的数据也是需要进行内存对齐操作的。</p></li><li><p>虚函数的话，会在类对象插入vptr指针，加上指针大小</p></li><li><p>当该类是某类的派生类，那么派生类继承的基类数据成员部分也会存在在派生类的空间中，也会对派生类进行扩展。</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>STL</title>
      <link href="/2022/03/24/STL/"/>
      <url>/2022/03/24/STL/</url>
      
        <content type="html"><![CDATA[<h1 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h1><h2 id="1、什么是STL？"><a href="#1、什么是STL？" class="headerlink" title="1、什么是STL？"></a>1、什么是STL？</h2><p>  C++ STL广义上分为三类：算法、容器、迭代器。</p><ul><li>算法包括：排序，复制等常用算法，以及不同容器特定的算法。</li><li>容器即：数据的存放形式，包括序列式容器和关联式容器，<br>序列式容器就是list、vector等<br>关联式容器就是set、map等</li><li>迭代器即：在不暴露容器内部的情况下对容器的遍历</li></ul><hr><h2 id="2、解释一下trivial-destructor"><a href="#2、解释一下trivial-destructor" class="headerlink" title="2、解释一下trivial destructor"></a>2、解释一下trivial destructor</h2><p>“trivial destructor”一般是指用户没有自定义析构函数，而由系统生成的<br>这种析构函数在《STL源码解析》中称为“无关痛痒”的析构函数。</p><p>反之，用户自定义了析构函数，则称之为”non-trivial destructor”，这种析构函数<b>如果申请了新的空间一定要显式地释放，否则会造成内存泄漏</b></p><p>对于trivial destrutcor，如果每次都进行调用，显然对效率是一种伤害，如何判断？</p><p>《STL源码解析》中给出的说明：</p><blockquote><p>首先利用value_type()获取所指对象的类型，再利用__type_traits判断该类型的析构函数是否是trivial，<br>若是(__true_type)，则什么也不做，若为(__false_type)，则去调用destroy()函数</p></blockquote><p>也就是说，在实际的应用中，STL库提供了相关的判断方法__type_traits。<br>除了trivial destructor，还有trivial construct、trivial copy construct等<br>如果能够对是否trivial进行区分，可以采用内存处理函数memcpy()、malloc()等更加高效地完成相关操作，提升效率。</p><hr><h2 id="3、使用智能指针管理内存资源，RAII是怎么回事？"><a href="#3、使用智能指针管理内存资源，RAII是怎么回事？" class="headerlink" title="3、使用智能指针管理内存资源，RAII是怎么回事？"></a>3、使用智能指针管理内存资源，RAII是怎么回事？</h2><ol><li><p>RAII 的全称是”Resource Acquisition is Initialization”，即“资源获取即初始化”<br>也就是说在构造函数中申请分配资源，在析构函数中释放资源。</p><p>因为C++的语言机制保证了，当一个对象创建的时候，自动调用构造函数，当对象超出作用域的时候会自动调用析构函数。<br>所以，在RAII的指导下，我们应该使用类来管理资源，将资源和对象的生命周期绑定。</p></li><li><p>智能指针（std::shared_ptr和std::unique_ptr）即RAII最具代表的实现<br>使用智能指针，可以实现自动的内存管理，再也不需要担心忘记delete造成的内存泄漏</p><p>毫不夸张地说，有了智能指针，代码中几乎不需要再出现delete了。</p></li></ol><hr><h2 id="4、迭代器：-it、it-哪个好？为什么？"><a href="#4、迭代器：-it、it-哪个好？为什么？" class="headerlink" title="4、迭代器：++it、it++哪个好？为什么？"></a>4、迭代器：++it、it++哪个好？为什么？</h2><ol><li><p>前置返回一个引用，后置返回一个对象</p><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>迭代器</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ++i 实现代码为：</span></span><br><span class="line"><span class="type">int</span>&amp; <span class="keyword">operator</span>++()&#123;</span><br><span class="line">    *<span class="keyword">this</span> += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// i++ 实现代码为：</span></span><br><span class="line"><span class="type">int</span> <span class="keyword">operator</span>++(<span class="type">int</span>)&#123;</span><br><span class="line">    <span class="type">int</span> temp = *<span class="keyword">this</span>;</span><br><span class="line">    ++*<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div></li><li><p>前置不会产生临时对象，后置必须产生临时对象，临时对象会导致效率降低。<br>【前置返回的是当前对象的引用，后置返回的是对象】</p></li></ol><hr><h2 id="5、C-的左值引用和右值引用"><a href="#5、C-的左值引用和右值引用" class="headerlink" title="5、C++的左值引用和右值引用"></a>5、C++的左值引用和右值引用</h2><p>C++11正式通过引入右值引用来优化性能</p><p>具体来说是通过移动语义来避免无谓拷贝的问题，通过move语义来将临时生成的左值中的资源无代价地转移到另外一个对象中去。<br>通过完美转发来解决不能按照参数实际类型来转发的问题（同时，完美转发获得的一个好处是可以实现移动语义）。</p><ol><li><p>在C++11中所有的值必属于左值、右值两者之一，右值又可以细分为纯右值、将亡值。<br>在C++11中可以取地址的，有名字的就是左值<br>反之，不可以取地址的，没有名字的就是右值（纯右值或将亡值）。</p><p>int a &#x3D; b + c;<br>其中：a就是左值，有变量名为a，通过&amp;a可以获取该变量的地址；<br>表达式b+c、函数int func()的返回值是右值，在其被赋值给某一变量前，我们不能通过变量名找到它，&amp;(b+c)这样的操作也不会通过编译。</p></li><li><p>C++11对C++98中的右值进行了扩充。<br>在C++11中右值又分为纯右值（prvalue, Pure Rvalue）和将亡值（xvalue, eXpiring Value）。<br>其中纯右值的概念等同于我们在C++98标准中右值的概念，指的是<code>临时变量和不跟对象关联的字面量值</code>。<br>将亡值则是C++11新增的跟右值引用相关的表达式，这样表达式通常是将要被移动的对象（移为他用）<br> 比如返回右值引用T&amp;&amp; 的函数返回值、std::move的返回值，或者转换为T&amp;&amp; 的类型转换函数的返回值。<br>将亡值可以理解为通过“盗取”其他变量内存空间的方式获取到的值。<br>在确保其他变量不在被使用、或即将被销毁时，通过“盗取”的方式可以避免内存空间的释放和分配，能够延长变量值的生命周期。</p></li><li><p>左值引用就是对一个左值进行引用的类型。右值引用就是对一个右值进行引用的类型。<br>事实上，由于右值通常不具有名字，我们也只能通过引用的方式找到它的存在。<br>右值引用和左值引用都是属于<code>引用类型</code>。无论是声明一个左值引用还是右值引用，都必须立即进行初始化。</p><p>而其原因可以理解为是引用类型本身自己并不拥有对所绑定变量的内存，只是该对象的别名.</p><p>左值引用是具名变量值的别名，右值引用则是不具名（匿名）变量的别名。</p><p>左值引用通常也不能绑定到右值，但常量左值引用是个“万能”的引用类型。<br> 常量左值引用可以接受非常量左值、常量左值、右值对其进行初始化。</p><p>不过常量左值所引用的右值在“余生”中只能是只读的。<br>相对的，非常量左值接受非常量左值对齐进行初始化。</p></li><li><p>右值引用通常不能绑定到任何的左值，要想绑定一个左值到右值引用，通常需要使用std::move()将左值强制转换为右值。</p></li></ol><ul><li><p>左值和右值<br>  左值：表示的是可以获取地址的表达式，它能出现在赋值语句的左边，对该表达式进行赋值。<br>    但是修饰符const的出现使得可以声明如下的标识符，它可以取得地址，但是没办法对其进行赋值。</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span>&amp; a = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>  右值：表示无法获取地址的对象，有常量值、函数返回值、lambda表达式等。<br>    无法获取地址，但不表示其不可改变，当定义了右值的右值引用时，就可以改变右值。</p></li><li><p>左值引用和右值引用<br>  左值引用：传统的C++中引用被称为左值引用</p><p>  右值引用：C++11中增加了右值引用，右值引用关联到右值时，右值被存储到特定位置。<br>       右值引用指向该特定位置，也就是说，右值虽然无法获取地址，但是右值引用可以获取地址，该地址表示临时对象的存储位置。</p></li><li><p>右值引用特点：</p><ul><li><p>特点1：通过右值引用的声明，右值又“重获新生”，其生命周期与右值引用类型变量的生命周期一样长，只要该变量还活着，该右值临时量就会一直存活。</p></li><li><p>特点2：右值引用独立于左值和右值。意思是右值引用类型的变量可能是左值也可能是右值。</p></li><li><p>特点3：T&amp;&amp; t在发生自动类型判断的时候，它是左值还是右值取决于它的初始化。</p></li></ul></li></ul><p>举个例子：</p><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>右值引用例子</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(T&amp;&amp; t)</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; t &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getInt</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> &amp;b = a; <span class="comment">// b是左值引用</span></span><br><span class="line">    <span class="type">int</span> &amp;c = <span class="number">10</span>;<span class="comment">// 错误，c是左值不能使用右值初始化</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>&amp;&amp; d = <span class="number">10</span>;   <span class="comment">// 正确，右值引用用右值初始化</span></span><br><span class="line">    <span class="type">int</span>&amp;&amp; e = a;    <span class="comment">// 错误，e是右值引用不能使用左值初始化</span></span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span>&amp; f = a;   <span class="comment">// 正确，左值常引用相当于是万能型，可以用左值或右值初始化</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span>&amp; g = <span class="number">10</span>;  <span class="comment">// 正确，左值常饮用相当于是万能型，可以用左值或右值初始化</span></span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span>&amp;&amp; h = <span class="number">10</span>; <span class="comment">// 正确，右值常饮用</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>&amp; i = <span class="built_in">getInt</span>();  <span class="comment">// 错误，i是左值引用不能使用临时变量（右值）初始化</span></span><br><span class="line">    <span class="type">int</span>&amp;&amp; j = <span class="built_in">getInt</span>(); <span class="comment">// 正确，函数返回值是右值</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">fun</span>(<span class="number">10</span>);    <span class="comment">// 此时fun函数的参数t是右值</span></span><br><span class="line">    <span class="built_in">fun</span>(a);     <span class="comment">// 此时fun函数的参数t是左值【有名字】</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><hr><h2 id="6、STL中hashtable的实现？"><a href="#6、STL中hashtable的实现？" class="headerlink" title="6、STL中hashtable的实现？"></a>6、STL中hashtable的实现？</h2><p>STL中的hashtable使用的是<code>拉链法</code>解决hash冲突问题，如下图所示。</p><img src="/2022/03/24/STL/hashtable.png" class=""><p>hashtable中的bucket所维护的list既不适list也不是slist，而是其自己定义的由hashtable_node数据结构组成的linked-list,<br>而bucket聚合体本身使用vector进行存储。hashtable的迭代器值提供前进操作，不提供后退操作。</p><p>在hashtable设计bucket的数量上，其内置了28个质数[53, 97, 193, …, 429496729]<br>在创建hashtable时，会根据存入的元素个数选择大于等于元素个数的质数作为hashtable的容量（vector的长度）</p><p>其中每个bucket所维护的linked-list长度也等于hashtable的容量。<br>如果插入hashtable的元素个数超过了bucket的容量，就要进行重建table操作，即找出下一个质数，创建新的buckets vector，重新计算元素在hashtable位置。</p><hr><h2 id="7、简述traits技法"><a href="#7、简述traits技法" class="headerlink" title="7、简述traits技法"></a>7、简述traits技法</h2><p>traits技法利用“内嵌类型”的编程技巧和<b>编译器的template参数推导功能</b><br>增强C++未能提供的关于类型认证方面的能力。</p><p>常用的有iterator_traits和type_traits</p><ul><li><p>iterator_traits<br>被称为<b>特性萃取机</b>，能够方便的让外界获取一下5中类型：</p><ul><li><p>value_type：迭代器所指对象的类型</p></li><li><p>difference_type：两个迭代器之间的距离</p></li><li><p>pointer：迭代器所指向的类型</p></li><li><p>reference：迭代器所引用的类型</p></li><li><p>iterator_category：此处不解释</p></li></ul></li><li><p>type_traits<br>关注的是类型的<b>特性</b><br>例如这个类型是否具备<br>non-trivial defalt ctor（默认构造函数）、non-trivial copy ctor（拷贝构造函数）、non-trivial assignment operator（赋值运算符）和non-trivial dtop（析构函数）<br>如果答案是否定的，可以采取直接操作内存的方式提高效率，一般来说，type_traits支持一下5种类型的判断：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__type_traits&lt;T&gt;::has_trivial_default_constructor</span><br><span class="line">__type_traits&lt;T&gt;::has_trivial_copy_constructor</span><br><span class="line">__type_traits&lt;T&gt;::has_trivial_assignment_operator</span><br><span class="line">__type_traits&lt;T&gt;::has_trivial_destructor</span><br><span class="line">__type_traits&lt;T&gt;::is_POD_type</span><br></pre></td></tr></table></figure></li></ul><p>由于编译器只很对class object形式的参数进行参数推导，因此上式返回的结果不应该是一个bool值，而是一个空的结构体：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">__true_type</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">__false_type</span>&#123;&#125;;</span><br></pre></td></tr></table></figure><p>这两个结构体没有任何成员，不会带来其他的负担，又能满足要求，可谓一举两得。</p><p>当然，如果我们自行定义了一个Shape类型，也可以针对这个Shape设计type_traits的特化版本</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="keyword">struct</span> <span class="title class_">__type_traits</span>&lt;Shape&gt;&#123;</span><br><span class="line">    <span class="keyword">typedef</span> __true_type has_trivial_default_constructor;</span><br><span class="line">    <span class="keyword">typedef</span> __false_type has_trivial_copy_constructor;</span><br><span class="line">    <span class="keyword">typedef</span> __false_type has_trivial_assignment_operator;</span><br><span class="line">    <span class="keyword">typedef</span> __false_type has_trivial_destructor;</span><br><span class="line">    <span class="keyword">typedef</span> __false_type is_POD_type;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="8、STL的两级空间配置器"><a href="#8、STL的两级空间配置器" class="headerlink" title="8、STL的两级空间配置器"></a>8、STL的两级空间配置器</h2><ol><li>首先明白为什么需要二级空间配置器？<br>我们知道动态开辟内存时候，要在堆上申请，但如果我们需要频繁的<b>在堆开辟释放内存</b>，就会在堆上造成很多外部碎片，浪费了内存空间；</li></ol><p>每次都要进行malloc、free函数等操作，使空间就会增加一些附加信息，降低了空间利用率。</p><p>随着外部碎片增多，内存分配器在找不到合适内存情况下就需要合并空间块，浪费了时间，大大降低了效率。</p><p>于是就设置了二级空间配置器，<b>当开辟内存&lt;&#x3D; 128Bytes时，即视为开辟小块内存，则调用二级空间配置器</b>。</p><p>关于STL中一级空间配置器和二级空间配置器的选择上，一般默认选择为<b>二级空间配置器</b>。<br>如果大于128字节再转去一级配置器。</p><ul><li>一级配置器<br>一级空间配置器中重要的函数就是allocate、deallocate、reallocate。<br>一级空间配置器是以malloc(), free(), realloc()等C函数执行实际的内存配置。<br>大致过程是：<ol><li><p>直接allocate分配内存，其实就是malloc来分配内存，成功则直接返回，失败就调用处理函数。</p></li><li><p>如果用户自定义了内存分配分配的处理函数就调用，没有就返回异常。</p></li><li><p>如果自定义了处理函数就进行处理，完事再继续分配试试。</p></li></ol></li></ul><img src="/2022/03/24/STL/FirstLevel.png" class=""><ul><li>二级配置器</li></ul><ol><li><p>维护16条链表，分别是0-15号链表，最小8字节，以8字节主键递增，最大128字节。<br>传入一个字节参数，表示需要多大的内存，会自动校对到第几号链表（如需要13Bytes空间，则分配16Bytes大小）<br>在找到第n个链表后查看链表是否为空，如果非空则直接从对应的free_list拔出，将已经拨出的指针向后移动一位。</p></li><li><p>对应free_list为空，先看其内存池是不是为空，如果内存池不为空</p></li><li><p>先检验它剩余空间是否够20个节点大小（及所需内存大小（提升后）*20），若足够则直接从内存池中拿出20个节点大小空间<br>将其中一个分配给用户使用，另外19个当做自由链表中的区块挂在相应的free_list下，下次再有相同大小内存需求时，可以直接拔出</p></li><li><p>如果剩余空间不够20个节点大小，则看它是否能满足1个节点大小，如果够则直接拿出一个分配给用户<br>然后从剩余空间中分配尽可能多的节点挂在相应的free_list中。</p></li><li><p>如果连一个节点内存都不能满足的话，则将内存池中剩余的空间挂在相应的free_list中（找到相应的free_list）<br>然后再给内存池申请内存，转到3</p></li><li><p>内存池为空，申请内存，此时二级空间配置器会使用malloc()从heap上申请内存<br>（一次所申请的内存大小为 2 * 所需节点内存大小（提升后）* 20 + 一段额外空间），申请40块，一半拿来用，一半放内存池中。</p></li><li><p>malloc没有成功，在第三种情况下，如果malloc()失败了，说明heap上没有足够空间分配给我们了<br>此时，二级空间配置器会从比所需节点空间大的free_list中一一搜索，从比它所需节点空间大的free_list中拔出一个节点使用。<br>如果这也没有找到，说明free_list中都没有自由区块，那就要调用一级适配器。</p></li></ol><p>释放时调用deallocate()函数，若释放的n&gt;128，则调用一级空间适配器，否则就直接将内存块挂上自由链表的合适位置。</p><p>STL二级空间配置器虽然解决了外部碎片与提高了效率，但同时增加了一些缺点：</p><ol><li><p>因为自由链表的管理问题，它会把我们需求的内存块自动提升为8的倍数，此时若需要1个字节，会给8个字节，即浪费7个字节。<br>所以有引入了内部碎片的问题，若相似情况出现很多次，就会造成很多内部碎片。</p></li><li><p>二级空间配置器是在堆上申请大块的狭义内存池，然后用自由链表管理，供现在使用<br>在程序执行过程中，它将申请的内存一块一块挂载到自由链表上，即不会还给操作系统。<br>并且它的实现中所有成员全是静态的，所以它申请的所有内存只有在进程结束才会释放内存，还给操作系统。<br>因此带来的问题有：</p><ol><li>不断开辟小块内存，最后整个堆上的空间都被挂到自由链表上，若想开辟大块空间就会失败</li><li>若自由链表上挂着很多内存块没有被使用，当前进程占着内存不释放，这时别的进程在堆上申请不到空间，也不可以使用当前进程的空闲内存，引发问题。</li></ol></li></ol><ul><li><p>一级分配器<br>GC4.9 之后就没有第一级了，只有第二级</p></li><li><p>二级分配器<br>—— default_alloc_template 剖析<br>有个自动调整的函数：传入一个字节参数，表示需要多大的内存，会自动帮你校对到第几号链表（0-15号，最小8B，最大128B）</p><p>allocate函数：如果要分配的内存大于128B，就转用第一级分配器，否则也就是小于128B。<br>首先判断在第几号链表，定位到了，先判断链表是否为空，若空需要充值（调节到8的倍数，默认一次申请20个区块，只用其中一个）<br>去内存值去拿或重新分配。</p></li></ul><hr><h2 id="9、vector与list的区别和应用？如何找某vector或者list的倒数第二个元素"><a href="#9、vector与list的区别和应用？如何找某vector或者list的倒数第二个元素" class="headerlink" title="9、vector与list的区别和应用？如何找某vector或者list的倒数第二个元素"></a>9、vector与list的区别和应用？如何找某vector或者list的倒数第二个元素</h2><ol><li>vector数据结构：<br>  vector 和数组类似，拥有一段连续的内存空间，并且起始地址不变。<br>  因此能高效的进行随机存取，时间复杂度为O(1)<br>  但因为内存空间连续，所以在进行插入和删除操作时，会造成内存块的拷贝，时间复杂度为O(n)</li></ol><p>  另外，当数组内存空间不够时，会重新申请一块内存空间并进行内存拷贝。<br>  连续存储结构：vector是可以实现动态增长的对象数组，支持对数组高效率的访问和在数组尾端的删除和插入操作，在中间和头部删除和插入相对不易。</p><p>  与数组最大的区别就是vector不需要程序员自己考虑容量问题，库里面本身已经实现了容量的动态增长，数组需要程序员手动写入扩容函数进行扩容。</p><ol start="2"><li>list数据结构：<br>  list是由双向链表实现的，因此内存空间是不连续的。<br>  只能通过指针访问数据，所以list的随机存取非常没有效率，时间复杂度为O(n)<br>  但由于链表的特点，能高效地进行插入和删除。</li></ol><p>  非连续存储结构：list是一个双链表结构，支持对链表的双向遍历。<br>  每个节点包括三个信息：元素本身，指向前一个元素的节点（prev）和指向下一个元素的节点（next）。<br>  因此list可以高效率地对数据元素任意位置进行访问和插入删除等操作。</p><p>  由于涉及对额外指针的维护，所以开销比较大。</p><p>区别：</p><ul><li><p>vector的随机访问效率高，但在插入和删除时（不包括尾部）需要挪动数据，不易操作。</p></li><li><p>list的访问需要遍历整个链表，它的随机访问效率低，但对数据的插入和删除操作都很方便，改变指针指向即可。</p></li><li><p>从遍历上来说，list是单向的，vector是双向的</p></li><li><p>vector中的迭代器在使用之后就失效了，但list的迭代器使用之后还可以继续使用。</p></li></ul><p>int mySize &#x3D; vec.size();<br>vec.at(mySize - 2);</p><p>list不提供随机访问，所以不能用下标直接访问到某个位置的元素，要访问list里的元素只能遍历<br>不过需要访问list的最后几个元素时，可以用反向迭代器来操作。</p><hr><h2 id="10、STL中vector删除其中元素，迭代器如何变化？为什么是两倍扩容？释放空间？"><a href="#10、STL中vector删除其中元素，迭代器如何变化？为什么是两倍扩容？释放空间？" class="headerlink" title="10、STL中vector删除其中元素，迭代器如何变化？为什么是两倍扩容？释放空间？"></a>10、STL中vector删除其中元素，迭代器如何变化？为什么是两倍扩容？释放空间？</h2><p>size()函数返回的是已用空间大小，capacity()返回的是总空间大小<br>因此：capacity() - size()则是剩余可用空间大小。<br>当size() &#x3D;&#x3D; capacity()，说明vector目前的空间已经被用完，如果再添加新元素，会引起vector空间动态增长。</p><p>由于动态增长会引起重新分配内存空间、拷贝原空间、释放原空间，这些过程会降低效率。<br>因此，可以使用reserve(n)预先分配一块较大的指定大小的内存空间，这样当指定大小的内存空间未使用完时，是不会重新分配内存空间的。</p><p>这样便提升了效率，当且仅当n &gt; capacity()时，调用reserve(n)才会改变vector容量。</p><p>resize()成员函数改变元素的数目，至于空间的变化要看具体情况去分析，例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">resize</span><span class="params">(size_type __new_size, <span class="type">const</span> _Tp&amp; __x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(__new_size &lt; <span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="built_in">erase</span>(<span class="built_in">begin</span>() + __new_size, <span class="built_in">end</span>());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">insert</span>(<span class="built_in">end</span>(), __new_size - <span class="built_in">size</span>(), __x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>空的vector对象，size()和capacity()都为0</p></li><li><p>当空间大小不足时，新分配的空间大小为原空间大小的2倍。</p></li><li><p>使用reserve()预先分配一块内存后，在空间未满情况下，不会引起重新分配，从而提升了效率</p></li><li><p>当reserve()分配的空间比原空间小的时候，是不会引起重新分配的。</p></li><li><p>resize()函数值改变容器的元素数目，不改变元素容器大小。</p></li><li><p>用reserve(size_type)只是扩大capacity值，这些内存空间可能还是“野”的，如果此时使用”[]”来访问，则可能越界<br>而resize(size_type new_size)会真正使容器具有new_size个对象。</p></li></ol><p>不同编译器，vector有不同扩容大小，vs下1.5倍，GCC下2倍。</p><p>空间和时间的权衡。简单来说，空间分配的多，平摊时间复杂度低，但浪费空间也多。</p><p>使用k &#x3D; 2增长因子的问题在于，每次扩展的新尺寸必须刚好大于之前分配的总和，即：之前分配的内存空间不可能被使用。<br>这样对内存不友好，因此最好将增长因子k设置为1-2之间。</p><h2 id="对比可以发现采用成倍方式扩容，可以保证常数时间复杂度，而增加指定大小的容量只能达到O-n-的时间复杂度，因此采用成倍方式扩容。"><a href="#对比可以发现采用成倍方式扩容，可以保证常数时间复杂度，而增加指定大小的容量只能达到O-n-的时间复杂度，因此采用成倍方式扩容。" class="headerlink" title="对比可以发现采用成倍方式扩容，可以保证常数时间复杂度，而增加指定大小的容量只能达到O(n)的时间复杂度，因此采用成倍方式扩容。"></a>对比可以发现采用成倍方式扩容，可以保证常数时间复杂度，而增加指定大小的容量只能达到O(n)的时间复杂度，因此采用成倍方式扩容。</h2><h2 id="11、Vector如何释放空间？"><a href="#11、Vector如何释放空间？" class="headerlink" title="11、Vector如何释放空间？"></a>11、Vector如何释放空间？</h2><p>由于vector的内存占用空间只增不减，比如首先分配了10000B，然后erase掉后面9999B，只留下1B，但内存占用仍然为10000B。</p><p>所有内存空间实在vector析构时候才能被系统回收。empty()用来检测容器是否为空，clear()可以清空所有元素。<br>但是即使是clear()，vector所占用的内存空间仍然如故，无法保证内存的回收。</p><p>如果需要空间动态缩小，可以考虑使用deque。如果vector，可以用swap()来释放内存。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>(Vec).<span class="built_in">swap</span>(Vec);</span><br><span class="line"><span class="built_in">vector</span>().<span class="built_in">swap</span>(Vec);</span><br></pre></td></tr></table></figure><hr><h2 id="12、容器内部删除一个元素"><a href="#12、容器内部删除一个元素" class="headerlink" title="12、容器内部删除一个元素"></a>12、容器内部删除一个元素</h2><ol><li>顺序容器（序列式容器，比如vector、deque）<br>erase迭代器不仅使所指向被删除的迭代器失效，而且使被删元素之后的所有迭代器失效（list除外）<br>所以不能使用erase(it++)的方式，但是erase的返回值是下一个有效迭代器。</li></ol><p>it &#x3D; c.earse(it);</p><ol start="2"><li>关联容器（关联式容器，比如map&#x2F;set&#x2F;multimap&#x2F;multiset等）<br>erase迭代器只是被删除元素的迭代器失效，但是返回值是void，所以要采用erase(it++)的方式删除迭代器；<br>c.earse(it++);</li></ol><hr><h2 id="13、STL迭代器如何实现"><a href="#13、STL迭代器如何实现" class="headerlink" title="13、STL迭代器如何实现"></a>13、STL迭代器如何实现</h2><ol><li><p>迭代器是一种抽象的设计理念，通过迭代器可以在不了解容器内部原理的情况下遍历容器<br>除此之外，STL中迭代器一个最重要的作用就是作为容器与STL算法的粘合剂。</p></li><li><p>迭代器的作用就是提供一个遍历容器内部所有元素的接口，因此迭代器内部必须保存一个与容器相关联的指针，然后重载各种运算操作来遍历。<br>其中最重要的是”*”运算符和”-&gt;”运算符，以及”++”、”–”等可能需要重载的运算符重载。<br>这和C++中的智能指针很像，智能指针也是将一个指针封装，然后通过引用计数或是其他方法完成自动释放内存的功能。</p></li><li><p>最常用的迭代器相应类型有物种：value type、difference type、pointer、reference、iterator catagory；</p></li></ol><hr><h2 id="14、map、set是怎么实现的，红黑树是怎么能够同时实现这两种容器？为什么使用红黑树？"><a href="#14、map、set是怎么实现的，红黑树是怎么能够同时实现这两种容器？为什么使用红黑树？" class="headerlink" title="14、map、set是怎么实现的，红黑树是怎么能够同时实现这两种容器？为什么使用红黑树？"></a>14、map、set是怎么实现的，红黑树是怎么能够同时实现这两种容器？为什么使用红黑树？</h2><ol><li><p>他们的底层都是以红黑树的结构实现，因此插入删除等操作都在O(logn)时间内完成，因此可以完成高效插入删除；</p></li><li><p>在这里定义一个模板参数，如果它是key则它是set，如果它是map，则它是map；<br>底层是红黑树，实现map的红黑树结点数据类型是key+value，实现set的节点数据类型是value；</p></li><li><p>因为map和set要求自动排序，红黑树能实现这一功能，而且时间复杂度比较低。</p></li></ol><hr><h2 id="15、如何在共享内存上使用STL标准库？"><a href="#15、如何在共享内存上使用STL标准库？" class="headerlink" title="15、如何在共享内存上使用STL标准库？"></a>15、如何在共享内存上使用STL标准库？</h2><ol><li><p>想象一下把STL容器，例如map, vector, list等等，放入共享内存中<br>IPC（进程间通讯）一旦有了这些强大的通用数据结构做辅助，无疑进程间通信的能力一下子强大了许多。</p><p>没必要再为共享内存设计其他额外的数据结构，另外，STL的高度可扩展性将为IPC所驱使。<br>STL容器被良好的封装，默认情况下他们有自己的内存管理方案。</p><p>当一个元素被插入到一个STL列表（list）中时，列表容器自动为其分配内存，保存数据。<br>考虑到要将STL容器放到共享内存中，而容器缺自己在堆上进行分配。</p><p>一个最笨拙的方法就是在堆上构造STL容器，然后把容器复制到共享内存，并且确保所有容器的内部分配的内存指向共享内存中的相应区域，这基本不可能完成。</p></li><li><p>假设进程A在共享内存中放入了数个容器，进程B如何找到这些容器？<br>一个方法就是进程A把容器放在共享内存的确定地址上（fixed offsets）则进程B可以从该已知地址上获取容器。<br>另外一个改进办法就是，进程A现在共享没存某块确定地址上防止一个map容器，然后进程A再创建其他容器，然后取名字和地址放到map容器内。</p><p>进程B知道如何获取该保存了地址映射的map容器，然后同样再根据名字取得其他容器地址。</p></li></ol><hr><h2 id="16、map插入方式有几种？"><a href="#16、map插入方式有几种？" class="headerlink" title="16、map插入方式有几种？"></a>16、map插入方式有几种？</h2><ol><li><p>insert函数插入pair数据</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mapStudent.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, string&gt;(<span class="number">1</span>, <span class="string">&quot;student_one&quot;</span>));</span><br></pre></td></tr></table></figure></li><li><p>用insert函数插入value_type数据</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mapStudent.<span class="built_in">insert</span>(map&lt;<span class="type">int</span>, string&gt;::<span class="built_in">value_type</span> (<span class="number">1</span>, <span class="string">&quot;student_one&quot;</span>));</span><br></pre></td></tr></table></figure></li><li><p>在insert函数中使用make_pair()函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mapStudent.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">1</span>, <span class="string">&quot;student_one&quot;</span>));</span><br></pre></td></tr></table></figure></li><li><p>用数组方式插入数据</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mapStudent[<span class="number">1</span>] = <span class="string">&quot;student_one&quot;</span>;</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="17、STL中unordered-map-hash-map-和map的区别，hash-map如何解决冲突以及扩容"><a href="#17、STL中unordered-map-hash-map-和map的区别，hash-map如何解决冲突以及扩容" class="headerlink" title="17、STL中unordered_map(hash_map)和map的区别，hash_map如何解决冲突以及扩容"></a>17、STL中unordered_map(hash_map)和map的区别，hash_map如何解决冲突以及扩容</h2><ol><li><p>unordered_map和map类似，都是存储的key-value的值，可以通过key快速索引到value。<br>不同的是unordered_map不会根据key的大小进行排序</p></li><li><p>存储时是根据key的hash值判断元素是否相同，即unordered_map内部元素是无序的<br>而map中的元素是按照BST进行存储，进行中序遍历就可以得到有序遍历。</p></li><li><p>所以使用时候map的key需要定义operator&lt;。<br>而unordered_map需要定义hash_value函数并且重载operator&#x3D;&#x3D;。<br>但是很多系统内置的数据类型都自带这些。</p></li><li><p>如果是自定义类型，那么就需要自己重载operator&lt;或者hash_value()了。</p></li><li><p>如果需要内部元素自动排序，使用map，不需要排序则使用unordered_map</p></li><li><p>unordered_map的底层实现是hash_table</p></li><li><p>hash_map底层使用的是hash_table，<br>而hash_table使用的拉链法进行冲突避免，所有hash_map使用拉链法进行冲突解决。</p></li><li><p><b>什么时候扩容</b>：当向容器添加元素的时候，会判断当前容器的元素个数，如果大于等于某个阈值——即当前数组长度乘以加载因子值时，就要自动扩容。</p></li><li><p><b>扩容（resize）</b>就是重新计算容量，向HashMap对象里不停地添加元素，而HashMap对象内部的数组无法装载更多的元素时<br>对象就需要扩大数组的长度，以便能装入更多的元素。</p></li></ol><hr><h2 id="18、vector越界访问下标，map越界访问下标？vector删除元素时候会不会释放空间？"><a href="#18、vector越界访问下标，map越界访问下标？vector删除元素时候会不会释放空间？" class="headerlink" title="18、vector越界访问下标，map越界访问下标？vector删除元素时候会不会释放空间？"></a>18、vector越界访问下标，map越界访问下标？vector删除元素时候会不会释放空间？</h2><ol><li><p>通过下标访问vector中的元素时会做边界检查，但该处的实现方式要看具体IDE，不同IDE实现方式不一样，确保不可越界访问地址。</p></li><li><p>map的下标运算符[]的作用是：将key作为下标去执行查找，并返回相应的值；<br>若不存在这个key，就将一个具有该key和value的key-value插入map</p></li><li><p>erase()函数，只能删除内存，不能改变容量大小；<br>erase成员函数，它删除了itVect迭代器指向的元素，并且要返回被删除的itVect之后的迭代器，迭代器相当于一个智能指针；</p></li><li><p>clear()函数，只能清空内容，不能改变容量大小，如果想要在删除内容的同时释放内存，可以选择deque容器。【deque相当于一个分块数组】</p></li></ol><hr><h2 id="19、map中-和find的区别？"><a href="#19、map中-和find的区别？" class="headerlink" title="19、map中[]和find的区别？"></a>19、map中[]和find的区别？</h2><ol><li><p>map的下标运算符[]的作用是：<br>将关键码作为下标去执行查找，并返回对应的值；<br>如果不存在这个关键码，就将一个具有该关键码和值类型的默认值的项插入该map【找不到就插入】</p></li><li><p>map的find函数：<br>用关键码执行查找，找到了返回该位置的迭代器；<br>如果不存在这个关键码，则返回尾迭代器【end()】</p></li></ol><hr><h2 id="20、STL中list与queue之间的区别"><a href="#20、STL中list与queue之间的区别" class="headerlink" title="20、STL中list与queue之间的区别"></a>20、STL中list与queue之间的区别</h2><ol><li><p>list不再能够像vector一样以普通指针作为迭代器，因为其结点不保证在存储空间中连续存在；【本质使用双向链表实现】</p></li><li><p>list插入操作和删除操作都不会造成原有的list迭代器失效</p></li><li><p>list不仅是一个双向链表，而且是一个环状双向链表，所以只需要一个指针</p></li><li><p>list不像vector那样有可能在空间不足时做重新配置、数据移动的操作，所以插入前的所有迭代器在插入操作之后都仍然有效；</p></li><li><p>deque是一种双向开口的连续线性工作，所谓双向开口，意思是可以在头尾两端分别做元素的插入和删除操作；<br>可以在头尾两端分别做元素的插入和删除操作；</p></li><li><p>deque和vector最大的差异<br>一在于deque允许常数时间内对起头部进行元素的插入和移除操作<br>二在于deque没有所谓容量概念，因为它是动态地分段连续空间组合而成【分块数组】<br>  随时可以增加一段新的空间并链接起来，deque没有所谓的空间保留功能。</p></li></ol><hr><h2 id="21、STL中的allocator、deallocator"><a href="#21、STL中的allocator、deallocator" class="headerlink" title="21、STL中的allocator、deallocator"></a>21、STL中的allocator、deallocator</h2><ol><li><p>第一级配置器直接使用malloc()、free()和relloc()<br>第二级配置器视情况采用不同的策略：当配置区块超过128B时，视之为足够大，便调用第一级配置器；<br> 当配置器区块小于128B时，为了降低额外负担，使用复杂的内存池整理方式，而不再使用以及配置器</p></li><li><p>第二级配置器主动将任何小额区块的内存需求量上调至8的倍数，并维护16个free-list，各自管理大小为8~128B的小额区块。</p></li><li><p>空间配置函数allocate()，首先判断区块大小，大于128B就直接调用第一级配置器，小于128时就检查对应的free-list。<br>如果free-list之内有可用区块，就直接拿来用，如果没有可用区块，就将区块大小调整至8的倍数，然后调用refill()，为free-list重新分配空间；</p></li><li><p>空间释放函数deallocate()，该函数首先判断区块大小，大于128B时，直接调用一级配置器，小于128B时就找到对应的free-list然后释放内存。</p></li></ol><hr><h2 id="22、STL中hash-map扩容发生什么？"><a href="#22、STL中hash-map扩容发生什么？" class="headerlink" title="22、STL中hash_map扩容发生什么？"></a>22、STL中hash_map扩容发生什么？</h2><ol><li><p>hash_table表格内的元素称为桶（bucket），而由桶所链接的元素称为结点（node）<br>其中存入桶元素的容器为STL本身很重要的一种序列式容器——vector容器。<br>之所以选择vector为存放桶元素的基础容器，主要是因为vector容器本身具有动态扩容能力，无需人工干预。</p></li><li><p>向前操作：首先尝试从目前所指的节点出发，前进一个位置（节点），由于节点被安置于list内，所以利用节点的next指针即可轻易完成前进操作。<br>如果目前正巧是list的尾端，就跳到下一个bucket身上，即下一个list的头部结点。</p></li></ol><hr><h2 id="23、常见容器性质总结？"><a href="#23、常见容器性质总结？" class="headerlink" title="23、常见容器性质总结？"></a>23、常见容器性质总结？</h2><ol><li><p>vector 底层数据结构为数组，支持快速随机访问。</p></li><li><p>list 底层数据结构为双向链表，支持快速增删</p></li><li><p>deque底层数据结构为一个中央控制器和多个缓冲区，详见《STL源码剖析》P146，支持首位（中间不行）快速增删，也支持随机访问。<br>deque是一个双端队列（double-ended queue），也是在堆中保存内容的，其保存形式如下：<br>  [堆1 ]-&gt;[堆2 ]-&gt;[堆3 ]-&gt;…<br>每个堆保存好几个元素，然后堆和堆之间有指针指向，看起来像是list和vector的结合体</p></li><li><p>stack底层一般用list或deque实现，封闭头部即可，不用vector的原因应该是容量大小有限制，扩容耗时</p></li><li><p>queue底层一般用list或deque实现，封闭头部即可，不用vector的原因应该是容量大小有限制，扩容耗时<br>（stack和queue其实是适配器，不叫容器，因为是对容器的再封装）</p></li><li><p>priority_queue的底层数据结构一般是：vector为底层容器，堆heap为处理规则来管理底层容器实现</p></li><li><p>set 底层数据结构为红黑树，有序，不重复。</p></li><li><p>multiset底层数据结构为红黑树，有序，不重复。</p></li><li><p>map 底层数据结构为红黑树，有序，不重复。</p></li><li><p>multimap底层数据结构为红黑树，有序，可重复。</p></li><li><p>unordered_set底层数据结构为hash表，无序，不重复</p></li><li><p>unordered_multiset底层数据结构为hash表，无序，不重复</p></li><li><p>unordered_map底层数据结构为hash表，无序，不重复</p></li><li><p>unordered_multimap底层数据结构为hahs表，无序，不重复</p></li></ol><hr><h2 id="24、vector的增加删除都是怎么做的？为什么是1-5或者2倍？"><a href="#24、vector的增加删除都是怎么做的？为什么是1-5或者2倍？" class="headerlink" title="24、vector的增加删除都是怎么做的？为什么是1.5或者2倍？"></a>24、vector的增加删除都是怎么做的？为什么是1.5或者2倍？</h2><ol><li><p>新增元素：vector通过一个连续的数组，如果集合已满，在新增数据的时候，就要分配一块更大的内存，将原来数据复制过来，释放之前元素，插入新增元素。</p></li><li><p>对vector的任何操作，一旦引起空间重新配置，指向原vector的所有迭代器都失效了</p></li><li><p>初始时刻vector的capacity为0，塞入一个元素之后capacity增加为1；</p></li><li><p>不同编译器实现的扩容方式不一样，VS2015中以1.5倍扩容，GCC以2倍扩容</p></li></ol><p>对比可以发现采用成倍方式扩容，可以保证常数时间复杂度，而增加指定大小的容量只能达到O(n)的时间复杂度，因此使用成倍方式扩容。</p><ol><li>考虑可能产生的堆空间浪费，成倍增长倍数不能太大，使用较为广泛的扩容方式有两种，以2倍方式、以1.5倍方式。</li><li>以2倍方式扩容，导致下次申请的内存必然大于之前分配内存额总和，导致之前分配的内存不能再被使用，所以最好倍增因子设置为(1, 2)之间</li><li>向量容器vector的成员函数pop_back()可以删除最后一个元素</li><li>而函数erase()可以删除由一个iterator指出的元素，也可以删除一个指定范围的元素。</li><li>还可以采用通用算法remove()来删除vector容器中的元素</li><li>不同的是：采用remove一般情况下不会改变容器的大小，pop_back()和erase()等成员函数会改变容器的大小。</li></ol><hr><h2 id="25、STL每种容器对应的迭代器"><a href="#25、STL每种容器对应的迭代器" class="headerlink" title="25、STL每种容器对应的迭代器"></a>25、STL每种容器对应的迭代器</h2><table><thead><tr><th align="left">容器</th><th align="left">迭代器</th></tr></thead><tbody><tr><td align="left">vector、deque</td><td align="left">随机访问迭代器</td></tr><tr><td align="left">stack、queue、priority_queue</td><td align="left">无</td></tr><tr><td align="left">list、(multi)set&#x2F;map</td><td align="left">双向迭代器</td></tr><tr><td align="left">unordered_(multi)set&#x2F;map、forward_list</td><td align="left">前向迭代器</td></tr></tbody></table><hr><h2 id="26、STL中迭代器失效的情况有哪些？"><a href="#26、STL中迭代器失效的情况有哪些？" class="headerlink" title="26、STL中迭代器失效的情况有哪些？"></a>26、STL中迭代器失效的情况有哪些？</h2><p>以vector为例：</p><ul><li><p>插入元素：</p><ol><li><p>尾后插入：<br>size &lt; capacity 时，首迭代器不失效、尾迭代器失效（未重新分配空间）<br>size &#x3D;&#x3D; capacity 时，所有迭代器均失效。<code>需要重新分配空间</code></p></li><li><p>中间插入：<br>size &lt; capacity 时，首迭代器不失效、但插入元素后面的所有迭代器失效<br>size &#x3D;&#x3D; capacity 时，所有迭代器均失效。</p></li></ol></li><li><p>删除元素：</p><ul><li><p>尾后删除：只有尾迭代器失效。</p></li><li><p>中间删除：删除位置之后所有迭代器失效。</p></li></ul></li></ul><ol><li><p>deque和vector情况类似【随机访问迭代器】</p></li><li><p>list 双向链表，每一个节点内存不连续，删除节点仅当前迭代器失效，erase返回下一个有效迭代器</p></li><li><p>map&#x2F;set等关联容器底层是红黑树，删除节点不会影响其他结点的迭代器，使用递增方法获取下一个迭代器：mmp.erase(it++)</p></li><li><p>unordered(hash) 迭代器意义不大，rehash之后，迭代器也是全部失效</p></li></ol><hr><h2 id="27、STL中vector的实现"><a href="#27、STL中vector的实现" class="headerlink" title="27、STL中vector的实现"></a>27、STL中vector的实现</h2><p>vector是一种序列式容器，其数据安排以及操作方式与array非常类似，两者的唯一区别在于对空间运用的灵活性【动态空间】</p><p>众所周知，array占用的是静态空间，一旦配置了就不可改变大小，如果遇到空间不足的情况还要自行创建更大空间，并手动拷贝数据，再将原空间释放。</p><p>vector则使用灵活的动态空间配置，维护一块<b>连续的线性空间</b>，在空间不足时，可以自动扩展空间容纳新元素，做到按需供给。</p><p>其在扩充空间的过程仍然需要经历：<b>重新配置空间，移动数据，释放原空间</b>等操作。</p><p>动态扩容规则：以原大小的两倍配置另外一块较大的空间（或者旧长度 + 新增元素个数），源码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> size_type len = old_size + <span class="built_in">max</span>(old_size, n);</span><br></pre></td></tr></table></figure><p>vector扩容倍数与平台有关，在Win + VS下是1.5倍，Linux + GCC下是2倍。</p><p>测试代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="comment">// 在Linux + GCC下</span></span><br><span class="line">   <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(<span class="number">2</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">   cout &lt;&lt; res.<span class="built_in">capacity</span>() &lt;&lt; endl;  <span class="comment">// 2</span></span><br><span class="line">   res.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">   cout &lt;&lt; res.<span class="built_in">capacity</span>() &lt;&lt; endl;  <span class="comment">// 4</span></span><br><span class="line">   res.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">   res.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">   cout &lt;&lt; res.<span class="built_in">capacity</span>() &lt;&lt; endl;  <span class="comment">// 8</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 在 WIN 10 + VS 2019下</span></span><br><span class="line">   <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(<span class="number">2</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">   cout &lt;&lt; res.<span class="built_in">capacity</span>() &lt;&lt; endl;  <span class="comment">// 2</span></span><br><span class="line">   res.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">   cout &lt;&lt; res.<span class="built_in">capacity</span>() &lt;&lt; endl;  <span class="comment">// 3</span></span><br><span class="line">   res.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">   res.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">   cout &lt;&lt; res.<span class="built_in">capacity</span>() &lt;&lt; endl;  <span class="comment">// 6</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上述代码，一开始配置了一块长度为2的空间，接下来插入一个数据，长度变为原来的两倍，为4，此时占用长度为3，再插入两个数据，此时长度为8。<br>可以清晰看到空间变化过程。</p><p>需要注意：频繁地对vector调用push_back()对性能有影响<br>因为每插入一个元素，如果空间够用还能直接插入，若不够则要重新配置空间，移动数据，释放原空间等操作，对程序性能有一定影响</p><hr><h2 id="28、STL中slist的实现"><a href="#28、STL中slist的实现" class="headerlink" title="28、STL中slist的实现"></a>28、STL中slist的实现</h2><p>list是双向链表，而slist(single linked list)是单向链表，它们的主要区别在于：<br>list的迭代器是双向的Bidirectional iterator<br>slist的迭代器属于单向的Forward iterator。<br>虽然slist的很多功能不如list灵活，但是其消耗的空间更小，操作更快。</p><p>根据STL的习惯，插入操作会将新元素插入到指定位置之前，而非之后，然而slist是不能回头的，只能往后走，<br>因此在slist的其他位置插入或移除元素十分不明智，但在slist开头却可取<br>slist特别提供了insert_after()和erase_after()供灵活应用。</p><p>考虑到效率问题，slist只提供push_front()操作，元素插入到slist之后，存储的次序和输入的次序相反。</p><p>slist单向迭代器如下所示</p><img src="/2022/03/24/STL/slist.png" class=""><p>slist默认采用alloc空间配置器配置节点的空间，其数据结构主要代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>, <span class="keyword">class</span> <span class="title class_">Alloc</span> = alloc&gt;</span><br><span class="line"><span class="keyword">class</span> slist&#123;</span><br><span class="line">   ...</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">   ...</span><br><span class="line">   <span class="type">static</span> list_node* <span class="built_in">create_mode</span>(<span class="type">const</span> value_type&amp; x)&#123;&#125;  <span class="comment">// 配置空间、构造元素</span></span><br><span class="line">   <span class="type">static</span> <span class="type">void</span> <span class="built_in">destroy_node</span>(list_node* node)&#123;&#125;     <span class="comment">// 析构函数、释放空间</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">   list_node_base head; <span class="comment">// 头部</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function">iterator <span class="title">begin</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">   <span class="function">iterator <span class="title">end</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">   <span class="function">size_type <span class="title">size</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(slist&amp; L)</span></span>&#123;&#125;   <span class="comment">// 交换两个slist，只需要换head即可</span></span><br><span class="line">   <span class="function">reference <span class="title">front</span><span class="params">()</span></span>&#123;&#125;  <span class="comment">// 取头部元素</span></span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">push_front</span><span class="params">(<span class="type">const</span> value&amp; x)</span></span>&#123;&#125;   <span class="comment">// 头部插入元素</span></span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">pop_front</span><span class="params">()</span></span>&#123;&#125;   <span class="comment">// 从头部取走元素</span></span><br><span class="line">   ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>举个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   forward_list&lt;<span class="type">int</span>&gt; fl;</span><br><span class="line">   fl.<span class="built_in">push_front</span>(<span class="number">1</span>);</span><br><span class="line">   fl.<span class="built_in">push_front</span>(<span class="number">3</span>);</span><br><span class="line">   fl.<span class="built_in">push_front</span>(<span class="number">2</span>);</span><br><span class="line">   fl.<span class="built_in">push_front</span>(<span class="number">6</span>);</span><br><span class="line">   fl.<span class="built_in">push_front</span>(<span class="number">5</span>); <span class="comment">// 5-6-2-3-1</span></span><br><span class="line"></span><br><span class="line">   forward_list&lt;<span class="type">int</span>&gt;::iterator ite1 = fl.<span class="built_in">begin</span>();</span><br><span class="line">   forward_list&lt;<span class="type">int</span>&gt;::iterator ite2 = fl.<span class="built_in">end</span>():</span><br><span class="line">   <span class="keyword">for</span>(;ite1 != ite2; ++ite1)&#123;</span><br><span class="line">      cout &lt;&lt; *ite1 &lt;&lt; <span class="string">&quot; &quot;</span>;   <span class="comment">// 5 6 2 3 1</span></span><br><span class="line">   &#125;</span><br><span class="line">   cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">   ite1 = <span class="built_in">find</span>(fl.<span class="built_in">begin</span>(), fl.<span class="built_in">end</span>(), <span class="number">2</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span>(ite1 != ite2)  fl.<span class="built_in">insert_after</span>(ite1, <span class="number">99</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">auto</span> it : fl)&#123;</span><br><span class="line">      cout &lt;&lt; it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">   ite1 = <span class="built_in">find</span>(fl.<span class="built_in">begin</span>(), fl.<span class="built_in">end</span>(), <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(ite1 != ite2)  fl.<span class="built_in">erase_after</span>(ite1);</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">auto</span> it : fl)&#123;</span><br><span class="line">      cout &lt;&lt; it &lt;&lt; <span class="string">&quot; &quot;</span>;   <span class="comment">// 5 6 99 3 1</span></span><br><span class="line">   &#125;</span><br><span class="line">   cout &lt;&lt; endl;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>由于slist是单向链表，因此向后插入比向前插入更加方便，所以有insert_after, erase_after使用<br>当然也有push_front()可供快速插入。</p></blockquote><h2 id="需要注意的是C-标准委员会没有采用slist的名称，forward-list在C-11中出现，与slist的区别在于没有size-方法。"><a href="#需要注意的是C-标准委员会没有采用slist的名称，forward-list在C-11中出现，与slist的区别在于没有size-方法。" class="headerlink" title="需要注意的是C++标准委员会没有采用slist的名称，forward_list在C++11中出现，与slist的区别在于没有size()方法。"></a>需要注意的是C++标准委员会没有采用slist的名称，forward_list在C++11中出现，与slist的区别在于没有size()方法。</h2><h2 id="29、STL中list的实现"><a href="#29、STL中list的实现" class="headerlink" title="29、STL中list的实现"></a>29、STL中list的实现</h2><p>相比于vector的连续线性空间，list显得复杂许多<br>但是好处在于插入或删除都只作用于一个元素空间，因此list对空间的运用十分精准，对任何位置元素的插入和删除都是常数时间。</p><p>list不能保证节点在存储空间中连续存储，也拥有迭代器，迭代器的”++”、”–”操作对于的是指针的操作，list提供的迭代器是双向迭代器：<br>Bidirectional iterators。</p><p>list节点的结构见如下源码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">__list_node</span>&#123;</span><br><span class="line">   <span class="keyword">typedef</span> <span class="type">void</span>* void_pointer;</span><br><span class="line">   void_pointer prev;</span><br><span class="line">   void_pointer next;</span><br><span class="line">   T data;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>从源码中可看出list显然是一个双向链表。<br>list和vector的另一个区别是，在插入和接合操作之后，都不会造成原迭代器失效，而vector可能因为空间重新配置导致迭代器失效。</p><p>此外list也是一个环形链表，因此只需要<code>一个指针</code>便能完整表现整个链表。<br>list中node节点指针始终指向尾端的一个空白结点，因此是一种”前闭后开”的区间结构。</p><p>list的空间管理默认采用alloc作为空间配置器，为了方便地以结点大小为配置单位，还定义一个list_node_allocator函数可一次性配置多个结点空间。</p><p>由于list的双向特性，其支持在头部（front）和尾部（back）两个方向进行push和pop操作<br>当然还支持erase, splice, sort, merge, reverse, sort等操作。</p><hr><h2 id="30、STL中deque的实现"><a href="#30、STL中deque的实现" class="headerlink" title="30、STL中deque的实现"></a>30、STL中deque的实现</h2><p>vector是单向开口（尾部）的连续线性空间，deque则是一种双向开口的连续线性空间<br>虽然vector也可以在头尾进行元素操作，但是头部操作的效率十分低下（主要涉及整体移动）</p><img src="/2022/03/24/STL/deque.png" class=""><p>deque和vector的最大差异：<br>一是deque运行在常数时间内对头部进行元素操作<br>二是deque没有容量的概念，它是动态地以分段连续空间组合而成，可以随时增加一段新的空间并链接起来</p><p>deque虽然也提供随机访问的迭代器，但其迭代器不是普通的指针，其复杂程度比vector高很多，因此除非必要，否则一般使用vector而非deque。<br>如果需要对deque排序，可以先将deque中的元素复制到vector中，利用sort对vector排序，再将结果复制回deque</p><p>deque由一段一段的定量连续空间组成，一旦需要增加新的空间，只要配置一段定量连续空间拼接在头部或尾部即可，<br>因此deque的最大任务是如何维护这个整体的连续性。</p><p>deque的数据结构如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">deque</span>&#123;</span><br><span class="line">   ...</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">   <span class="keyword">typedef</span> pointer* map_pointer; <span class="comment">// 指向map指针的指针</span></span><br><span class="line">   map_pointer map;  <span class="comment">// 指向map</span></span><br><span class="line">   size_type map_size;  <span class="comment">// map的大小</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   ...</span><br><span class="line">   <span class="function">iterator <span class="title">begin</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function">iterator <span class="title">end</span><span class="params">()</span></span>;</span><br><span class="line">   ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/2022/03/24/STL/dequeStructure.png" class=""><p>deque内部有一个指针指向map，map是一小块连续空间<br>其中每个元素称为一个节点，node，每个node都是一个指针，指向另一段较大连续空间，称为缓冲区<br>缓冲区就是deque实际存放数据的区域，默认大小为512B。整体结构如上。</p><p>deque的迭代器数据结构如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">__deque_iterator</span>&#123;</span><br><span class="line">   ...</span><br><span class="line">   T* cur;  <span class="comment">// 迭代器所指缓冲区当前的元素</span></span><br><span class="line">   T* first;   <span class="comment">// 迭代器所指缓冲区第一个元素</span></span><br><span class="line">   T* last；   <span class="comment">// 迭代器所指缓冲区最后一个元素</span></span><br><span class="line">   map_pointer node; <span class="comment">// 指向map中的node</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从deque的迭代器数据结构可以看出，为了保持与容器联结，迭代器主要包含上述4个元素</p><img src="/2022/03/24/STL/dequeIterator.png" class=""><p>deque迭代器的”++”、”–”操作远比vector迭代器繁琐，其主要工作在于缓冲区边界，如何从当前缓冲区跳到另一个缓冲区，<br>当然deque内部在插入元素时，如果map中node数量全部使用完，且node指向的缓冲区也没有多余的空间，此时会配置新的map（两倍于当前+2的数量）来容纳更多node，也即更多缓冲区。<br>在deque删除元素时，也提供了元素的析构和空闲缓冲区空间的释放等机制。</p><hr><h2 id="31、STL中stack和queue的实现。"><a href="#31、STL中stack和queue的实现。" class="headerlink" title="31、STL中stack和queue的实现。"></a>31、STL中stack和queue的实现。</h2><ul><li>stack<br>stack（栈）是一种先进后出（First In Last Out）的数据结构，只有一个入口和出口，那就是栈顶<br>除了获取栈顶元素外，没有其他方法可以获取到内部的其他元素，其结构图如下：</li></ul><img src="/2022/03/24/STL/stack.png" class=""><p>stack这种单向开口的数据结构很容易由<b>双向开口的deque和list</b>形成，只需要根据stack的性质对应移除某些接口即可实现，stack源码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>, <span class="keyword">class</span> <span class="title class_">Sequence</span> = deque&lt;T&gt; &gt;</span><br><span class="line"><span class="keyword">class</span> stack&#123;</span><br><span class="line">   ...</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">   Sequence c;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> c.<span class="built_in">empty</span>();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function">size_type <span class="title">size</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> c.<span class="built_in">size</span>();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function">reference <span class="title">top</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> c.<span class="built_in">back</span>();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function">const_reference <span class="title">top</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> c.<span class="built_in">back</span>();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">const</span> value_type&amp; x)</span></span>&#123;</span><br><span class="line">      c.<span class="built_in">push_back</span>(x);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">      c.<span class="built_in">pop_back</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>从stack的数据结构可以看出，其所有操作都是围绕Sequence完成，而Sequenc默认是deque数据结构。<br>stack这种“修改某种接口，形成另一种风貌”的行为，称为adapter（适配器）。<br>经常将其归类为container adapter而非container</p><p>stack除了默认使用deque作为其底层容器之外，也可以使用双向开口的list，只需要在初始化stack时，将list作为第二个参数即可。【相当于修改默认参数】<br>由于stack只能操作顶端的元素，因此其内部元素无法被访问，也不提供迭代器。</p><ul><li>queue<br>queue（队列）是一种先进先出（First In First Out）的数据结构，只有一个入口和一个出口<br>分别位于最底段和最顶端，出口元素外，没有其他方法可以获取到内部的其他元素，其结构图如下：<img src="/2022/03/24/STL/queue.png" class=""></li></ul><p>类似的，queue这种“先进先出”的数据结构很容易由双向开口的deque和list形成，只需要根据queue的性质对应移除某些接口即可实现，<br>queue的源码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>, <span class="keyword">class</span> <span class="title class_">Sequence</span> = deque&lt;T&gt; &gt;</span><br><span class="line"><span class="keyword">class</span> queue&#123;</span><br><span class="line">   ...</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">   Sequence c;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> c.<span class="built_in">empty</span>();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function">size_type <span class="title">size</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> c.<span class="built_in">size</span>();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function">reference <span class="title">front</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> c.<span class="built_in">front</span>();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function">const_reference <span class="title">front</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> c.<span class="built_in">front</span>();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">const</span> value_type&amp; x)</span></span>&#123;</span><br><span class="line">      c.<span class="built_in">push_back</span>(x);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">      c.<span class="built_in">pop_front</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>从queue的数据结构可以看出，其所有操作都也都是围绕Sequence完成，Sequence默认也是deque数据结构。<br>queue也是一类container adapter。</p><h2 id="同样，queue也可以使用list作为底层容器，不具有遍历功能，因此没有迭代器。"><a href="#同样，queue也可以使用list作为底层容器，不具有遍历功能，因此没有迭代器。" class="headerlink" title="同样，queue也可以使用list作为底层容器，不具有遍历功能，因此没有迭代器。"></a>同样，queue也可以使用list作为底层容器，不具有遍历功能，因此没有迭代器。</h2><h2 id="32、STL中heap的实现"><a href="#32、STL中heap的实现" class="headerlink" title="32、STL中heap的实现"></a>32、STL中heap的实现</h2><p>heap（堆）并不是STL的容器组件，是priority_queue（优先队列）的底层实现机制<br>因为binary max head（大根堆）总是最大值位于堆的根部，优先级最高。</p><p>binary heap本质是一种complete binary tree（完全二叉树），整棵binary tree除了最底层的叶结点之外，都是填满的<br>但是叶结点从左到右不会出现空隙，如下图即一个完全二叉树：</p><img src="/2022/03/24/STL/completeBinaryTree.png" class=""><p>完全二叉树内没有任何节点漏洞，是非常紧凑的，这样的一个好处是可以使用array来存储所有的节点，<br>因为当其中某个结点位于index处，其左节点必定位于index*2处，右节点位于 index *2+1处，父节点位于 i&#x2F;2（向下取整）处。</p><p>这种以数组表示tree的方式称为隐式表述法。</p><p>因此我们可以使用一个array和一组heap算法来实现<br>max heap（每个结点的值大于等于其子结点的值）和<br>min heap（每个结点的值小于等于其子节点的值）</p><p>由于array不能动态改变空间大小，用vector代替array是不错的选择。</p><p>heap算法有哪些？常见插入、弹出、排序、构造算法，下述：</p><ul><li>push_heap算法<br>由于CBT的性质，新插入的元素一定是位于树的最底层作为叶子结点，并填补由左至右第一个空格。<br>事实上，在刚执行插入操作时，新元素位于底层vector的end()处，之后是一个称为percolate up（上溯）的过程，举例如下：<img src="/2022/03/24/STL/heapAdjust.png" class=""></li></ul><p>新元素50在插入对中后，先放在vector的end()存着，然后执行上溯过程，调整其根节点的位置，以便满足max_heap的性质<br>这个过程跟大根堆调整过程一样。</p><ul><li>pop_heap算法<br>heap的pop操作实际弹出的是根节点，但在heap内部执行pop_head时，只是将其移动到vector的最后位置<br>然后再为这个被挤掉的元素找到一个合适的安放位置，使整棵树满足CBT的条件。</li></ul><p>这个被挤掉的元素首先会和根节点的两个子节点比较，并与较大的子节点更换位置，如此一直往下，<br>直到其大于左右两个子节点或者下放到叶结点为止。这个过程称为percolate down（下溯）。举例如下：</p><img src="/2022/03/24/STL/heapPopAdjust.png" class=""><p>根节点68被pop之后，移到了vector的最底部，将原本在该位置的24挤出。<br>24被迫从根节点开始与其子节点进行比较，直到找到合适的位置安身，需要注意的是pop之后元素并没有被移走，如果要将其移走，可以使用pop_back()。</p><ul><li><p>sort算法<br>因为pop_heap可以将当前heap中的最大值置于底层容器vector的末尾，heap的范围减1，<br>不断执行pop_heap直到树为空，即可以得到一个递增序列。</p></li><li><p>make_heap算法<br>将一段数据转化为heap，一个一个数据插入，调用上面说的两种percolate算法即可。<br>代码实测：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   vector&lt;<span class="type">int</span>&gt; v = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">   <span class="built_in">make_heap</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());   <span class="comment">// 以vector为底层容器</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">auto</span> i : v)&#123;</span><br><span class="line">      cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>; <span class="comment">// 6 4 5 3 1 0 2</span></span><br><span class="line">   &#125;</span><br><span class="line">   cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">   v.<span class="built_in">push_back</span>(<span class="number">7</span>);</span><br><span class="line">   <span class="built_in">push_heap</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">auto</span> i : v)&#123;</span><br><span class="line">      cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>; <span class="comment">// 7 6 5 4 1 0 2 3</span></span><br><span class="line">   &#125;</span><br><span class="line">   cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">pop_heap</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">   cout &lt;&lt; v.<span class="built_in">back</span>() &lt;&lt; endl;</span><br><span class="line">   v.<span class="built_in">pop_back</span>();</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">auto</span> i : v)&#123;</span><br><span class="line">      cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>; <span class="comment">// 6 4 5 3 1 0 2</span></span><br><span class="line">   &#125;</span><br><span class="line">   cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">sort_heap</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">auto</span> i : v)&#123;</span><br><span class="line">      cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>; <span class="comment">// 0 1 2 3 4 5 6</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="33、STL中的priority-queue的实现"><a href="#33、STL中的priority-queue的实现" class="headerlink" title="33、STL中的priority_queue的实现"></a>33、STL中的priority_queue的实现</h2><p>priority_queue，优先队列，是一个拥有权值观念的queue，它跟queue一样是顶部入口，底部出口，<br>在插入元素时，元素并非按照插入次序排列，它会自动根据权值（通常是元素的实值）排列，权值最高，排在最前面，如下图所示：</p><img src="/2022/03/24/STL/priorityQueue.png" class=""><p>默认情况下，priority_queue使用一个max_heap实现，底层容器使用的一般是vector<br>堆heap为处理规则来管理底层容器实现【vector用heap算法】。<br>priority_queue这种实现机制导致其不被归为容器，而是一种容器适配器，关键源码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>, <span class="keyword">class</span> <span class="title class_">Sequence</span> = vector&lt;T&gt;, <span class="keyword">class</span> Compare = less&lt;<span class="keyword">typename</span> Sequene::value_type&gt; &gt;</span><br><span class="line"><span class="keyword">class</span> priority_queue&#123;</span><br><span class="line">   ...</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">   Sequence c; <span class="comment">// 底层容器</span></span><br><span class="line">   Compare comp;  <span class="comment">// 元素大小比较标准</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> c.<span class="built_in">empty</span>();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function">size_type <span class="title">size</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> c.<span class="built_in">size</span>();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function">const_reference <span class="title">top</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> c.<span class="built_in">front</span>();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">const</span> value_type&amp; x)</span></span>&#123;</span><br><span class="line">      c.<span class="built_in">push_heap</span>(x);</span><br><span class="line">      <span class="built_in">push_heap</span>(c.<span class="built_in">begin</span>(), c.<span class="built_in">end</span>(), comp);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="built_in">pop_heap</span>(c.<span class="built_in">begin</span>(), c.<span class="built_in">end</span>(), comp);</span><br><span class="line">      c.<span class="built_in">pop_back</span>();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>priority_queue的所有元素，进出都有一定的规则，只有queue顶端的元素（权值最高者），才有机会被外界取用，没有遍历功能，也不提供迭代器</p><p>举例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="type">int</span> ia[<span class="number">9</span>] = &#123;<span class="number">0</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">7</span>&#125;;</span><br><span class="line">   <span class="function">priority_queue&lt;<span class="type">int</span>&gt; <span class="title">pq</span><span class="params">(ia, ia + <span class="number">9</span>)</span></span>;</span><br><span class="line">   cout &lt;&lt; pq.<span class="built_in">size</span>() &lt;&lt; endl; <span class="comment">// 9</span></span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;pq.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">      cout &lt;&lt; pq.<span class="built_in">top</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;   <span class="comment">// 8 8 8 8 8 8 8 8 8</span></span><br><span class="line">   &#125;</span><br><span class="line">   cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">while</span>(!pq.<span class="built_in">empty</span>())&#123;</span><br><span class="line">      cout &lt;&lt; pq.<span class="built_in">top</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;   <span class="comment">// 8 7 6 5 4 3 2 1 0</span></span><br><span class="line">      pq.<span class="built_in">pop</span>();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="34、STL中set的实现？"><a href="#34、STL中set的实现？" class="headerlink" title="34、STL中set的实现？"></a>34、STL中set的实现？</h2><p>STL中的容器可分为序列式容器（sequence）和关联式容器（associative），set属于关联式容器。</p><p>set的特性是，所有元素都会根据元素的值自动排序（默认升序）<br>set元素的键值就是实值，实值就是键值，set不允许有两个相同的键值</p><p>set不允许迭代器修改元素的值，其迭代器是一种 constance iterators</p><p>标准的STL set一RB-tree（红黑树）作为底层机制，几乎所有的set操作行为都是调用RB-tree的操作行为，因此补充红黑树特性：</p><ul><li><p>每个结点不是红色就是黑色</p></li><li><p>根节点、叶子结点为黑色</p></li><li><p>如果结点为红色，则其子节点必为黑色</p></li><li><p>任一结点到（NULL）结点即树的尾端的任何路径，所包含的黑结点数量必然相同<br>具体翻阅《算法导论》</p></li></ul><p>举例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="type">int</span> i;</span><br><span class="line">   <span class="type">int</span> ia[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="function">set&lt;<span class="type">int</span>&gt; <span class="title">s</span><span class="params">(ia, ia + <span class="number">5</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">   cout &lt;&lt; s.<span class="built_in">size</span>() &lt;&lt; endl;  <span class="comment">// 5</span></span><br><span class="line">   cout &lt;&lt; s.<span class="built_in">count</span>(<span class="number">3</span>) &lt;&lt; endl;   <span class="comment">// 1</span></span><br><span class="line">   cout &lt;&lt; s.<span class="built_in">count</span>(<span class="number">10</span>) &lt;&lt; endl;  <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">   s.<span class="built_in">insert</span>(<span class="number">3</span>);   <span class="comment">// 再插入一个3</span></span><br><span class="line">   cout &lt;&lt; s.<span class="built_in">size</span>() &lt;&lt; endl;  <span class="comment">// 5</span></span><br><span class="line">   cout &lt;&lt; s.<span class="built_in">count</span>(<span class="number">3</span>) &lt;&lt; endl;   <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">   s.<span class="built_in">erase</span>(<span class="number">1</span>);</span><br><span class="line">   cout &lt;&lt; s.<span class="built_in">size</span>() &lt;&lt; endl;  <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line">   set&lt;<span class="type">int</span>&gt;::iterator b = s.<span class="built_in">begin</span>();</span><br><span class="line">   set&lt;<span class="type">int</span>&gt;::iterator e = s.<span class="built_in">end</span>();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span>(; b!=e; ++b)  cout &lt;&lt; *b &lt;&lt; <span class="string">&quot; &quot;</span>;   <span class="comment">// 2 3 4 5</span></span><br><span class="line">   cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">   b = <span class="built_in">find</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>(), <span class="number">5</span>);</span><br><span class="line">   <span class="keyword">if</span>(b != s.<span class="built_in">end</span>())  cout &lt;&lt; <span class="string">&quot;5 found&quot;</span> &lt;&lt; endl; <span class="comment">// 5 found</span></span><br><span class="line"></span><br><span class="line">   b = s.<span class="built_in">find</span>(<span class="number">2</span>);</span><br><span class="line">   <span class="keyword">if</span>(b != s.<span class="built_in">end</span>())  cout &lt;&lt; <span class="string">&quot;2 found&quot;</span> &lt;&lt; endl; <span class="comment">// 2 found</span></span><br><span class="line"></span><br><span class="line">   b = s.<span class="built_in">find</span>(<span class="number">1</span>);</span><br><span class="line">   <span class="keyword">if</span>(b == s.<span class="built_in">end</span>())  cout &lt;&lt; <span class="string">&quot;1 not found&quot;</span> &lt;&lt; endl;   <span class="comment">// 1 not found</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关联式容器尽量使用自身提供的find函数查找指定的元素，效率更高【红黑树符合BST特征】<br>因为STL提供的find()函数是一种顺序搜索算法。</p><hr><h2 id="35、STL中map的实现"><a href="#35、STL中map的实现" class="headerlink" title="35、STL中map的实现"></a>35、STL中map的实现</h2><p>map的特性是所有元素会根据键值进行自动排序。<br>map中所有元素都是pair，拥有键值（key）和实值（value）两个部分，并且不允许元素有相同的key</p><p>一旦map的key确定了，则无法更改，但是可以修改该key对应的value<br>因此 map迭代器既不是 constant iterator，也不是mutable iterator</p><p>标准STL map的底层机制是RB-tree（红黑树），另一种以 hash_table 为底层机制实现的称为 hash_map。<br>map的架构如下图所示：</p><img src="/2022/03/24/STL/mapRBtree.png" class=""><p>map在构造时缺省采用递增排序key，也使用alloc配置器配置空间大小<br>需要注意的是在插入元素时，调用的是红黑树中的insert_unique()方法，而非insert_equal()（multiple使用）</p><p>距离如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   map&lt;string, <span class="type">int</span>&gt; maps;</span><br><span class="line">   <span class="comment">// 插入若干元素</span></span><br><span class="line">   maps[<span class="string">&quot;jack&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">   maps[<span class="string">&quot;jane&quot;</span>] = <span class="number">2</span>;</span><br><span class="line">   maps[<span class="string">&quot;july&quot;</span>] = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 以pair形式插入</span></span><br><span class="line">   <span class="function">pair&lt;string, <span class="type">int</span>&gt; <span class="title">p</span><span class="params">(<span class="string">&quot;david&quot;</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">   map.<span class="built_in">insert</span>(p);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 迭代输出元素</span></span><br><span class="line">   map&lt;string, <span class="type">int</span>&gt;::iterator iter = maps.<span class="built_in">begin</span>();</span><br><span class="line">   <span class="keyword">for</span>(; iter != maps.<span class="built_in">end</span>(); ++iter)&#123;</span><br><span class="line">      cout &lt;&lt; iter-&gt;first &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">      cout &lt;&lt; iter-&gt;second &lt;&lt; <span class="string">&quot;--&quot;</span>; <span class="comment">// david 4--jack 1--jane 2--july 3--</span></span><br><span class="line">   &#125;</span><br><span class="line">   cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 使用subscript操作取实值</span></span><br><span class="line">   <span class="type">int</span> num = maps[<span class="string">&quot;july&quot;</span>];</span><br><span class="line">   cout &lt;&lt; num &lt;&lt; endl; <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 查找某key</span></span><br><span class="line">   iter = maps.<span class="built_in">find</span>(<span class="string">&quot;jane&quot;</span>);</span><br><span class="line">   <span class="keyword">if</span>(iter != maps.<span class="built_in">end</span>())  cout &lt;&lt; iter-&gt;second &lt;&lt; endl; <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 修改实值</span></span><br><span class="line">   iter-&gt;second = <span class="number">100</span>;</span><br><span class="line">   <span class="type">int</span> num2 = maps[<span class="string">&quot;jane&quot;</span>];</span><br><span class="line">   cout &lt;&lt; num2 &lt;&lt; endl;   <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是subscript（下标操作）既可以作为<code>左值运用（修改内容）</code>也可以作为<code>右值运用（获取实值）</code><br>例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">maps[<span class="string">&quot;abc&quot;</span>] = <span class="number">1</span>;  <span class="comment">// 左值运用 </span></span><br><span class="line"><span class="type">int</span> num = maps[<span class="string">&quot;abd&quot;</span>];  <span class="comment">// 右值运用</span></span><br></pre></td></tr></table></figure><p>无论如何，subscript操作符都会先根据键值找出实值，源码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">... T&amp; <span class="keyword">operator</span>[](<span class="type">const</span> key_type&amp; k)&#123;</span><br><span class="line">   <span class="keyword">return</span> (*((<span class="built_in">insert</span>(<span class="built_in">value_type</span>(k, <span class="built_in">T</span>()))).first)).second;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码运行过程是：首先根据键值和实值做出一个元素，该元素实值未知，因此产生一个实值类型相同的临时对象替代：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">value_type</span>(k, <span class="built_in">T</span>());</span><br></pre></td></tr></table></figure><p>再将这个对象插入到map中，并返回一个pair：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">pair&lt;iterator, <span class="type">bool</span>&gt; <span class="title">insert</span><span class="params">(valu_type(k, T()))</span></span>;</span><br></pre></td></tr></table></figure><p>pair第一个元素是迭代器，指向当前插入的新元素<br>如果插入成功返回true，此时对应左值运用，根据键值插入实值。<br>如果插入失败（重复插入）返回false，此时返回的是已经存在的元素，则可以取到它的实值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">insert</span>(<span class="built_in">value_type</span>(k, <span class="built_in">T</span>()))).first; <span class="comment">// 获取的是迭代器</span></span><br><span class="line">*((<span class="built_in">insert</span>(<span class="built_in">value_type</span>(k, <span class="built_in">T</span>()))).first); <span class="comment">// 迭代器解引用。</span></span><br><span class="line">(*((<span class="built_in">insert</span>(<span class="built_in">value_type</span>(k, <span class="built_in">T</span>()))).first)).second; <span class="comment">// 取得实值</span></span><br></pre></td></tr></table></figure><h2 id="由于该实值是以引用方式传递，因此作为左值或右值都可以。"><a href="#由于该实值是以引用方式传递，因此作为左值或右值都可以。" class="headerlink" title="由于该实值是以引用方式传递，因此作为左值或右值都可以。"></a>由于该实值是以引用方式传递，因此作为左值或右值都可以。</h2><h2 id="36、set和map的区别，multimap和multiset的区别"><a href="#36、set和map的区别，multimap和multiset的区别" class="headerlink" title="36、set和map的区别，multimap和multiset的区别"></a>36、set和map的区别，multimap和multiset的区别</h2><p>set只提供一种数据类型的接口，但是会将这一个元素分配到key和value上。<br>而且它的compare_function用的是identity()函数，这个函数是输入什么输出什么，这样就实现了set机制，set的key和value实际上一样。<br>其实保存的是两份元素，而非一份元素。</p><p>map则提供两种数据类型的接口，分别放在key和value的位置上，<br>他的比较function采用的是红黑树的compare_function()，保存的确实是两份元素</p><p>他们两个的insert都是采用红黑树的insert_unique()，即独一无二的插入。</p><p>multimap和map的唯一区别在于：multimap调用的是红黑树的insert_equal()，可以重复插入<br>map调用的是红黑树的insert_unique()，即独一无二的插入</p><h2 id="multiset和set也一样，底层实现都是一样的，但插入的时候调用的方法不一样。"><a href="#multiset和set也一样，底层实现都是一样的，但插入的时候调用的方法不一样。" class="headerlink" title="multiset和set也一样，底层实现都是一样的，但插入的时候调用的方法不一样。"></a>multiset和set也一样，底层实现都是一样的，但插入的时候调用的方法不一样。</h2><h2 id="37、红黑树概念"><a href="#37、红黑树概念" class="headerlink" title="37、红黑树概念"></a>37、红黑树概念</h2><p>面试时手写红黑树几乎不可能，但红黑树基本概念还是要掌握。</p><ol><li>是二叉排序树（继承BST的特点）：</li></ol><ul><li><p>若左子树不为空，则左子树上所有结点的值小于等于根节点的值</p></li><li><p>若右子树不为空，则右子树上所有结点的值大于（等于）根节点的值。</p></li><li><p>左、右子树也是二叉排序树。</p></li></ul><ol start="2"><li>红黑树满足以下几个要求：</li></ol><ul><li><p>树中结点只有红色和黑色。</p></li><li><p>根节点和叶子结点（NULL）均为黑色结点。</p></li><li><p>红色节点的叶子结点必须为黑色结点（黑色结点子节点可以为黑色）</p></li><li><p>从根到NULL的任何路径上黑色结点数目相同。</p></li></ul><ol start="3"><li>查找时间一定可以控制在O(logn)</li></ol><hr><h2 id="38、STL中unordered-map和map的区别和应用场景"><a href="#38、STL中unordered-map和map的区别和应用场景" class="headerlink" title="38、STL中unordered_map和map的区别和应用场景"></a>38、STL中unordered_map和map的区别和应用场景</h2><p>map支持键的自动排序，底层机制是红黑树，红黑树的查询和维护时间复杂度均为O(logn)，<br>但是空间占用比较大，因为每个节点要保持父节点，孩子节点以及颜色信息。</p><p>unordered_map是C++11新添加的容器，底层机制是哈希表，通过哈希函数计算元素位置，其查询时间复杂度为O(1)<br>维护时间与Bucket桶所维护的list长度有关，但是建立hash表耗时较大。</p><p>从两者的底层机制和特点可以看出：<br>map适用于有序数据的应用场景<br>unordered_map适用于高效查询的应用场景。</p><hr><h2 id="hash-table中解决冲突有哪些办法？"><a href="#hash-table中解决冲突有哪些办法？" class="headerlink" title="hash_table中解决冲突有哪些办法？"></a>hash_table中解决冲突有哪些办法？</h2><p>前三个：</p><ol><li><p>线性探测法：<br>使用hash函数计算出的位置如果已经有元素占用了，则依次（线性）向后寻找，找到表尾则返回表头，知道找到一个空位</p></li><li><p>拉链法：<br>每个表格维护一个list，如果hash函数计算出的格子相同，则按顺序存储在list中</p></li><li><p>再散列：<br>发生冲突时使用另一种hash函数再计算一个地址，直到不冲突</p></li><li><p>二次探测<br>使用hash函数计算出的位置如果已经有元素占用了，按照1^2,2^2,3^2的步长依次查找<br>如果步长是随机数序列，则称之为伪随机探测。</p></li><li><p>公共溢出区<br>一旦hash函数计算的结果相同，就放入公共溢出区</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>cpp</title>
      <link href="/2022/03/02/cpp/"/>
      <url>/2022/03/02/cpp/</url>
      
        <content type="html"><![CDATA[<h1 id="一、基础语法"><a href="#一、基础语法" class="headerlink" title="一、基础语法"></a>一、基础语法</h1><h2 id="1、在main执行之前和之后执行的代码可能是什么？"><a href="#1、在main执行之前和之后执行的代码可能是什么？" class="headerlink" title="1、在main执行之前和之后执行的代码可能是什么？"></a>1、在main执行之前和之后执行的代码可能是什么？</h2><blockquote><ol><li>main函数执行之前，主要就是初始化系统相关资源：</li></ol><ul><li>设置栈指针</li><li>初始化静态<code>static</code>变量和<code>global</code>全局变量，即<code>.data</code>段的内容</li><li>将未初始化部分的全局变量赋初值：数值型<code>short,int,long</code>赋为<code>0</code>，<code>bool</code>为<code>false</code>，<code>pointer</code>为<code>nullptr</code>，即<code>.bss</code>段内容</li><li>全局对象初始化，在<code>main</code>之前调用构造函数，这是可能会执行前的一些代码</li><li>将main函数的参数<code>argc,argv</code>等传递给<code>main</code>函数，然后运行main函数</li><li><strong>attribute</strong>((constructor))</li></ul><ol start="2"><li>main函数执行之后</li></ol><ul><li>全局对象的析构函数会在main函数之后执行</li><li>可以用<code>atexit</code>注册一个函数，它会在main之后执行</li><li><strong>attribute</strong>((destructor))</li></ul></blockquote><hr><h2 id="2、结构体内存对齐问题"><a href="#2、结构体内存对齐问题" class="headerlink" title="2、结构体内存对齐问题"></a>2、结构体内存对齐问题</h2><blockquote><ul><li>结构体内成员按照声明顺序存储，第一个成员地址和整个结构体地址相同。【首地址】</li><li>未特殊说明时，按照结构体中size最大的成员对齐。（若有double，则8字节对齐）</li></ul></blockquote><p>c++11以后引入两个关键字<code>alignof</code>和<code>alignas</code>，其中<code>alignof</code>可以计算出类型的对齐方式，<code>alignas</code>可以指定结构体的对齐方式<br>但是<code>alignas</code>在某些情况下是不能使用的</p><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>alignas能使用的例子</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Info</span>&#123;</span><br><span class="line">    <span class="type">uint8_t</span> a;</span><br><span class="line">    <span class="type">uint16_t</span> b;</span><br><span class="line">    <span class="type">uint8_t</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="built_in">sizeof</span>(Info) &lt;&lt; std::endl; <span class="comment">// 6: 2+2+2（字节）</span></span><br><span class="line">std::cout &lt;&lt; <span class="built_in">alignof</span>(Info) &lt;&lt; std::endl;<span class="comment">// 2字节</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">alignas</span>(<span class="number">4</span>) Info2&#123;</span><br><span class="line">    <span class="type">uint8_t</span> a;</span><br><span class="line">    <span class="type">uint16_t</span> b;</span><br><span class="line">    <span class="type">uint8_t</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="built_in">sizeof</span>(Info2) &lt;&lt; std::endl;    <span class="comment">// 8: 4+4（字节）</span></span><br><span class="line">std::cout &lt;&lt; <span class="built_in">alignof</span>(Info2) &lt;&lt; std::endl;   <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p><code>alignas</code>将内存对齐调整为4字节<br>∴<code>sizeof(Info2)</code>的值变为了8</p>     </div></div>    </div><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>alignas不能使用的例子</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Info</span>&#123;</span><br><span class="line">    <span class="type">uint8_t</span> a;</span><br><span class="line">    <span class="type">uint32_t</span> b;</span><br><span class="line">    <span class="type">uint8_t</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="built_in">sizeof</span>(Info) &lt;&lt; std::endl; <span class="comment">// 12: 4+4+4（字节）</span></span><br><span class="line">std::cout &lt;&lt; <span class="built_in">alignof</span>(Info) &lt;&lt; std::endl; <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">alignas</span>(<span class="number">2</span>) Info2&#123;</span><br><span class="line">    <span class="type">uint8_t</span> a;</span><br><span class="line">    <span class="type">uint32_t</span> b;</span><br><span class="line">    <span class="type">uint8_t</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="built_in">sizeof</span>(Info2) &lt;&lt; std::endl; <span class="comment">// 12: 4+4+4（字节）</span></span><br><span class="line">std::cout &lt;&lt; <span class="built_in">alignof</span>(Info2) &lt;&lt; std::endl; <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p>若<code>alignas</code>小于自然对齐的最小单位，则会被忽略</p>     </div></div>    </div><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>单字节对齐方式</span></div>    <div class="xContent"><div class="inner">        <p>用上述方式来看，使用单字节对齐方式，使用<code>alignas</code>是无效的，应该使用<code>#pragma pack(push, 1)</code>或者<code>__attribute__((packed))</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> defined(__GNUC__) || defined(__GNUG__)</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> ONEBYTE_ALIGN __attribute__((packed))</span></span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> defined(_MSC_VER)</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> ONEBYTE_ALIGN</span></span><br><span class="line">    <span class="meta">#<span class="keyword">pragma</span> pack(push, 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Info</span>&#123;</span><br><span class="line">    <span class="type">uint8_t</span> a;</span><br><span class="line">    <span class="type">uint32_t</span> b;</span><br><span class="line">    <span class="type">uint8_t</span> c;</span><br><span class="line">&#125; ONEBYTE_ALIGN;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(__GNUC__) || defined(__GNUG__)</span></span><br><span class="line">    <span class="meta">#<span class="keyword">undef</span> ONEBYTE_ALIGN</span></span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> defined(_MSC_VER)</span></span><br><span class="line">    <span class="meta">#<span class="keyword">pragma</span> pack(pop)</span></span><br><span class="line">    <span class="meta">#<span class="keyword">undef</span> ONEBYTE_ALIGN</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="built_in">sizeof</span>(Info) &lt;&lt; std::endl; <span class="comment">// 6 1 + 4 + 1</span></span><br><span class="line">std::cout &lt;&lt; <span class="built_in">alignof</span>(Info) &lt;&lt; std::endl;<span class="comment">// 6</span></span><br></pre></td></tr></table></figure>     </div></div>    </div><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>确定结构体每个元素大小【`alignas`处理不了的情况】</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> defined(__GNUC__) || defined(__GNUG__)</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> ONEBYTE_ALIGN __attribute__((packed))</span></span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> defined(_MSC_VER)</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> ONEBYTE_ALIGN</span></span><br><span class="line">    <span class="meta">#<span class="keyword">pragma</span> pack(push, 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Info</span>&#123;</span><br><span class="line">    <span class="type">uint16_t</span> a : <span class="number">1</span>; <span class="comment">// 1bit</span></span><br><span class="line">    <span class="type">uint16_t</span> b : <span class="number">2</span>;</span><br><span class="line">    <span class="type">uint16_t</span> c : <span class="number">3</span>;</span><br><span class="line">    <span class="type">uint16_t</span> d : <span class="number">2</span>;</span><br><span class="line">    <span class="type">uint16_t</span> e : <span class="number">1</span>;</span><br><span class="line">    <span class="type">uint16_t</span> pad : <span class="number">7</span>;</span><br><span class="line">&#125; ONEBYTE_ALIGN;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 0 1   3     6   8 9            15</span></span><br><span class="line"><span class="comment">* +-+---+-----+---+-+-------------+</span></span><br><span class="line"><span class="comment">* | |   |     |   | |             |</span></span><br><span class="line"><span class="comment">* |a| b |  c  | d |e|     pad     |</span></span><br><span class="line"><span class="comment">* | |   |     |   | |             |</span></span><br><span class="line"><span class="comment">* +-+---+-----+---+-+-------------+</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(__GNUC__) || defined(__GNUG__)</span></span><br><span class="line">    <span class="meta">#<span class="keyword">undef</span> ONEBYTE_ALIGN</span></span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> defined(_MSC_VER)</span></span><br><span class="line">    <span class="meta">#<span class="keyword">pragma</span> pack(pop)</span></span><br><span class="line">    <span class="meta">#<span class="keyword">undef</span> ONEBYTE_ALIGN</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="built_in">sizeof</span>(Info) &lt;&lt; std::endl;     <span class="comment">// 2</span></span><br><span class="line">std::cout &lt;&lt; <span class="built_in">alignof</span>(Info) &lt;&lt; std::endl;    <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>     </div></div>    </div><hr><h2 id="3、指针和引用的区别"><a href="#3、指针和引用的区别" class="headerlink" title="3、指针和引用的区别"></a>3、指针和引用的区别</h2><ul><li><p>指针是一个变量，存储的是一个地址，引用跟原来的变量本质上是同一个东西，是原变量的别名。</p></li><li><p>sizeof指针得到的是本指针的大小，sizeof引用得到的是引用所指向变量的大小</p></li><li><p>当把指针作为参数进行传递时，也是将实参的一个拷贝传递给形参，两者指向的地址相同，但不是同一个变量，在函数中改变这个变量的指向不影响实参，而引用可以。</p></li><li><p>指针可以有多级，引用只能有一级</p></li><li><p>指针可以为空，引用不能为NULL并且在定义时必须初始化</p></li><li><p>指针在初始化后可以改变指向，而引用在初始化之后<b>不可再改变</b><br> （变量可以被引用为多次，但引用只能作为一个变量引用）</p></li><li><p>指针是具体变量，需要占用存储空间；引用本质是一个指针，同样会占4字节内存；</p></li><li><p>引用在声明时必须初始化为另一变量，一旦出现必须为typename refname &amp;varname形式；<br>指针声明和定义可以分开，可以先只声明指针变量而不初始化，等到用到时再指向具体变量。</p></li></ul><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>测试指针和引用1</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(<span class="type">int</span> *p)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">    p = &amp;a;</span><br><span class="line">    cout &lt;&lt; p &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; *p &lt;&lt; endl; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> *p = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="built_in">test</span>(p);</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">nullptr</span>)    cout &lt;&lt; <span class="string">&quot;指针p为NULL&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行结果：</span></span><br><span class="line"><span class="comment">// 0x22ff44 1</span></span><br><span class="line"><span class="comment">// 指针p为NULL</span></span><br></pre></td></tr></table></figure>     </div></div>    </div><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>测试指针和引用2</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">testPTR</span><span class="params">(<span class="type">int</span>* p)</span></span>&#123;   <span class="comment">// 只是改动了形参的指向，实参没有变，相当于两个参数都指向一个地址，但本身不同。</span></span><br><span class="line">    <span class="type">int</span> a = <span class="number">12</span>;</span><br><span class="line">    p = &amp;a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">testREF</span><span class="params">(<span class="type">int</span>&amp; p)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">12</span>;</span><br><span class="line">    p = a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> *b = &amp;a;</span><br><span class="line">    <span class="built_in">testPTR</span>(b);  <span class="comment">// 改变指针指向，但是没有改变指针所指的内容</span></span><br><span class="line">    cout &lt;&lt; a &lt;&lt; endl; <span class="comment">// 10</span></span><br><span class="line">    cout &lt;&lt; *b &lt;&lt; endl; <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line">    a = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">testREF</span>(a);</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; endl; <span class="comment">// 12</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><p>在编译器看来，int a &#x3D; 10; int &amp;b &#x3D; a; 等价于：int * const b &#x3D; &amp;a; 而 b &#x3D; 20; 等价于 *b &#x3D; 20;<br>自动转换为指针和自动解引用。</p><hr><h2 id="4、在传递函数参数时，什么时候该使用指针，什么时候该使用引用？"><a href="#4、在传递函数参数时，什么时候该使用指针，什么时候该使用引用？" class="headerlink" title="4、在传递函数参数时，什么时候该使用指针，什么时候该使用引用？"></a>4、在传递函数参数时，什么时候该使用指针，什么时候该使用引用？</h2><ul><li><p>需要返回函数内部局部变量的内存的时候用指针。使用指针传参需要开辟内存，用完要记得释放指针。否则会内存泄漏，然而返回局部变量的引用是没有意义的。</p></li><li><p>对栈空间大小比较敏感（比如递归）的时候使用引用，使用引用传递<b>不需要创建临时变量</b>，开销要更小。</p></li><li><p>类对象作为参数传递时使用引用，这是C++类对象传递的标准方式。</p></li></ul><hr><h2 id="5、堆和栈的区别"><a href="#5、堆和栈的区别" class="headerlink" title="5、堆和栈的区别"></a>5、堆和栈的区别</h2><ul><li>申请方式不同：<ul><li>栈由系统自动分配</li><li>堆是程序员进行申请和释放的</li></ul></li><li>申请大小限制不同：<ul><li>栈顶和栈底是预先设计好的，栈是向栈底扩展，大小固定，可以通过ulimit -a查看，由ulimit -s修改</li><li>堆向高地址扩展，是不连续的内存区域，大小可以灵活调整</li></ul></li><li>申请效率不同。<ul><li>栈由系统分配，速度快，不会有碎片。</li><li>堆由程序员分配，速度慢，且会有碎片。</li></ul></li><li>空间大小不同：<ul><li>栈空间默认是4M</li><li>堆区一般是1-4G</li></ul></li></ul><table><thead><tr><th align="left"></th><th align="left">堆</th><th align="left">栈</th></tr></thead><tbody><tr><td align="left">管理方式</td><td align="left">堆中资源由程序员控制，容易mem. leak</td><td align="left">栈资源由编译器自动管理，无需手工控制</td></tr><tr><td align="left">内存管理机制</td><td align="left">系统有一个记录空间内存地址的链表，当系统收到程序申请时，遍历链表，寻找第一个空间大于申请空间的堆结点【首次适应算法】，删除空闲结点链表中的该节点，并将该结点空间分配给程序（大多数系统会在这块内存空间首地址记录本次分配的大小，这样delete才能正确释放本内存空间，另外系统会将多余部分重新放入空闲链表中）</td><td align="left">只要栈的剩余空间大于所申请空间，系统为程序提供内存，否则报异常提示栈溢出。（链表和队列、不连续和连续空间区别）</td></tr><tr><td align="left">空间大小</td><td align="left">堆是不连续的内存区域（因为系统是用链表来存储空闲内存地址，自然不是连续的），堆大小受限于计算机系统中有效的虚拟内存（32bit系统理论上是4G），所以堆的空间比较灵活，比较大</td><td align="left">栈是一块连续的内存区域，大小是操作系统预定好的，Windows下栈大小是2M（也有1M，在编译时确定，VC中可设置）</td></tr><tr><td align="left">碎片空间</td><td align="left">对于堆，频繁的new&#x2F;delete会造成大量碎片，使程序效率降低</td><td align="left">对于栈，它是有点类似于数据结构上的一个先进后出的栈，进入一一对应，不会产生碎片。【栈和队列的区别】</td></tr><tr><td align="left">生长方向</td><td align="left">堆向上，向高地址方向增长。</td><td align="left">栈向下，向低地址方向增长。</td></tr><tr><td align="left">分配方式</td><td align="left">堆都是动态分配（没有静态分配的堆）</td><td align="left">栈有静态分配和动态分配，静态分配由编译器完成（如局部变量分配），动态分配由alloca函数分配，但栈的动态分配的资源由编译器进行释放，无需程序员实现。</td></tr><tr><td align="left">分配效率</td><td align="left">堆由C&#x2F;C++函数库提供，机制很复杂，所以堆的效率比栈低很多</td><td align="left">栈是其系统提供的数据结构，计算机在底层对栈提供支持，分配专门寄存器存放栈地址，栈操作有专门指令。</td></tr></tbody></table><hr><h2 id="6、栈快一点还是堆快一点"><a href="#6、栈快一点还是堆快一点" class="headerlink" title="6、栈快一点还是堆快一点"></a>6、栈快一点还是堆快一点</h2><blockquote><p>答：栈快一些<br>操作系统会在底层对栈提供支持，会分配专门的寄存器存放栈的地址，栈的入栈出栈操作也十分简单，而且有专门的指令执行，所以栈的效率较高也比较快。<br>堆的操作是由C&#x2F;C++函数库提供的，在分配堆内存时需要一定的算法寻找合适大小的内存。并且获取堆的内容需要两次访问，第一次访问指针，第二次根据指针保存的地址访问内存，因此堆比较慢。</p></blockquote><hr><h2 id="7、区别以下指针类型"><a href="#7、区别以下指针类型" class="headerlink" title="7、区别以下指针类型"></a>7、区别以下指针类型</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">int</span> (*p)[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> *<span class="title">p</span><span class="params">(<span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="built_in">int</span> (*p)(<span class="type">int</span>);</span><br></pre></td></tr></table></figure><ul><li><p>int *p[10]表示指针数组，强调数组概念，是一个数组遍历，数组大小为10，数组内每个元素都是指向int类型的指针变量。</p></li><li><p>int (*p)[10]表示数组指针，强调是指针，只有一个变量，是指针类型，不过指向的是一个int类型的数组，该数组大小是10。</p></li><li><p>int *p(int)是函数声明，函数名是p，参数是int类型的，返回值是 int * 类型的。</p></li><li><p>int (*p)(int)是函数指针，强调是指针，该指针指向的函数具有int类型参数，并且返回值是int类型的。</p></li></ul><blockquote><p>小总结：带括号的(*p)强调的是指针。</p></blockquote><hr><h2 id="8、new-x2F-delete-和-malloc-x2F-free的异同"><a href="#8、new-x2F-delete-和-malloc-x2F-free的异同" class="headerlink" title="8、new&#x2F;delete 和 malloc&#x2F;free的异同"></a>8、new&#x2F;delete 和 malloc&#x2F;free的异同</h2><p>相同点：</p><ul><li><p>都可以用于内存的动态申请和释放<br>不同点：</p></li><li><p>new&#x2F;delete是 C++ 运算符，malloc&#x2F;free是C&#x2F;C++语言标准库函数</p></li><li><p>new&#x2F;delete不需要库文件支持，malloc&#x2F;free需要库文件支持</p></li><li><p>new 自动计算要分配的空间大小，malloc需要手工计算</p></li><li><p>new 是类型安全的，malloc不是。例如：</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p = <span class="keyword">new</span> <span class="type">float</span>[<span class="number">2</span>];    <span class="comment">//编译错误</span></span><br><span class="line"><span class="type">int</span> *p = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="number">2</span> * <span class="built_in">sizeof</span>(<span class="type">double</span>));    <span class="comment">//编译无错误</span></span><br></pre></td></tr></table></figure></li><li><p>new 调用名为 operator new 的标注库函数分配足够空间并调用相关对象的构造函数；<br>delete 对指针所指对象运行适当析构函数，然后通过调用名为 operator delete 的标准库函数释放该对象所用内存。<br>malloc&#x2F;free 没有相关调用</p></li><li><p>new 是封装了 malloc，直接free不会报错，但这只是释放内存，并不会析构对象。</p></li></ul><hr><h2 id="9、new和delete是如何实现的"><a href="#9、new和delete是如何实现的" class="headerlink" title="9、new和delete是如何实现的"></a>9、new和delete是如何实现的</h2><ul><li>new的实现过程：<br>首先调用名为operator new的标准库函数，分配足够大的空间为类型化的内存，以保存指定类型的一个对象；<br>接下来运行该类型的一个构造函数，用指定初始化构造对象；<br>最后返回指向新分配并构造后的对象的指针；</li><li>delete的实现过程：<br>对指针指向的对象运行适当的析构函数；<br>然后通过调用名为operator delete的标准库函数释放该对象所用内存。</li></ul><blockquote><p>小总结：new 和 delete 顺序是反过来的：分配内存-&gt;构造函数-&gt;提供指针-&gt;析构函数-&gt;释放内存</p></blockquote><hr><h2 id="10、malloc-和-new-的区别？"><a href="#10、malloc-和-new-的区别？" class="headerlink" title="10、malloc 和 new 的区别？"></a>10、malloc 和 new 的区别？</h2><ul><li><p>malloc&#x2F;free 是标准库函数，支持覆盖；new&#x2F;delete是运算符，不重载；</p></li><li><p>malloc&#x2F;free 仅仅分配&#x2F;回收内存空间，不具备调用构造函数和析构函数的功能。用malloc分配空间存储类的对象存在风险；<br>new&#x2F;delete 除了分配回收功能外，还会调用构造和析构函数</p></li><li><p>malloc&#x2F;free 返回的是 void 类型指针（必须进行类型转换），new&#x2F;delete返回的是具体类型指针。</p></li></ul><hr><h2 id="11、既然有了malloc-x2F-free，c-中为什么还需要new-x2F-delete？"><a href="#11、既然有了malloc-x2F-free，c-中为什么还需要new-x2F-delete？" class="headerlink" title="11、既然有了malloc&#x2F;free，c++中为什么还需要new&#x2F;delete？"></a>11、既然有了malloc&#x2F;free，c++中为什么还需要new&#x2F;delete？</h2><ul><li><p>malloc&#x2F;free 和 new&#x2F;delete都是用来申请内存和回收内存的。</p></li><li><p>在对非基本数据类型的对象使用的时候，对象创建的时候还需要执行构造函数，销毁的时候要执行析构函数。<br>而malloc&#x2F;free是库函数，是已经编译的代码，所以不能吧构造和析构函数的功能强加给malloc&#x2F;free，所以new&#x2F;delete是必不可少的。</p></li></ul><hr><h2 id="12、被free回收的内存是立即返还给操作系统吗？"><a href="#12、被free回收的内存是立即返还给操作系统吗？" class="headerlink" title="12、被free回收的内存是立即返还给操作系统吗？"></a>12、被free回收的内存是立即返还给操作系统吗？</h2><p>不是，被free回收的内存会首先被ptmalloc使用双链表保存起来，当用户下一次申请内存的时候，会尝试从这些内存中寻找合适的返回。<br>这样避免了频繁的系统调用，从而占用过多的系统资源。<br>同时ptmalloc也会尝试对小块内存进行合并，避免过多的内存碎片。</p><hr><h2 id="13、宏定义和函数有何区别？"><a href="#13、宏定义和函数有何区别？" class="headerlink" title="13、宏定义和函数有何区别？"></a>13、宏定义和函数有何区别？</h2><ul><li><p>宏在<code>编译时</code>完成替换，之后被替换的文本参与编译，相当于直接插入了代码，运行时不存在函数调用，执行起来更快；<br>函数调用在运行时需要跳转到具体调用函数。</p></li><li><p>宏定义属于在结构中插入代码，没有返回值；<br>函数调用具有返回值.</p></li><li><p>宏定义参数没有类型，不进行类型检查；<br>函数参数具有类型，需要检查类型。</p></li><li><p>宏定义不用在最后加分号。</p></li></ul><hr><h2 id="14、宏定义和typedef的区别？"><a href="#14、宏定义和typedef的区别？" class="headerlink" title="14、宏定义和typedef的区别？"></a>14、宏定义和typedef的区别？</h2><ul><li><p>宏主要用于定义常量及书写复杂的内容；<br>typedef主要用于定义类型别名。</p></li><li><p>宏替换发生在编译阶段之前，属于文本插入替换；<br>typedef是编译的一部分。</p></li><li><p>宏定义不检查类型；<br>typedef会检查数据类型。【因此typedef安全】</p></li><li><p>宏不是语句，不需要在最后加分号；<br>typedef是语句，要加分号标识结束。</p></li><li><p>注意对指针的操作，typedef char* p_char 和 #define p_char char* 差别巨大【例如同时定义多个变量】</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">char</span>* p_char;</span><br><span class="line">p_char a, b;  <span class="comment">// 两个指针</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> p_char chr*</span></span><br><span class="line">p_char a, b;  <span class="comment">// 一个指针</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="15、变量声明和定义区别？"><a href="#15、变量声明和定义区别？" class="headerlink" title="15、变量声明和定义区别？"></a>15、变量声明和定义区别？</h2><ul><li><p>声明仅仅是把变量的声明的位置及类型提供给编译器，并不分配内存空间；<br>定义要在定义的地方为其分配存储空间。</p></li><li><p>相同变量可以在多处声明（外部变量 extern），但只能在一处定义。</p><blockquote><p>用extern声明外部变量<br>全局变量（外部变量）是在函数的外部定义的，其作用域为从变量的定义处开始，到本程序文件的末尾。<br>在此作用域内，全局变量可以为本文件中的各个函数所引用。<br>编译时将全局变量分配在静态存储区。<br>如果用extern声明全局变量，即扩展全局变量的作用域。</p></blockquote></li></ul><hr><h2 id="16、stelen和sizeof的区别？"><a href="#16、stelen和sizeof的区别？" class="headerlink" title="16、stelen和sizeof的区别？"></a>16、stelen和sizeof的区别？</h2><ul><li><p>sizeof是运算符，不是函数，结果在编译时得到而非运行中获得；<br>strlen是字符处理的库函数</p></li><li><p>sizeof参数可以是任何数据的类型或数据（sizeof参数不退化）；<br>strlen的参数只能是字符指针且末尾是’\0’的字符串。</p></li><li><p>因为sizeof值在编译时确定，所以不能用来得到动态分配（运行时分配）存储空间的大小。【例如获得的是指针的大小，不是数组的大小】</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span>&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span>* str = <span class="string">&quot;name&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">sizeof</span>(str);  <span class="comment">// 取的是指针str的长度，是8【64位编译环境】</span></span><br><span class="line">  <span class="built_in">strlen</span>(str);  <span class="comment">// 取的是这个字符串的长度，不包括结尾的 \0。大小是4</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>补充：一个指针占多少字节？<br>上例中，sizeof(str)的值为8，是在64位编译环境下的，指针的占用大小为8字节；<br>在32位环境下，指针占用大小为4字节。<br>一个指针占内存的大小跟编译环境有关，而与机器位数无关。</p></blockquote><hr><h2 id="17、常量指针和指针常量的区别？"><a href="#17、常量指针和指针常量的区别？" class="headerlink" title="17、常量指针和指针常量的区别？"></a>17、常量指针和指针常量的区别？</h2><ul><li><p>指针常量是一个指针，读成常量的指针<code>pointer to const</code>，指向一个只读变量，也就是后面所指明的 int const 和 const int，都是一个常量<br>可以写作 int const *p 或 const int *p。【这个 * 修饰的是变量p，const修饰int】</p></li><li><p>常量指针<code>const pointer</code>是一个不能改变指向的指针。指针是个常量，必须初始化，一旦初始化完成，它的值（存放在指针中的地址）就不能再改变了<br>即不能中途改变指向，如int *const p。【这个 * 修饰的是int类型，const修饰指针】</p></li></ul><blockquote><p>小补充：volatile 可以允许用指针修改 const</p></blockquote><hr><h2 id="18、a和-amp-a有什么区别？"><a href="#18、a和-amp-a有什么区别？" class="headerlink" title="18、a和&amp;a有什么区别？"></a>18、a和&amp;a有什么区别？</h2><p>假设数组 int a[10]; int(*p)[10] &#x3D; &amp;a;<br>其中：</p><ul><li><p>a是数组名，是数组首元素地址，+1表示地址加上一个int类型的大小<br>如果a的值是0x00000001，加1操作后变为0x00000005；*(a+1) &#x3D; a[1]</p></li><li><p>&amp;a是数组的指针，其类型为 int(*)[10]（就是前面提到的数组指针），其加1时，系统会认为是数组首地址加上整个数据的偏移（10个int型变量）<br>值为数组a尾元素后一个元素的地址</p></li><li><p>若(int *)p，此时输出 *p 时，其值为a[0]的值，因为被转为 int * 类型，解引用时按照int类型大小来读取。</p></li></ul><hr><h2 id="19、C-和Python区别"><a href="#19、C-和Python区别" class="headerlink" title="19、C++和Python区别"></a>19、C++和Python区别</h2><p>包括但不限于：</p><ul><li><p>Python是一种脚本语言，是解释性语言；<br>C++是编译语言，是需要编译后在特定平台运行的。<br>Python可以很方便的跨平台，但效率没有C++搞。</p></li><li><p>Python使用缩进来区分不同代码块；<br>C++使用花括号来区分。</p></li><li><p>C++中需要事先定义变量的类型，而Python不需要，Python的基本数据类型只有数字，布尔值，字符串，列表，元组等。</p></li><li><p>Python的库函数比C++多，调用起来更方便。</p></li></ul><hr><h2 id="20、C-和C语言的区别"><a href="#20、C-和C语言的区别" class="headerlink" title="20、C++和C语言的区别"></a>20、C++和C语言的区别</h2><ul><li><p>C++中new&#x2F;delete是对内存分配的运算符，取代了C中的malloc&#x2F;free（库函数）</p></li><li><p>标准C++中的<code>字符串</code>取代了<br>标准C函数库头文件中的字符数组处理函数（C中没有字符串类型）</p></li><li><p>C++中用来做控制台输入输出的<code>iostream</code>库取代了<br>标准C中的<code>stdio</code>函数库。</p></li><li><p>C++中的try&#x2F;catch&#x2F;throw异常处理机制取代了<br>标准C中的setjmp()&#x2F;longjmp()函数。</p></li><li><p>在C++中，允许有相同的函数名，不过它们的参数类型不能完全相同，这样这些函数就可以相互区别开来【函数重载】<br>在C语言中不允许。</p></li><li><p>C++语言中，允许变量定义语句在程序的任何地方，只要是在使用它之前就可以；<br>C语言中，必须要在函数的开头部分。【C和C++都不允许重复定义变量】</p></li><li><p>C++中，除了值和指针之外，新增了引用。引用型变量相当于别名。</p></li><li><p>C++相对于C增加了一些关键字，bool&#x2F;using&#x2F;dynamic_cast&#x2F;namespace等。</p></li></ul><hr><h2 id="21、C-与Java的区别"><a href="#21、C-与Java的区别" class="headerlink" title="21、C++与Java的区别"></a>21、C++与Java的区别</h2><ul><li><p><b>语言特性</b></p><ul><li><p>Java语言给开发人员提供了更为简洁的语法；<br>完全面对对象，由于JVM可以安装到任何操作系统上，所以说可移植性强。</p></li><li><p>Java语言中没有指针的概念，引入了真正的数组。<br>不同于C++中利用指针实现的“伪数组”，Java引入了真正的数组。<br>同时将容易造成麻烦的指针从语言中去掉，<br>这有利于防止在C++程序中常见的因为数组操作越界等指针操作而对系统数据进行非法读写带来的不安全问题。</p></li><li><p>C++也可以在其他操作系统运行，但是需要不同的编码（这一点不如Java，只编写一次代码，到处运行）<br>例如可能【Windows下大端存储，Unix下小端存储】<br>Java一般生成字节码，在JVM运行得到结果</p></li><li><p>Java用接口（Interface）技术取代C++程序中的抽象类。<br>接口与抽象类有相同的功能，但是省却了在实现和维护上的复杂性</p></li></ul></li><li><p><b>垃圾回收</b></p><ul><li>C++用析构函数回收垃圾，写C&#x2F;C++程序时一定要注意内存的申请和释放。</li><li>Java语言不使用指针，内存的分配和回收都是自动进行的，程序员无须考虑内存碎片的问题。</li></ul></li><li><p><b>应用场景</b></p><ul><li><p>Java 在桌面程序上不如 C++ 实用，C++可以直接编译成exe文件，指针是C++的优势，可以直接对内存的操作，但同时具有危险性。<br>（操作内存十分危险，一旦指针位置出现错误，或者误删内存单元的重要数据，后果不堪设想）</p></li><li><p>Java在Web应用上具有C++无可比拟的优势，具有丰富多样的框架。</p></li><li><p>对于底层程序的编程以及控制方面的编程，C++很灵活，因为有句柄的存在。</p></li></ul></li></ul><hr><h2 id="22、C-中struct和class的区别"><a href="#22、C-中struct和class的区别" class="headerlink" title="22、C++中struct和class的区别"></a>22、C++中struct和class的区别</h2><ul><li><p><b>相同点</b></p><ul><li>两者都拥有成员函数、公有和私有部分</li><li>任何可以使用class完成的工作，同样可以使用struct完成</li></ul></li><li><p><b>不同点</b></p><ul><li>两者中如果不对成员不指定公私有，struct默认是公有的，class默认是私有的。</li><li>class默认是private继承，struct默认是public继承</li></ul></li></ul><blockquote><p>C++和C的struct的区别</p><ul><li><p>C语言中：struct是用户自定义数据类型（UDT）；<br>C++中struct是抽象数据类型（ADT），支持成员函数的定义（C++中的struct能继承，能实现多态）</p></li><li><p>C++中struct增加了访问权限，且可以和类一样有成员函数，成员默认访问说明符为public（为了与C兼容）</p></li><li><p>struct作为类的一种特例是用来自定义数据结构的。<br>一个结构标记声明后，在C中必须在结构标记前加上struct才能做结构类型名（除了typedef struct class{};）【Struct Node】<br>C++中结构体标记（结构体名）可以直接作为结构体类型名使用，此外，结构体struct在C++中被当做类的一种特例。</p></li></ul></blockquote><hr><h2 id="23、define宏定义和const的区别"><a href="#23、define宏定义和const的区别" class="headerlink" title="23、define宏定义和const的区别"></a>23、define宏定义和const的区别</h2><ul><li><p><b>编译阶段</b><br>define是在编译的<code>预处理</code>阶段起作用【预处理，主要做其中的文本处理】<br>const是在编译、运行的时候起作用</p></li><li><p><b>安全性</b><br>define只做替换，不做类型检查和计算，也不求解，容易产生错误，一般最好加上一个大括号包含全部内容<br>const常量有数据类型，编译器可以对其进行类型安全检查。</p></li><li><p><b>内存占用</b></p><ul><li><p>define只是将宏名称进行替换，在内存中会产生多份相同的备份。<br>const在程序运行中只有一份备份，且可以执行常量折叠，能将复杂的表达式计算出结果放出常量表。</p></li><li><p>宏定义的数据没有分配内存空间，只是插入替换掉；<br>const定义的变量只是值不能改变，但要分配内存空间。</p></li></ul></li></ul><hr><h2 id="24、C-中const和static的作用"><a href="#24、C-中const和static的作用" class="headerlink" title="24、C++中const和static的作用"></a>24、C++中const和static的作用</h2><ol><li><b>static</b></li></ol><ul><li><p>不考虑类的情况</p><ul><li><p>隐藏。所有不加static的全局变量和函数具有全局可见性，可以在其他文件中使用，加了之后只能在该文件所在的编译模块使用。</p></li><li><p>默认初始化为0。包括未初始化的全局静态变量与局部静态变量，都存在全局未初始化区。</p></li><li><p>静态变量在函数内定义，始终存在，且只进行一次初始化，具有记忆性，其作用范围与局部变量相同，函数退出后仍然存在，但不能使用。</p></li></ul></li><li><p>考虑类的情况</p><ul><li><p>static成员变量：只与类管理，不与类的对象关联。<br>定义时要分配空间，不能在类声明中初始化，必须在类定义体外部初始化，初始化时不需要标识为static；<br>可以被非static成员函数任意访问</p></li><li><p>static成员函数：不具有this指针，无法访问类对象的非static成员变量和非static成员函数；<br>不能被声明为const、虚函数和volatile；可以被非static成员函数任意访问。</p></li></ul></li></ul><ol start="2"><li><b>const</b></li></ol><ul><li><p>不考虑类的情况</p><ul><li><p>const 常量在定义时必须初始化，之后无法更改</p></li><li><p>const形参可以接收const和非const类型的实参，例如：void fun(const int&amp; i){}【实参可以是const也可以不是】</p></li></ul></li><li><p>考虑类的情况</p><ul><li>const成员变量：不能在类定义的外部初始化，只能通过构造函数<code>初始化列表</code>进行初始化，并且必须有构造函数；<br>不同类对其const数据成员的值可以不同，所以不能在类中声明时初始化</li><li>const成员函数：const对象不可以调用非const成员函数；<br>非const对象都可以调用；<br>不可以改变非mutable数据的值</li></ul></li></ul><blockquote><p>补充：mutable声明的变量可以在const成员函数中被修改</p></blockquote><hr><h2 id="25、C-的顶层const和底层const"><a href="#25、C-的顶层const和底层const" class="headerlink" title="25、C++的顶层const和底层const"></a>25、C++的顶层const和底层const</h2><p><b>概念区分</b></p><ul><li>顶层const：指的是const修饰的变量本身是一个常量，无法修改，值得是指针，就是 星号* 的右边</li><li>底层const：指的是const修饰的变量所指向的对象是一个常量，指的是所指变量，就是 星号* 的左边<br><b>例子</b><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>; <span class="type">int</span> *<span class="type">const</span> b1 = &amp;a;   <span class="comment">// 顶层const，b1本身是一个常量</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* b2 = &amp;a; <span class="comment">// 底层const,b2本身可变，所指的对象是常量</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> b3 = <span class="number">20</span>;  <span class="comment">// 顶层const，b3是常量不可变</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* <span class="type">const</span> b4 = &amp;a; <span class="comment">//前一个为底层，后一个是顶层，b4不可变。</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>&amp; b5 = a;  <span class="comment">// 用于声明引用变量，都是底层const</span></span><br></pre></td></tr></table></figure><b>区分作用</b></li><li>执行对象拷贝时有限制，常量的底层const不能赋值给非常量的底层const</li><li>使用命名的强制类型转换函数const_cast时，只能改变运算对象的底层const  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> <span class="type">const</span> a;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *a;</span><br><span class="line"><span class="type">int</span> *<span class="type">const</span> a;</span><br></pre></td></tr></table></figure></li><li>int const a 和 const int a均表示定义常量类型a。</li><li>const int *a、int const <em>a，其中a为指向int型变量的指针，const在</em>左侧，表示a指向不可变常量，（const (*a) ），对引用加const</li><li>int *const a，依旧是指针类型，表示a为指向整形数据的常指针。看成（const(a)，对指针const）</li></ul><hr><h2 id="26、数组名和指针（这里为指向数组首元素的指针）区别？"><a href="#26、数组名和指针（这里为指向数组首元素的指针）区别？" class="headerlink" title="26、数组名和指针（这里为指向数组首元素的指针）区别？"></a>26、数组名和指针（这里为指向数组首元素的指针）区别？</h2><ul><li><p>二者均可通过增减偏移量来访问数组中的元素</p></li><li><p>数组名不是真正意义上的指针，可以理解为<code>常指针</code>，所以数组名没有自增，自减等操作。</p></li><li><p><b>当数组名当做形参传递给调用函数后，就失去了原有特性，退化成一般指针，多了自增、自减操作。</b><br>但sizeof运算符不能再得到原数组的大小了</p></li></ul><hr><h2 id="27、final和override关键字"><a href="#27、final和override关键字" class="headerlink" title="27、final和override关键字"></a>27、final和override关键字</h2><p><b>override</b><br>当在父类中使用了虚函数的时候，你可能需要在某个子类中对这个虚函数进行重写，以下方法都可以：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">foo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">public</span> A&#123;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span></span>; <span class="comment">// OK</span></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">foo</span><span class="params">()</span></span>; <span class="comment">// OK</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> <span class="keyword">override</span></span>;  <span class="comment">//OK</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不使用override，将foo()写成f00()时，编译器并不会报错，因为他不知道你想要重写虚函数。<br>因此多了一个f00()函数。<br>因此 —— override关键字：指定了子类的这个虚函数是重写父类的，如果名字打错编译是不会通过的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">foo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f00</span><span class="params">()</span></span>; <span class="comment">//OK，编译器认为你这个是一个新的函数</span></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f00</span><span class="params">()</span> <span class="keyword">override</span></span>;  <span class="comment">// Error，加了override后，这个函数一定是继承自A的，若没有则报错</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><b>final</b><br>当不希望某个类被继承，或不希望某个虚函数被重写，可以在类名和虚函数后添加final关键字。<br>final关键字被继承或重写，编译器会报错。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">foo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> : <span class="keyword">public</span> Base&#123;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> <span class="keyword">final</span></span>; <span class="comment">// foo 被override并且是最后一个override，在其子类中不可以重写</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">final</span> : A&#123;  <span class="comment">// final表明B是不可被继承的</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> <span class="keyword">override</span></span>;  <span class="comment">//Error，A中的foo已经final了</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>: B&#123; <span class="comment">// Error，B已经是final</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="28、拷贝初始化和直接初始化"><a href="#28、拷贝初始化和直接初始化" class="headerlink" title="28、拷贝初始化和直接初始化"></a>28、拷贝初始化和直接初始化</h2><ul><li>当用于类类型对象时，初始化的拷贝形式和直接形式有所不同：<ol><li>直接初始化直接调用与实参匹配的构造函数；</li><li>拷贝初始化总是调用拷贝构造函数。<br>拷贝初始化首先使用指定构造函数创建一个临时对象，然后用拷贝构造函数将哪个临时对象拷贝到正在创建的对象。<br>举例：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">str1</span><span class="params">(<span class="string">&quot;I am a string&quot;</span>)</span></span>;   <span class="comment">// 语句1：直接初始化</span></span><br><span class="line"><span class="function">string <span class="title">str2</span><span class="params">(str1)</span></span>;              <span class="comment">// 语句2：直接初始化，str1是已经存在的对象，直接调用拷贝构造函数进行初始化</span></span><br><span class="line">string str3 = <span class="string">&quot;I am a string&quot;</span>;  <span class="comment">// 语句3：拷贝初始化，先为后者创建临时对象，再把临时对象作为参数，使用拷贝构造函数构造str3</span></span><br><span class="line">string str4 = str1;             <span class="comment">// 语句4：拷贝初始化，这里相当于隐式调用拷贝构造函数，而不是调用赋值运算符函数</span></span><br></pre></td></tr></table></figure></li></ol></li><li><b>为了提高效率，允许编译器跳过创建临时对象这一步</b>，直接调用构造函数构造要创建的对象，这样就完全等价于直接初始化了（1和3等价）<br>但两种情况要辨别，如果不考虑编译器的话，本质上是不同的。<ul><li>当拷贝构造函数为 private 时：语句3和4在编译时会产生错误</li><li>使用explicit修饰构造函数时：如果构造函数存在隐式转换，编译时会报错。</li></ul></li></ul><blockquote><p>补充 explicit：修饰构造函数时，即可避免构造函数隐式类型转换</p></blockquote><hr><h2 id="29、初始化和赋值的区别"><a href="#29、初始化和赋值的区别" class="headerlink" title="29、初始化和赋值的区别"></a>29、初始化和赋值的区别</h2><ul><li>对于简单类型来说，初始化和赋值没什么区别</li><li>对于类和复杂数据类型来说，可以举例如下：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="type">int</span> num1, num2;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">A</span>(<span class="type">int</span> a = <span class="number">0</span>, <span class="type">int</span> b = <span class="number">0</span>):<span class="built_in">num1</span>(a), <span class="built_in">num2</span>(b)&#123;&#125;</span><br><span class="line">  <span class="built_in">A</span>(<span class="type">const</span> A &amp;a)&#123;&#125;</span><br><span class="line"></span><br><span class="line">  A&amp; <span class="keyword">operator</span> = (<span class="type">const</span> A &amp;a)&#123;</span><br><span class="line">    num1 = a.num1 + <span class="number">1</span>;</span><br><span class="line">    num2 = a.num2 + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="function">A <span class="title">a</span><span class="params">(<span class="number">1</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">  A a1 = a; <span class="comment">// 拷贝初始化操作，调用拷贝构造函数</span></span><br><span class="line">  A b;</span><br><span class="line">  b = a;  <span class="comment">//赋值操作，对象a中，num1 = 1， num2 = 2；对象b中，num1 = 2, num2 = 2</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="30、extern”C”的用法"><a href="#30、extern”C”的用法" class="headerlink" title="30、extern”C”的用法"></a>30、extern”C”的用法</h2><p>为了能够正确的在C++代码中调用C语言的代码：<br>在程序中加上extern”C”后，相当于告诉这个编译器这部分代码是C写的，要用C语言编译，而不是CPP；</p><p>使用extern”C”的情形：</p><ol><li>C++代码中调用C语言代码</li><li>在C++中的头文件中使用</li><li>在多人协同开发时，可能有人擅长C语言，有人CPP</li></ol><p>举例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#idndef __MY_HANDLE_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __MY_HANDLE_H__</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span>&#123;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">int</span> <span class="type">result_t</span>;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="type">void</span>* <span class="type">my_handle_t</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">my_handle_t</span> <span class="title">create_handle</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* name)</span></span>;</span><br><span class="line">  <span class="function"><span class="type">result_t</span> <span class="title">operate_on_handle</span><span class="params">(<span class="type">my_handle_t</span> handle)</span></span>;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">close_handle</span><span class="params">(<span class="type">my_handle_t</span> handle)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>综上：<br><b>在C语言的头文件中，对其外部函数只能指定位extern类型</b><br><b>C语言中不支持extern”C”声明，在.c文件中包含了extern”C”时会出现编译语法错误。</b><br>所以，extern”C”全部都放在与 CPP 程序相关文件或头文件中。</p><p>总结：</p><ol><li><p>C++ 调用 C 函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// xx.h</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="type">int</span> <span class="title">add</span><span class="params">(...)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// xx.c</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// xx.cpp</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span>&#123;</span><br><span class="line">  <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;xx.h&quot;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>C调用C++函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// xx.h</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span>&#123;</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// xx.cpp</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// xx.c</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="type">int</span> <span class="title">add</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="31、野指针和悬空指针"><a href="#31、野指针和悬空指针" class="headerlink" title="31、野指针和悬空指针"></a>31、野指针和悬空指针</h2><p>都是指向无效内存区域（这里的无效指的是“不安全不可控”）的指针，访问行为将会导致未定义行为。</p><ul><li><p>野指针：没有被初始化过的指针</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> *p; <span class="comment">// 未初始化</span></span><br><span class="line">  std::cout &lt;&lt; *p &lt;&lt; std::endl;   <span class="comment">//未初始化就能被使用</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，为了防止出错，对于指针初始化时都是赋值为<code>nullptr</code>，这样在使用编译器就会直接报错，产生非法内存访问。</p></li><li><p>悬空指针：指针最初指向的内存已经被释放了的一种指针</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> *p = <span class="literal">nullptr</span>;</span><br><span class="line">  <span class="type">int</span> *p2 = <span class="keyword">new</span> <span class="type">int</span>;</span><br><span class="line">  p = p2;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span> p2;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，p和p2就是悬空指针，指向的内存已经被释放。继续使用这两个指针，行为不可预料。<br>需要设置：<code>p = p2 = nullptr</code>。否则，继续使用会导致编译器直接报错。【因此避免悬空指针比较麻烦】<br>C++引入了智能指针，C++智能指针的本质就是避免悬空指针的产生。</p></li></ul><blockquote><p>小总结：<br><b>产生原因及解决办法</b><br>野指针：指针变量未及时初始化 &#x3D;&gt; 定义指针变量及时初始化，要么置空。<br>悬空指针：指针free或delete后没有及时置空 &#x3D;&gt; 释放操作后立即置空。</p></blockquote><hr><h2 id="32、C和C-的类型安全"><a href="#32、C和C-的类型安全" class="headerlink" title="32、C和C++的类型安全"></a>32、C和C++的类型安全</h2><p><b>什么是类型安全？</b><br>类型安全很大程度上可以等价为内存安全，类型安全的代码不会试图访问自己没被授权的内存区域。<br>“类型安全”常被用来形容编程语言，其根据在于该编程语言是否提供保障类型安全的机制；<br>“类型安全”也被用来形容某个程序，判别的标准在于该程序是否隐含类型错误。</p><p>类型安全的编程语言和程序之间没有必然联系。<br>看程序员的操作水平，相对安全的Language也可以写出不安全的程序，但没有绝对类型安全语言。</p><ol><li>C的类型安全：<br>C 只在局部上下文中表现出类型安全，比如试图从一种结构体的指针转换为另一种结构体的指针时，编译器会报告错误，除非显式类型转换。<br>然而，C中相当操作是不安全的，如下:<div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>C不安全例子1</span></div>    <div class="xContent"><div class="inner">        <p>printf格式输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;整型输出：%d\n&quot;</span>, <span class="number">10</span>); <span class="comment">// 10</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;浮点输出：%f\n&quot;</span>, <span class="number">10</span>); <span class="comment">// 0.0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中，使用%d控制整型数字的输出，没有问题，但是改为%f时，输出错误【参考IEEE的浮点格式】<br>如果改成%s，运行直接报segmentation fault错误</p>     </div></div>    </div></li></ol><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>C不安全例子2</span></div>    <div class="xContent"><div class="inner">        <p>malloc函数的返回值</p><p>malloc 是 C 中进行内存分配的函数，它的返回类型是void<em>即空类型指针，常常有：<br>char</em> pStr &#x3D; (char*) malloc(100 * sizeof(char));<br>这里明显做了显式类型转换。</p><p>类型匹配尚且没有问题，但是一旦出现int* pInt &#x3D; (int*) malloc(100 * sizeof(char))就很可能出现一些问题，<br>这样的转换C并不会提示错误。</p>     </div></div>    </div><ol start="2"><li>C++的类型安全<br>如果C++使用得当，它将远比C更有类型安全性。<br>相比于C语言，C++提供了一些新的机制保障类型安全：</li></ol><ul><li><p>操作符new返回的指针类型严格与对象匹配，而不是void*</p></li><li><p>C中很多以void*为参数的函数可以改写为C++模板函数，而模板是支持类型检查的</p></li><li><p>引入const关键字代替#define constants，它是有类型、有作用域的，而#define constants只是简单的文本替换</p></li><li><p>一些#define 宏可以被改写为inline函数，结合函数的重载，可在类型安全的前提下支持多种类型，当然改写为模板也能保证类型安全</p></li><li><p>C++提供了dynamic_cast关键字，使得转换过程更加安全，因为dynamic_cast比static_cast设计更多具体的类型检查</p></li></ul><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>使用void*进行类型转换</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> i = <span class="number">5</span>;</span><br><span class="line">  <span class="type">void</span> *pInt = &amp;i;</span><br><span class="line">  <span class="type">double</span> d = (*(<span class="type">double</span>*)pInt);</span><br><span class="line">  cout &lt;&lt; d &lt;&lt; endl;  <span class="comment">// 1.78416e-307</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>不同类型指针之间转换</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child1</span> : <span class="keyword">public</span> Parent&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  <span class="built_in">Child1</span>(<span class="type">int</span> e):<span class="built_in">i</span>(e)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child2</span> : <span class="keyword">public</span> Parent&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="type">double</span> d;</span><br><span class="line">  <span class="built_in">Child2</span>(<span class="type">double</span> e):<span class="built_in">d</span>(e)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="function">Child1 <span class="title">c1</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line">  <span class="function">Child2 <span class="title">c2</span><span class="params">(<span class="number">4.1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  Parent* pp;</span><br><span class="line">  Child1* pc1;</span><br><span class="line"></span><br><span class="line">  pp = &amp;c1;</span><br><span class="line">  pc1 = (Child1*) pp; <span class="comment">// 类型向下转换，强制转换，由于类型仍为Child1*，不造成错误</span></span><br><span class="line">  cout &lt;&lt; pc1-&gt;i &lt;&lt; endl; <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line">  pp = &amp;c2;  </span><br><span class="line">  pc1 = (Child1*) pp; <span class="comment">// 强制转换，且类型发生变化，将造成错误</span></span><br><span class="line">  cout &lt;&lt; pc1-&gt;i &lt;&lt; endl; <span class="comment">// 1717986918</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><p>上述两个例子之所以引起类型不安全问题，是因为使用不得当。<br>例子1：只用了空类型指针void*；<br>例子2：在两个指针类型之间进行强制转换。</p><p>若想保证程序的类型安全性，应尽量避免使用空类型指针void*，尽量不对两种类型指针做强制转换。</p><h2 id="33、C-中的重载、重写（覆盖）和隐藏的区别"><a href="#33、C-中的重载、重写（覆盖）和隐藏的区别" class="headerlink" title="33、C++中的重载、重写（覆盖）和隐藏的区别"></a>33、C++中的重载、重写（覆盖）和隐藏的区别</h2><ol><li><p>重载（Overload）<br>  重载是指在同一范围定义中的同名函数存在重载关系。<br>  特点：函数名相同、参数类型和数目不同。<br>  注意：仅仅依靠返回值区分不同的函数是不可取的。<br>  重载和成员函数是否是虚函数无关。</p>  <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>重载例子</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">fun</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">int</span>)</span></span>;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">double</span>, <span class="type">double</span>)</span></span>;</span><br><span class="line">  <span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">fun</span><span class="params">(<span class="type">char</span>)</span></span>;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>     </div></div>    </div></li><li><p>重写（覆盖）（Override）<br>  重写指的是在派生类中覆盖基类中的同名函数。<br>  重写就是重写函数体，<b>要求基类函数必须是虚函数</b>并且：</p><ul><li><p>与基类的虚函数有相同的参数个数</p></li><li><p>与基类的虚函数有相同的参数类型</p></li><li><p>与基类的虚函数有相同的返回值类型</p></li></ul></li></ol>  <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>重写例子</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;   <span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">public</span> A&#123;   <span class="comment">// 派生类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> a)</span> <span class="keyword">override</span></span>&#123;&#125; <span class="comment">// 重写一般要加override来保证是重写父类的函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>【64位下虚函数表是8B】</p>     </div></div>    </div><p>  重载和重写的区别：<br>    * 重写是父类和子类之间的垂直关系，重载是不同函数之间的水平关系<br>    * 重写要求参数列表相同，重载则要求参数列表不同，返回值不要求<br>    * 重写关系中，调用方法根据对象类型决定；<br>      重载根据调用时实参表与形参表的对应关系来选择函数体。</p><ol start="3"><li>隐藏（hide)<br>  隐藏指的是有些情况下，派生类中的函数屏蔽了基类中的同名函数，包括以下情况：</li></ol><ul><li><p>两个函数参数相同，但是基类函数不是虚函数。<b>和重写的区别在于基类函数是否是虚函数。</b><br>例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;A 中的 fun 函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>: <span class="keyword">public</span> A&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;B 中的 fun 函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  B b;</span><br><span class="line">  b.<span class="built_in">fun</span>(<span class="number">2</span>);   <span class="comment">// 调用B中的fun函数</span></span><br><span class="line">  b.A::<span class="built_in">fun</span>(<span class="number">2</span>);  <span class="comment">// 调用A中fun函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>两个函数参数不同，无论基类函数是不是虚函数，都会被隐藏。<br>和重载的区别在于两个函数不在同一个类中，例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;A 中的fun函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>: <span class="keyword">public</span> A&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">char</span>* a)</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;B 中的fun函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  B b;</span><br><span class="line">  b.<span class="built_in">fun</span>(<span class="number">2</span>); <span class="comment">// 报错，调用的是B中的fun函数，参数类型不对</span></span><br><span class="line">  b.A::<span class="built_in">fun</span>(<span class="number">2</span>);  <span class="comment">//调用A中的fun函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>  <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>补充</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;  <span class="comment">// 虚函数</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;This is A fun&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;This is A add&quot;</span> &lt;&lt; a + b &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;  <span class="comment">// 重写</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;This is B fun&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;  <span class="comment">// 隐藏，由于参数不同</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;This is B add&quot;</span> &lt;&lt; a + a &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">char</span>* b)</span></span>&#123; <span class="comment">// 隐藏，重载</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;This is B add2&quot;</span> &lt;&lt; a + a &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">// 基类指针指向派生类对象时，基类指针可以直接调用到派生类的覆盖函数，也可以通过::调用到基类被覆盖的虚函数;</span></span><br><span class="line">  <span class="comment">// 基类指针只能调用基类的被隐藏函数，无法识别派生类中的隐藏函数。</span></span><br><span class="line"></span><br><span class="line">  A *p = <span class="keyword">new</span> <span class="built_in">B</span>(); <span class="comment">// 基类指针指向派生类对象</span></span><br><span class="line">  p-&gt;<span class="built_in">fun</span>(<span class="number">1</span>);  <span class="comment">// This is B fun 1</span></span><br><span class="line">  p-&gt;A::<span class="built_in">fun</span>(<span class="number">1</span>); <span class="comment">// This is A fun 1</span></span><br><span class="line">  p-&gt;<span class="built_in">add</span>(<span class="number">1</span>, <span class="number">2</span>);  <span class="comment">// This is A add 3</span></span><br><span class="line">  <span class="comment">// p-&gt;add(1);   // Error，基类指针识别的是基类被隐藏函数，类型不匹配</span></span><br><span class="line">  <span class="comment">// p-&gt;B::add(1);  // Error，错误，无法识别子类add函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="34、C-有哪几种构造函数"><a href="#34、C-有哪几种构造函数" class="headerlink" title="34、C++有哪几种构造函数"></a>34、C++有哪几种构造函数</h2><p>C++中的构造函数可以分为4类：</p><ul><li>默认构造函数</li><li>初始化构造函数（有参数和<code>参数列表</code>）</li><li>拷贝构造函数</li><li>移动构造函数（move和右值引用）</li><li>委托构造函数</li><li>转换构造函数<br>例子：<div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>构造函数分类</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Student</span>()&#123;   <span class="comment">// 默认构造函数</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;age = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;num = <span class="number">1000</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Student</span>(<span class="type">int</span> a, <span class="type">int</span> n): <span class="built_in">age</span>(a), <span class="built_in">num</span>(n)&#123;&#125; <span class="comment">// 初始化构造函数，有参数和参数列表</span></span><br><span class="line">  <span class="built_in">Student</span>(<span class="type">const</span> Student&amp; s)&#123;  <span class="comment">// 拷贝构造函数，这里与编译器生成的一致</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;age = s.age;</span><br><span class="line">    <span class="keyword">this</span>-&gt;num = s.num;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Student</span>(<span class="type">int</span> r)&#123; <span class="comment">// 转换构造函数，形参是其他类型变量，且只有一个形参</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;age = r;</span><br><span class="line">    <span class="keyword">this</span>-&gt;num = <span class="number">1002</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ~<span class="built_in">Student</span>()&#123;&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="type">int</span> age;</span><br><span class="line">  <span class="type">int</span> num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  Student s1;           <span class="comment">// 使用默认构造函数</span></span><br><span class="line">  <span class="function">Student <span class="title">s2</span><span class="params">(<span class="number">18</span>, <span class="number">1001</span>)</span></span>; <span class="comment">// 使用初始化构造函数</span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Student <span class="title">s3</span><span class="params">(a)</span></span>;        <span class="comment">// 使用转换构造函数</span></span><br><span class="line">  <span class="function">Student <span class="title">s4</span><span class="params">(s3)</span></span>;       <span class="comment">// 使用拷贝构造函数</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;s1 age: %d, num: %d\n&quot;</span>, s1.age, s1.num);  <span class="comment">// s1 age : 20, num : 1000</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;s2 age: %d, num: %d\n&quot;</span>, s2.age, s2.num);  <span class="comment">// s2 age : 18, num : 1001</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;s3 age: %d, num: %d\n&quot;</span>, s3.age, s3.num);  <span class="comment">// s3 age : 10, num : 1002</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;s4 age: %d, num: %d\n&quot;</span>, s4.age, s4.num);  <span class="comment">// s4 age : 10, num : 1002</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div></li><li>默认构造函数和初始化构造函数在定义类的对象，完成对象的初始化工作</li><li>复制构造函数用于复制本类的对象</li><li>转换构造函数用于将其他类型的变量，隐式转换为本类对象</li></ul><hr><h2 id="35、浅拷贝和深拷贝的区别"><a href="#35、浅拷贝和深拷贝的区别" class="headerlink" title="35、浅拷贝和深拷贝的区别"></a>35、浅拷贝和深拷贝的区别</h2><ul><li><b>浅拷贝</b><br>浅拷贝只是拷贝一个指针，并没有新开辟一个地址，拷贝的指针和原来的指针指向同一块地址<br>如果原来的指针所指向的资源释放了，那么再释放浅拷贝的指针的资源就会出现错误</li><li><b>深拷贝</b><br>深拷贝不仅拷贝值，还开辟出一块新的空间用来存放新的值，即使原先的对象被析构掉，释放了内存也不会影响到深拷贝的值。<br>在自己实现拷贝赋值的时候，如果有指针变量的话还是要自己实现深拷贝的。</li></ul><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>浅拷贝和深拷贝</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="type">int</span> num;</span><br><span class="line">  <span class="type">char</span> *name;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Student</span>()&#123;</span><br><span class="line">    name = <span class="keyword">new</span> <span class="built_in">char</span>(<span class="number">20</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Student&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  ~<span class="built_in">Student</span>()&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;~Student&quot;</span> &lt;&lt; &amp;name &lt;&lt; endl;  <span class="comment">// 指针的地址</span></span><br><span class="line">    <span class="keyword">delete</span> name;</span><br><span class="line">    name = <span class="literal">nullptr</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Student</span>(<span class="type">const</span> Student&amp; s)&#123;  <span class="comment">// 拷贝构造函数</span></span><br><span class="line">    <span class="comment">// 浅拷贝：对象的name和传入对象的name指向相同的地址</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;name = s.name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 深拷贝，创建出一块新的内存空间给当前对象的name</span></span><br><span class="line">    <span class="comment">// name = new char(20);</span></span><br><span class="line">    <span class="comment">// memcpy(name, s.name, strlen(s.name));</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;copy Student&quot;</span> &lt;&lt; endl；</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#123; <span class="comment">// 让s1和s2变成局部对象，方便测试</span></span><br><span class="line">      Student s1;</span><br><span class="line">      <span class="function">Student <span class="title">s2</span><span class="params">(s1)</span></span>; <span class="comment">// 复制对象</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 浅拷贝执行结果：</span></span><br><span class="line"><span class="comment">// Student</span></span><br><span class="line"><span class="comment">// copy Student</span></span><br><span class="line"><span class="comment">// ~Student 0x7fffed0c3ec0</span></span><br><span class="line"><span class="comment">// ~Student 0x7fffed0c3ec0</span></span><br><span class="line"><span class="comment">// *** Error in ......  由于内存两次delete</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 深拷贝执行结果：</span></span><br><span class="line"><span class="comment">// Student</span></span><br><span class="line"><span class="comment">// copy Student</span></span><br><span class="line"><span class="comment">// ~Student 0x7fffebca9fb0</span></span><br><span class="line"><span class="comment">// ~Student 0x7fffebca9fc0</span></span><br></pre></td></tr></table></figure>     </div></div>    </div><p>从执行结果可以看出：<br>浅拷贝在对象的拷贝创建时存在风险，即被拷贝的对象析构释放资源之后，拷贝对象析构时会再次释放一个已经释放的资源，<br>深拷贝的结果是两个对象之间没有任何关系，各自成员地址不同。</p><hr><h2 id="36、内联函数和宏定义的区别"><a href="#36、内联函数和宏定义的区别" class="headerlink" title="36、内联函数和宏定义的区别"></a>36、内联函数和宏定义的区别</h2><ul><li><p>在使用时，宏只做了简单字符串替换（编译前）。<br>内联函数可以进行参数类型检查（编译时），且具有返回值。</p></li><li><p>内联函数在编译时直接将函数代码嵌入到目标代码中，省去函数调用的开销来提高执行效率；<br>而且进行参数类型检查，具有返回值，可以实现重载</p></li><li><p>宏定义时要注意书写（参数要括起来），否则容易出现歧义，内联函数不会出现歧义</p></li><li><p>内联函数有类型检测、语法判断等，宏定义没有</p></li></ul><blockquote><p>内联函数适用场景：</p><ul><li><p>适用宏定义的地方都可以使用内联函数</p></li><li><p>作为类成员接口来读写类的私有成员或者保护成员可以提高效率</p></li></ul></blockquote><h2 id="37、public-x2F-protected-x2F-private访问和public-x2F-protected-x2F-private继承权限的区别"><a href="#37、public-x2F-protected-x2F-private访问和public-x2F-protected-x2F-private继承权限的区别" class="headerlink" title="37、public&#x2F;protected&#x2F;private访问和public&#x2F;protected&#x2F;private继承权限的区别"></a>37、public&#x2F;protected&#x2F;private访问和public&#x2F;protected&#x2F;private继承权限的区别</h2><ul><li><p>public 的变量和函数在类的内部和外部都可以使用</p></li><li><p>protected 的变量和函数只能在类的内部和其派生类中访问【protected是针对继承而言的】</p></li><li><p>private 修饰的元素只能在类内访问</p></li></ul><ol><li>访问权限<br>派生类可以继承基类中除了构造&#x2F;析构、赋值运算符重载函数之外的成员<br>但这些成员的访问属性在派生过程中也是可以调整的，访问权限如下：<br>【注意外部访问不是真正的外部访问，而是在<b>通过派生类的对象对基类成员的访问</b>】</li></ol><img src="/2022/03/02/cpp/PrivateProtectedPublic.png" class="" title="继承和访问权限对照表"><p>派生类<b>对基类成员</b>的访问形象有如下两种：</p><ul><li>内部访问：由派生类中新增的成员函数对继承来的成员的访问</li><li><b>外部访问</b>：在派生类外部，通过派生类对象对继承来的成员的访问</li></ul><ol start="2"><li>继承权限</li></ol><ul><li><p><b>public继承</b><br>公有继承的特点是：<br>  基类的<code>公有成员</code>和<code>保护成员</code>作为派生类的成员时，都<b>保持原有的状态</b><br>  基类的<code>私有成员</code>仍然是私有的，不能被这个派生类的子类所访问</p></li><li><p><b>protected继承</b><br>保护继承的特点是：<br>  基类的<code>公有成员</code>和<code>保护成员</code>都成为派生类的<b>保护成员</b>，并且只能被它的派生类成员函数或友元函数访问。<br>  基类的<code>私有成员</code>仍然是私有的，访问规则如下：</p><img src="/2022/03/02/cpp/ProtectedInherit.png" class="" title="保护继承"></li><li><p><b>private继承</b><br>私有继承的特点是：<br>  基类的<code>公有成员</code>和<code>保护成员</code>都成为派生类的私有成员，并不被它的派生类的子类所访问，<br>  基类的成员只能由自己派生类访问，无法再往下继承，访问规则如下表：</p><img src="/2022/03/02/cpp/PrivateInherit.png" class="" title="私有继承"></li></ul><p>总结：</p><ol><li><p>访问权限</p><table><thead><tr><th align="left">访问权限</th><th align="left">外部</th><th align="left">派生类</th><th align="left">内部</th></tr></thead><tbody><tr><td align="left">public</td><td align="left">√</td><td align="left">√</td><td align="left">√</td></tr><tr><td align="left">protected</td><td align="left">×</td><td align="left">√</td><td align="left">√</td></tr><tr><td align="left">private</td><td align="left">×</td><td align="left">×</td><td align="left">√</td></tr></tbody></table></li><li><p>继承权限</p></li><li><p>派生类继承自基类的成员权限有四种状态：public、protected、private、不可见</p></li><li><p>派生类对基类成员的访问权限取决于两点：一、继承方式；二、基类成员在基类中的访问权限</p></li><li><p>派生类对基类成员的访问权限是取以上两点中的更小的访问范围（除了private继承方式遇到private成员是不可见）<br>例如：</p><ul><li>public 继承 + private 成员 &#x3D;&gt; private</li><li>private 继承 + protected 成员 &#x3D;&gt; private</li><li>private 继承 + private 成员 &#x3D;&gt; 不可见</li></ul></li></ol><h2 id="38、如何用代码判断大小端存储"><a href="#38、如何用代码判断大小端存储" class="headerlink" title="38、如何用代码判断大小端存储"></a>38、如何用代码判断大小端存储</h2><p>  大端存储：字数据的高字节存储在低地址中<br>  小端存储：字数据的低字节存储在低地址中</p><p>  例如：32bit数字0x12345678</p><ul><li><p>小端模式中的存储方式为：</p><table><thead><tr><th align="left">内存地址</th><th align="left">0x4000</th><th align="left">0x4001</th><th align="left">0x4002</th><th align="left">0x4003</th></tr></thead><tbody><tr><td align="left">存放内容</td><td align="left">0x78</td><td align="left">0x56</td><td align="left">0x34</td><td align="left">0x12</td></tr></tbody></table></li><li><p>大端模式中的存储方式为：</p><table><thead><tr><th align="left">内存地址</th><th align="left">0x4000</th><th align="left">0x4001</th><th align="left">0x4002</th><th align="left">0x4003</th></tr></thead><tbody><tr><td align="left">存放内容</td><td align="left">0x12</td><td align="left">0x34</td><td align="left">0x56</td><td align="left">0x78</td></tr></tbody></table></li></ul><p>大端模式更贴近于人类的阅读习惯<br>小端模式更有利于计算机读取数据</p><p>如何在代码中判断大小端存储？</p><ol><li><p>判断大小端存储 —— 强制类型转换</p><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>强制类型转换</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> a = <span class="number">0x1234</span>; <span class="comment">// 由于int和char的长度不同，借助int型转char类型，只会留下低地址部分</span></span><br><span class="line">  <span class="type">char</span> c = (<span class="type">char</span>) a;</span><br><span class="line">  <span class="keyword">if</span>(c == <span class="number">0x12</span>) cout &lt;&lt; <span class="string">&quot;Big end&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">if</span>(c == <span class="number">0x34</span>) cout &lt;&lt; <span class="string">&quot;Little end&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div></li><li><p>判断大小端存储 —— 使用union联合体</p><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>使用union联合体</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// union联合体的重叠式存储，endian联合体占用内存的空间为每个成员字节长度的最大值</span></span><br><span class="line"><span class="keyword">union</span> <span class="title class_">endian</span>&#123;</span><br><span class="line">  <span class="type">int</span> a;</span><br><span class="line">  <span class="type">char</span> ch;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  endian value;</span><br><span class="line">  value.a = <span class="number">0x1234</span>;</span><br><span class="line">  <span class="comment">// a 和 ch共用4字节的内存空间</span></span><br><span class="line">  <span class="keyword">if</span>(value.ch == <span class="number">0x12</span>)  cout &lt;&lt; <span class="string">&quot;Big endian&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">if</span>(value.ch == <span class="number">0x34</span>)  cout &lt;&lt; <span class="string">&quot;Little endian&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div></li></ol><h2 id="39、volatile、mutable和explicit关键字的用法"><a href="#39、volatile、mutable和explicit关键字的用法" class="headerlink" title="39、volatile、mutable和explicit关键字的用法"></a>39、volatile、mutable和explicit关键字的用法</h2><ol><li>volatile<br>volatile 关键字是一种类型修饰符，<b>用它声明的类型变量表示可以被某些编译器位置的因素更改</b><br>例如：操作系统、硬件或者其他线程等。<br>遇到这个关键字声明的变量，编译器对访问该变量的代码就不再进行优化，从而可以提供对特殊地址的稳定访问。</li></ol><p>当要求使用volatile声明的变量的值的时候，<b>系统总是重新从它所在的内存读取数据</b><br>即使它前面的指令刚刚从该处读取过数据。</p><p><b>volatile定义变量的值是易变的，每次用到这个变量的值的时候都要去重新读取这个变量的值，而不是读寄存器内的备份。<br>多线程中被几个任务共享的变量需要定义为volatile类型。</b></p><blockquote><p>注意：使用volatile定义常量的话，使用指针可以修改常量值。</p></blockquote><ul><li>volatile指针<br>volatile 指针和 const修饰词类似，const 有常量指针和指针常量的说法，volatile 也有相应的概念。<ul><li><p>修饰由指针指向的对象、数据是const或volatile的：</p><blockquote><p>const char* cpch;<br>volatile char* vpch;</p></blockquote></li><li><p>指针自身的值 —— 一个代表地址的整数变量，是const或volatile的</p><blockquote><p>char* const pchc;<br>char* volatile pchv;</p></blockquote></li></ul></li></ul><p>注意：</p><ul><li><p>可以把一个非volatile int赋给volatile int，但是不能把非volatile<b>对象</b>赋给一个volatile对象</p></li><li><p>除了基本类型外，对用户定义类型也可以用volatile类型进行修饰</p></li><li><p>C++中一个有volatile标识符的类只能访问它接口的子集，一个由类的实现者控制的子集。用户只能用const_cast来获得对类型接口的完全访问。<br>此外，volatile和const一样会从类传递到它的成员。</p></li></ul><p><b>多线程下的volatile</b><br>  有些变量是用volatile关键字声明的。<br>  当两个线程都要用到某一个变量且该变量的值会被改变时，应该使用volatile声明。<br>  <b>该关键字的作用是防止优化编译器将变量从内存装入CPU寄存器中</b>。<br>  如果变量被装入寄存器，那么两个线程有可能一个使用内存中的变量，一个使用寄存器中的变量，导致程序错误执行。<br>  volatile的意思是让编译器每次操作该变量时一定要从内存中真正取出，而不是使用寄存器中现有的值。</p><ol start="2"><li><p>mutable（可变的，易变的）<br>  和constant是反义词。<br>  C++中，mutable也是为了突破const的限制而设置的。<br>  被mutable修饰的变量，将永远处于可变的状态，即使在一个const函数中。<br>  如果在类的成员函数不会不会改变对象的状态，则成员函数一般会声明为const。<br>  有些时候，<b>我们要在const函数里修改一些和状态无关的数据成员，则该函数就应该被mutable修饰，并且放在函数后面关键字位置。</b></p>  <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>样例</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">  <span class="type">int</span> m_A;</span><br><span class="line">  <span class="keyword">mutable</span> <span class="type">int</span> m_B;    <span class="comment">// 特殊对象，在常函数中也可以修改</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">()</span> <span class="type">const</span></span>&#123;   <span class="comment">// 在函数中不可以修改this指针指向的值，this变成指向常量的指针</span></span><br><span class="line">    m_A = <span class="number">10</span>; <span class="comment">// 错误，不可修改，this指向常量</span></span><br><span class="line">    m_B = <span class="number">20</span>; <span class="comment">// 正确，mutable修饰</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">  <span class="type">int</span> m_A;</span><br><span class="line">  <span class="keyword">mutable</span> <span class="type">int</span> m_B;  <span class="comment">// 特殊变量，在常函数中值也可以修改</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="type">const</span> Animal aa;</span><br><span class="line">  aa.m_A = <span class="number">10</span>;  <span class="comment">// 错误</span></span><br><span class="line">  aa.m_B = <span class="number">200</span>; <span class="comment">// 正确，由mutable 修饰</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div></li><li><p>explicit<br>explicit 关键字用来修饰类的构造函数，被修饰的构造函数的类，不能发生相应的隐式类型转换。<br>只能<b>以显式的方式类型转换</b>，例如：</p></li></ol><ul><li>explicit 关键字只能用于类内部的<code>构造函数</code>声明上</li><li>explicit 关键字作用于单个参数的构造函数</li><li>被 explicit 修饰的构造函数的类，不能发生相应的隐式类型转换</li></ul><hr><h2 id="40、什么情况下会调用拷贝构造函数"><a href="#40、什么情况下会调用拷贝构造函数" class="headerlink" title="40、什么情况下会调用拷贝构造函数"></a>40、什么情况下会调用拷贝构造函数</h2><ul><li>用类的一个实例化对象去初始化另一个对象的时候</li><li>函数的参数是类的对象时（非引用传递）</li><li>函数的返回值是函数体内局部对象的类的对象时，此时虽然发生（Named return Value 优化）NRV优化。<br>由于返回方式是值传递，所以会在返回值的地方调用拷贝构造函数。</li></ul><blockquote><p>其中：第三种情况在Linux g++下不会发生拷贝构造函数，不仅如此即使返回局部对象的引用，依然不会发生拷贝构造函数</p><p>总结：NRV优化情况下，Linux g++环境不管是返回值还是返回引用都不会发生拷贝构造函数。<br>     Windows VS2019在值返回情况下发生拷贝构造函数，引用返回方式则不会发生拷贝构造函数。</p></blockquote><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>VS2019下进行实验</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">A</span>()&#123;&#125;</span><br><span class="line">  <span class="built_in">A</span>(<span class="type">const</span> A&amp; a)&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Copy constructor is called&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  ~<span class="built_in">A</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">useClassA</span><span class="params">(A a)</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">A <span class="title">getClassA</span><span class="params">()</span></span>&#123;  <span class="comment">// 此时会发生拷贝构造函数的调用，虽然发生NRV优化，但是依然调用拷贝构造函数</span></span><br><span class="line">  A a;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">A&amp; <span class="title">getClassA2</span><span class="params">()</span></span>&#123;  <span class="comment">// VS2019，编译器NRV优化，不调用拷贝构造函数</span></span><br><span class="line">  A a;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  A a1, a3, a4;</span><br><span class="line">  A a2 = a1;  <span class="comment">// 调用拷贝构造函数，用一个实例对象去初始化另一个对象</span></span><br><span class="line">  <span class="built_in">useClassA</span>(a1);  <span class="comment">// 调用拷贝构造函数，函数的参数是实例的对象</span></span><br><span class="line">  a3 = <span class="built_in">getClassA</span>(); <span class="comment">// 发生NRV优化，但是值返回，依然会有拷贝构造函数的调用，返回值是局部变量的情况下</span></span><br><span class="line">  a4 = <span class="built_in">getClassA2</span>();  <span class="comment">// 发生NRV优化，且引用返回自身，不会调用拷贝构造函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><blockquote><ol><li>一个实例对象去初始化另一个实例对象，调用拷贝构造函数</li><li>调用函数时，先根据传入实参产生临时对象，用拷贝构造函数初始化该临时对象，与形参对应</li><li>执行return，产生临时对象，调用拷贝构造函数把返回对象拷贝给临时对象，函数执行完先析构局部变量再析构临时对象。</li></ol></blockquote><hr><h2 id="41、C-有几种类型new"><a href="#41、C-有几种类型new" class="headerlink" title="41、C++有几种类型new"></a>41、C++有几种类型new</h2><p>有 plain new&#x2F;nothrow new以及placement new</p><ol><li>plain new<br>  普通的new，即常用的new，定义如下：  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(std::<span class="type">size_t</span>)</span> <span class="title">throw</span><span class="params">(std::bad_alloc)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="type">void</span> *)</span>  <span class="title">throw</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li></ol><p>  因此 plain new 在空间分配失败的情况下，抛出异常std::bad_alloc而非nullptr，因此不能通过判断nullptr来判断是否分配成功<br>  <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>例子</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="type">char</span> *p = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">10e11</span>];</span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">catch</span> (<span class="type">const</span> std::bad_alloc &amp;ex)&#123;</span><br><span class="line">    cout &lt;&lt; ex.<span class="built_in">what</span>() &lt;&lt; endl;    <span class="comment">// bad allocation</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div></p><ol start="2"><li><p>nothrow new<br>  nothrow new 在空间分配失败的情况下不抛出异常，而是返回nullptr，定义如下：</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> * <span class="keyword">operator</span> <span class="title">new</span> <span class="params">(std::<span class="type">size_t</span>, <span class="type">const</span> std::<span class="type">nothorw_t</span>&amp;)</span>  <span class="title">throw</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="type">void</span>*)</span> <span class="title">throw</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>  <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>例子</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="type">char</span> *p = <span class="built_in">new</span>(nothrow) <span class="type">char</span>[<span class="number">10e11</span>];</span><br><span class="line">  <span class="keyword">if</span>(p == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Alloc failed&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span> p;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div></li><li><p>placement new<br>这种new允许在一块<b>已经分配成功的内存上</b>重新构造对象或对象数组。<br>placement new 不用担心内存分配失败，因为根本不分配内存，所做的唯一事情就是调用对象的构造函数。定义如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span>, <span class="type">void</span>*)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="type">void</span>*, <span class="type">void</span>*)</span></span>;</span><br></pre></td></tr></table></figure></li></ol><p>使用placement new注意：</p><ul><li>placement new 的主要用途就是反复使用一块较大的动态分配的内存来构造不同类型的对象或其数组</li><li>placement new 构造起来的对象数组，要显式地调用他们的析构函数来销毁（析构函数并不释放内存）<br>不能使用delete，因为placement new 构造起来的对象或数组大小并不一定等于原来分配的内存大小。<br>使用delete会造成内存泄漏或者之后释放内存时出现运行时错误。</li></ul><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>例子</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ADT</span>&#123;</span><br><span class="line">  <span class="type">int</span> i, j;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">ADT</span>()&#123;</span><br><span class="line">    i = <span class="number">10</span>, j = <span class="number">100</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ADT construct i = &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;j = &quot;</span> &lt;&lt; j &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  ~<span class="built_in">ADT</span>()&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ADT destruct&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="type">char</span> *p = <span class="built_in">new</span>(nothrow)  <span class="type">char</span>[<span class="keyword">sizeof</span> ADT + <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">if</span>(p == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;alloc failed&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  ADT *q = <span class="built_in">new</span>(p) ADT;  <span class="comment">// placement new 只要p所指对象空间足够ADT创建即可</span></span><br><span class="line">  <span class="comment">// delete q —— 错误，不能在此处调用delete q;</span></span><br><span class="line">  q-&gt;ADT::~<span class="built_in">ADT</span>(); <span class="comment">// 显式调用析构函数</span></span><br><span class="line">  <span class="keyword">delete</span>[] p;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果：</span></span><br><span class="line"><span class="comment">// ADT construct i = 10, j = 100</span></span><br><span class="line"><span class="comment">// ADT destruct</span></span><br></pre></td></tr></table></figure>     </div></div>    </div><hr><h2 id="42、C-的异常处理方法"><a href="#42、C-的异常处理方法" class="headerlink" title="42、C++的异常处理方法"></a>42、C++的异常处理方法</h2><hr><h2 id="43、static的用法和作用？"><a href="#43、static的用法和作用？" class="headerlink" title="43、static的用法和作用？"></a>43、static的用法和作用？</h2><ol><li><p>隐藏（static函数，static变量均可）<br>  当同时编译多个文件时，所有未加static前缀的全局变量和函数都有全局可见性</p></li><li><p>保持变量内容持久（static变量的记忆功能和全局生存期）<br>  存储在静态数据区的变量会在程序刚开始运行时就完成初始化，也是唯一一次初始化。<br>  静态存储区：全局变量和static变量【static控制变量可见范围，总之还是隐藏】</p></li><li><p>默认初始化为0（static变量）<br>  静态数据区的两种变量都有这样的特性</p></li><li><p>C++中类成员声明 static</p></li><li><p>函数体内static变量的作用范围为该函数体，不同于auto变量，该变量的内存只被分配一次，因此其值在下次调用时仍维持上次的值。</p></li><li><p>模块内static全局变量可以被模块内所有函数访问，但不能被模块外其他函数访问。</p></li><li><p>在模块内的static函数只可被这一模块内的其他函数调用，这个函数的使用范围被限制在声明它的模块内；</p></li><li><p>在类中的static成员变量属于整个类所拥有，对类的虽有对象只有一份拷贝。</p></li><li><p>在类中的static成员函数属于整个类所拥有，这个函数不接收this指针，因而只能访问类的static成员变量。</p></li><li><p>static类对象必须要在类外进行初始化，static修饰的变量先于对象存在，所以static修饰的变量要在类外初始化。</p></li><li><p>由于static修饰的类成员属于类，不属于对象，因此static类成员函数是没有this指针的，this指针是指向本对象的指针。</p></li><li><p>static成员函数不能被virtual修饰，static成员不属于任何对象或实例，因此加上virtual没有任何实际意义<br>同时，virtual虚函数是要通过this指针调用虚函数表：this-&gt;vptr-&gt;ctable-&gt;virtual function</p></li></ol><hr><h2 id="44、指针和const的用法"><a href="#44、指针和const的用法" class="headerlink" title="44、指针和const的用法"></a>44、指针和const的用法</h2><ol><li><p>当const修饰指针时，由于const的位置不同，它的修饰对象会有所不同。</p></li><li><p>int *const p2中const修饰 p2 的值【 <em>修饰int】，所以理解为 p2 的值不可改变，即 p2 只能指向固定的一个变量地址，<br>可以通过</em>p2读写这个变量的值。<br>顶层指针表示指针本身是一个常量。</p></li><li><p>int const *p1或者const int *p1两种情况中const修饰 *p1，所以理解为 <em>p1的值不可以改变，<br>即不可以给</em>p1赋值改变p1指向变量的值，但可以通过给p赋值不同的地址改变这个指针指向。</p><p>底层指针表示指针所指向的变量是一个常量。</p></li></ol><hr><h2 id="45、形参和实参的区别？"><a href="#45、形参和实参的区别？" class="headerlink" title="45、形参和实参的区别？"></a>45、形参和实参的区别？</h2><ol><li><p>形参变量只有在被调用时才分配内存单元，在调用结束时，即刻释放所分配的内存单元。<br>因此，形参只有在函数内部有效，函数调用结束返回主调函数后不能使用该形参变量。</p></li><li><p>实参可以是常量、变量、表达式、函数等，无论实参是那种类型的变量，在进行函数调用时，都必须具有确定的值，以便把这些值传送给形参。<br>因此应预先用赋值，输入等办法使实参获得确定值，会产生一个临时变量。</p></li><li><p>实参和形参在数量上，类型上，顺序上应严格一致，否则会发生“类型不匹配”错误</p></li><li><p>函数调用中发生的数据传送是单向的 —— 只能把实参的值送给形参，不能把形参的值反向传给实参。<br>在函数调用过程中，形参值发生改变，形参中的值不会变化。</p></li><li><p>当形参和实参不是指针类型时，在该函数运行时，形参和实参是不同的变量，他们在内存中位于不同的位置。<br>形参将实参的内容复制一份，在该函数运行结束时形参被释放，实参内容不会改变。</p></li></ol><hr><h2 id="46、值传递、指针传递、引用传递的区别和效率"><a href="#46、值传递、指针传递、引用传递的区别和效率" class="headerlink" title="46、值传递、指针传递、引用传递的区别和效率"></a>46、值传递、指针传递、引用传递的区别和效率</h2><ol><li><p>值传递：有一个形参向函数所属的栈拷贝数据的过程，如果值传递的对象是类对象或大结构体对象，将耗费一定的时间和空间（拷贝构造）。</p></li><li><p>指针传递：同样有一个形参想函数所属的栈拷贝数据的过程。但拷贝的数据固定是一个n字节的地址（传值，不过传地址值）。</p></li><li><p>引用传递：同样有上述数据拷贝过程，但其是针对地址的，相当于为该数据所在的地址起了一个别名（传地址）。</p></li><li><p>效率上讲，指针传递和引用传递比值传递效率高。一般主张<code>引用传递</code>，代码逻辑上更加紧凑、清晰。</p></li></ol><hr><h2 id="47、静态变量什么时候初始化"><a href="#47、静态变量什么时候初始化" class="headerlink" title="47、静态变量什么时候初始化"></a>47、静态变量什么时候初始化</h2><ol><li><p>初始化只有一次，但是可以多次赋值，在主程序之前，编译器已经为其分配好了内存。</p></li><li><p>静态局部变量和全局变量一样，数据都存放在全局区域，所以在主程序直线，编译器已经为其分配好了内存，但在C和C++中静态局部变量的初始化结点也有不同。</p></li><li><p>在C中，初始化发生在代码执行之前，编译阶段<b>分配好内存之后，就会进行初始化</b>，所以我们看到在C语言中<code>无法使用变量</code>对静态局部变量进行初始化，在程序运行结束，变量所处的全局内存会被回收。</p></li><li><p>在C++中，初始化时在执行相关代码才会进行初始化，主要是C++引入对象后，要进行初始化不许执行相应构造&#x2F;析构函数，在其中经常会需要进行某些程序中需要进行的特定操作，并非简单地分配内存。所以C++标准定为全局或静态对象是有首次用到时才会进行构造，并通过atexit()来管理。在程序结束，按照构造顺序反方向进行逐个析构。所以C++中<code>可以使用变量</code>对静态局部变量进行初始化的。</p></li></ol><hr><h2 id="48、const关键字的作用有哪些？"><a href="#48、const关键字的作用有哪些？" class="headerlink" title="48、const关键字的作用有哪些？"></a>48、const关键字的作用有哪些？</h2><ol><li><p>阻止一个变量被改变，可以使用const关键字。在定义该const变量时，通常需要对其进行初始化，因为以后没机会改变他了（实际上有）</p></li><li><p>对指针来说，可以指定指针本身为const，也可以指定指针所指的数据为const，或二者同时指定位const</p></li><li><p>在一个函数声明中，const可以修饰形参，表明它是一个输入参数，在函数内部不能改变其值</p></li><li><p>对于类的成员函数，若指定其为const类型，则表明其是一个常函数，不能修改类的成员变量，类的常对象只能访问类的常成员函数。</p></li><li><p>对于类的成员函数，有时候必须指定其返回值为const类型，以使得其返回值不为“左值”</p></li><li><p>const成员函数可以访问非const对象的非const数据成员、const数据成员，也可以访问const对象内的所有数据成员。</p></li><li><p>非const成员函数可以访问非const对象的非const数据成员、const数据成员，但不能访问const对象的任意数据成员。</p></li><li><p>一个没有明确声明为const的成员函数被看做是<code>将要修改对象中数据成员</code>的函数,<br>而且编译器不允许它为一个const对象所调用，因此const对象只能调用const成员函数。</p></li><li><p>const类型变量可以通过类型转换符const_cast将const类型转换为非const类型</p></li><li><p>const类型变量必须定义的时候进行初始化，因此也导致如果类的成员变量有const类型的变量，那么该变量必须在类的初始化列表中进行初始化。</p></li><li><p>对于函数值传递的情况，因为参数传递是通过复制实参创建一个临时变量传递进参数的，函数内只能改变临时变量，但无法改变实参。<br>这个时候无论加不加const都不会对实参产生任何影响。<br>但是在引用或者指针传递函数调用中，因为传进去的是一个引用或指针，这样函数内部可以改变引用或指针所指向的变量<br>这个时候const才是实实在在保护了实参所指向的变量。<br>因为在编译阶段编译器对调用函数的选择是根据实参进行的，所以只有引用传递和指针传递可以用是否加const来重载。<br>一个拥有顶层const的形参无法和另一个没有顶层const的形参区分开来。</p></li></ol><hr><h2 id="49、什么是类的继承？"><a href="#49、什么是类的继承？" class="headerlink" title="49、什么是类的继承？"></a>49、什么是类的继承？</h2><ol><li><p>类与类之间的关系<br>  has-A 包含关系，用以描述一个类由多个部件类构成，实现has-A 关系用类的<code>成员属性</code>表示，即一个类的成员属性是另一个已经定义好的类<br>  use-A 使用关系，一个类使用另一个类，通过类之间的成员函数相互联系，定义友元或者通过传递参数的方式来实现<br>  is-A  继承关系，关系具有传递性；</p></li><li><p>继承的相关概念<br>  所谓的继承就是一个类继承了另一个类的属性和方法，这个新的类包含了上一个类的属性和方法，被称为子类或派生类<br>  被继承的类称为父类或基类</p></li><li><p>继承的特点<br>  子类拥有父类的所有属性和方法，子类可以拥有父类没有的属性和方法，子类对象可以当做父类对象使用</p></li><li><p>继承中的访问控制<br>  public、protected、private</p></li><li><p>继承中的构造和析构函数</p></li><li><p>继承中的兼容性原则</p></li></ol><hr><h2 id="50、从汇编层去解释一下引用"><a href="#50、从汇编层去解释一下引用" class="headerlink" title="50、从汇编层去解释一下引用"></a>50、从汇编层去解释一下引用</h2><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>汇编层解释引用</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">9</span>:      <span class="type">int</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="number">00401048</span>  mov     dword ptr [ebp<span class="number">-4</span>],<span class="number">1</span></span><br><span class="line"><span class="number">10</span>:     <span class="type">int</span> &amp;b = x;</span><br><span class="line"><span class="number">0040104F</span>   lea     eax,[ebp<span class="number">-4</span>]</span><br><span class="line"><span class="number">00401052</span>  mov     dword ptr [ebp<span class="number">-8</span>],eax</span><br></pre></td></tr></table></figure>     </div></div>    </div><p>x 的地址是 ebp-4，b 的地址是ebp-8，因为栈内的变量内存是<code>从高往低</code>进行分配的，所以 b 的地址比 x 的低。<br>lea eax, [ebp-4 ] 这条语句将 x 的地址 ebp-4 放入eax寄存器<br>mov dword ptr [ebp-8 ], eax 这条语句将eax的值放入 b 的地址</p><p>ebp-8中上面两条汇编的作用：将x的地址存入变量b中，这与将某个变量的地址存入指针变量是一样的</p><blockquote><p>总结：引用是通过指针来实现的</p></blockquote><hr><h2 id="51、深拷贝和浅拷贝？-——-参考条目35"><a href="#51、深拷贝和浅拷贝？-——-参考条目35" class="headerlink" title="51、深拷贝和浅拷贝？ —— 参考条目35"></a>51、深拷贝和浅拷贝？ —— 参考条目35</h2><hr><h2 id="52、new和malloc区别？-——-参考条目10"><a href="#52、new和malloc区别？-——-参考条目10" class="headerlink" title="52、new和malloc区别？ —— 参考条目10"></a>52、new和malloc区别？ —— 参考条目10</h2><blockquote><p>补充：new会先调用operator new函数，申请足够的内存（通常底层使用malloc实现）<br>      然后调用类型的构造函数，初始化成员变量，最后返回自定义类型指针。<br>      delete先调用析构函数，然后调用operator delete函数释放内存，（通常底层使用free实现）<br>      即 分配内存 —— 构造函数 —— 析构函数 —— 释放内存</p><p>malloc&#x2F;free是库函数，只能动态地申请和释放内存，无法强制要求其做自定义类型对象构造和析构工作。</p></blockquote><hr><h2 id="53、delete-p、delete-p、allocator都有什么作用？"><a href="#53、delete-p、delete-p、allocator都有什么作用？" class="headerlink" title="53、delete p、delete []p、allocator都有什么作用？"></a>53、delete p、delete []p、allocator都有什么作用？</h2><ol><li><p>动态数组管理 new 一个数组时，[]中必须是一个整数，但是不一定是常量整数，普通数组必须是一个常量整数</p></li><li><p>new 动态数组返回的并不是数据类型，而是一个元素类型的指针</p></li><li><p>delete[] 时，数组中的元组按照逆序的顺序进行销毁</p></li><li><p>new 在内存分配上面有一些局限性，new的机制是将内存分配和对象构造组合在一起，同样delete也是降对象析构和内存释放组合在一起</p></li><li><p>allocator将申请内存和对象构造函数分开来，allocator申请一部分内存，不进行初始化对象，只有需要时才进行初始化操作。</p></li></ol><hr><h2 id="54、new和delete的实现原理，delete是如何知道释放内存大小的？"><a href="#54、new和delete的实现原理，delete是如何知道释放内存大小的？" class="headerlink" title="54、new和delete的实现原理，delete是如何知道释放内存大小的？"></a>54、new和delete的实现原理，delete是如何知道释放内存大小的？</h2><ol><li><p>new简单类型直接调用operator new分配内存；<br>new复杂结构，先调用operator new分配内存，然后在分配的内存上调用构造函数；</p></li><li><p>new[]简单类型计算好大小后调用operator new；<br>new[]复杂结构，先调用operator new[] 分配内存，然后在p的前4个字节输入数组大小n，然后调用n次构造函数，针对复杂类型，new[]会额外存储数组大小</p><ol><li><p>new 表达式调用一个名为operator new(operator new[]) 函数，分配一块足够大的、原始的、未命名的内存空间；</p></li><li><p>编译器运行相应的构造函数以构造这些对象，并为其传入初始值；</p></li><li><p>对象被分配了空间并构造完成，返回一个指向该对象的指针。</p></li></ol></li><li><p>delete 简单数据类型默认只是调用 free函数；<br>delete 复杂数据类型先调用析构函数在调用 operator delete</p></li><li><p>针对简单类型，delete 和 delete[] 等同。<br>假设指针p指向new[]分配的内存，因为要4字节存储数组大小，实际分配的内存地址为 [p-4 ]，系统记录的也是这个地址。<br>delete[] 实际释放的是p-4指向的内存，<b>delete会直接释放p指向的内存，这个内存根本没有被系统记录，所以会崩溃</b></p></li><li><p>需要在new[] 一个对象数组时，需要保存数组的维度，C++的做法是在分配数组空间时多分配了4个字节的大小，专门保存数组的大小<br>在delete[] 时就可以取出这个保存的数，就知道需要调用析构函数多少次了。</p></li></ol><hr><h2 id="55、malloc申请的存储空间能用delete释放吗？"><a href="#55、malloc申请的存储空间能用delete释放吗？" class="headerlink" title="55、malloc申请的存储空间能用delete释放吗？"></a>55、malloc申请的存储空间能用delete释放吗？</h2><p>不能</p><p>malloc&#x2F;free主要是为了兼容C，new&#x2F;delete是完全可以取代malloc&#x2F;free的</p><ul><li><p>malloc&#x2F;free的操作对象都是必须明确大小的，而且不能用在动态类上。<br>new和delete会自动进行类型检查和大小</p></li><li><p>malloc&#x2F;free不能执行构造函数和析构函数，所以动态对象不能用该方法创建&#x2F;销毁</p></li></ul><p>理论上说使用malloc申请的内存是可以通过delete释放的。<br>不过一般不这样写，而且不能保证每个运行程序都正常。</p><hr><h2 id="56、malloc和free的实现原理？"><a href="#56、malloc和free的实现原理？" class="headerlink" title="56、malloc和free的实现原理？"></a>56、malloc和free的实现原理？</h2><ol><li><p>在标准C库中，提供了malloc&#x2F;free函数分配释放内存，这两个函数底层是由brk&#x2F;mmap&#x2F;munmap这些系统调用实现的</p></li><li><p><code>brk</code>是将数据段(.data)的最高地址指针_edata往高地址推，<br><code>mmap</code>是在进程的虚拟地址空间中(堆和栈中间，成为文件映射区域的地方)找一块空闲的虚拟内存。<br>这两种方式都是分配虚拟内存，没有分配物理内存。<br>在一次访问已分配的虚拟地址空间的时候，发生<code>缺页中断</code>，操作系统负责分配物理内存，然后建立虚拟内存和物理内存之间的映射关系；</p></li><li><p>malloc小于128k的内存，使用<code>brk</code>分配内存，将_edata往高地址推；<br>malloc大于128k的内存，使用<code>mmap</code>分配内存，在堆和栈之间找一块空闲内存分配；<br>brk分配的内存需要等到高地址内存释放以后才能释放，而mmap分配的内存可以单独释放。<br>当最高地址空间的空闲内存超过128k（可由M_TRIM_THRESHOLD选项调节）时，执行内存紧缩操作（trim）。<br>在上一个步骤free的时候，发现最高地址空闲内存超过128K，于是内存紧缩。</p></li><li><p>malloc是从堆里面申请内存，也就是说函数返回的指针是指向堆里面的一块内存。<br>操作系统有一个记录空闲内存地址的链表。<br>当操作系统收到程序的申请时，就会遍历该链表，然后寻找第一个空间大于所申请空间的堆结点，然后将该节点从空闲结点链表中删除，并将该节点的空间分配给程序</p></li></ol><hr><h2 id="57、malloc、realloc、calloc的区别"><a href="#57、malloc、realloc、calloc的区别" class="headerlink" title="57、malloc、realloc、calloc的区别"></a>57、malloc、realloc、calloc的区别</h2><ol><li><p>malloc函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> *<span class="title">malloc</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> num_size)</span></span>;</span><br><span class="line"><span class="type">int</span> *p = (<span class="type">int</span> *) <span class="built_in">malloc</span>(<span class="number">20</span> * <span class="built_in">sizeof</span>(<span class="type">int</span>));  <span class="comment">//申请20个int类型的空间</span></span><br></pre></td></tr></table></figure></li><li><p>calloc函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> *<span class="title">calloc</span><span class="params">(<span class="type">size_t</span> n, <span class="type">size_t</span> size)</span></span>;</span><br><span class="line"><span class="type">int</span> *p = (<span class="type">int</span> *)<span class="built_in">calloc</span>(<span class="number">20</span>, <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br></pre></td></tr></table></figure><p>省去了人为空间计算，malloc申请的空间的值是随机初始化的，calloc申请的空间的值是初始化为0的；</p></li><li><p>realloc函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">realloc</span><span class="params">(<span class="type">void</span> *p, <span class="type">size_t</span> new_size)</span></span>;</span><br></pre></td></tr></table></figure><p>给动态分配的空间分配额外的空间，用于扩充容量。</p></li></ol><hr><h2 id="58、类成员初始化方式？构造函数执行顺序？为什么用成员初始化列表快一些？"><a href="#58、类成员初始化方式？构造函数执行顺序？为什么用成员初始化列表快一些？" class="headerlink" title="58、类成员初始化方式？构造函数执行顺序？为什么用成员初始化列表快一些？"></a>58、类成员初始化方式？构造函数执行顺序？为什么用成员初始化列表快一些？</h2><ol><li><p>赋值初始化，通过在函数体内进行赋值初始化<br>初始化列表，在冒号后使用初始化列表进行初始化。</p><p>两种方式主要区别：</p><ul><li><p>对于在函数体中初始化，是在所有数据成员<code>被分配内存空间后</code>进行的。</p></li><li><p>初始化列表是给数据成员分配内存空间时就进行初始化，<br>就是说分配一个数据成员只要冒号后有此数据成员的赋值表达式（此表达式必须是括号赋值表达式）<br>则分配内存空间后在进入函数体之前给数据成员赋值，也就是初始化这个数据成员时，函数体还未执行</p></li></ul></li><li><p>一个派生类构造函数的执行顺序如下：</p></li><li><p>虚拟基类的构造函数（多个虚拟基类则按照继承的顺序执行构造函数）【菱形继承的大基类】</p></li><li><p>基类的构造函数（多个普通基类也按照继承的顺序执行构造函数）</p></li><li><p>类类型的成员对象的构造函数（按照初始化顺序）</p></li><li><p>派生类自己的构造函数</p></li><li><p>方法一是在构造函数当中做赋值的操作<br>方法二是做纯粹的初始化的操作。<br>众所周知：C++的赋值操作是会产生临时对象的，临时对象的出现会降低程序的效率</p></li></ol><hr><h2 id="59、有哪些情况必须用到成员列表初始化？作用是什么？"><a href="#59、有哪些情况必须用到成员列表初始化？作用是什么？" class="headerlink" title="59、有哪些情况必须用到成员列表初始化？作用是什么？"></a>59、有哪些情况必须用到成员列表初始化？作用是什么？</h2><ol><li><p>必须使用成员初始化的四种情况</p></li><li><p>当初始化一个引用成员时；</p></li><li><p>当初始化一个常量成员时；</p></li><li><p>当调用一个基类的构造函数，而它有一组参数时；</p></li><li><p>当调用一个成员类的构造函数，而它拥有一组参数时；</p></li><li><p>成员初始化列表做了什么？</p></li><li><p>编译器会一一操作初始化列表，以适当的顺序在构造函数之内安插初始化操作，并且在任何显示用户代码之前；</p></li><li><p>list中的项目顺序是由<code>类中的成员声明顺序决定</code>的，不是由初始化列表的顺序决定的。</p></li></ol><hr><h2 id="60、C-中新增了string，它与C语言中的char-有什么区别吗？如何实现的？"><a href="#60、C-中新增了string，它与C语言中的char-有什么区别吗？如何实现的？" class="headerlink" title="60、C++中新增了string，它与C语言中的char *有什么区别吗？如何实现的？"></a>60、C++中新增了string，它与C语言中的char *有什么区别吗？如何实现的？</h2><p>  string 继承自 basic_string，其实是对char *进行了封装，封装的string包含了char *数组，容量，长度等等属性。</p><h2 id="string-可以进行自动扩展，在每次扩展的时候另外申请一块原空间大小2倍的空间，然后将源字符串拷贝过去，并加上新增内容。"><a href="#string-可以进行自动扩展，在每次扩展的时候另外申请一块原空间大小2倍的空间，然后将源字符串拷贝过去，并加上新增内容。" class="headerlink" title="  string 可以进行自动扩展，在每次扩展的时候另外申请一块原空间大小2倍的空间，然后将源字符串拷贝过去，并加上新增内容。"></a>  string 可以进行自动扩展，在每次扩展的时候另外申请一块原空间大小2倍的空间，然后将源字符串拷贝过去，并加上新增内容。</h2><h2 id="61、什么是内存泄漏、如何检测和避免"><a href="#61、什么是内存泄漏、如何检测和避免" class="headerlink" title="61、什么是内存泄漏、如何检测和避免"></a>61、什么是内存泄漏、如何检测和避免</h2><ul><li><p>内存泄漏<br>一般常说的内存泄漏是指<b>堆内存的泄漏</b><br>堆内存是程序从堆中分配的，大小任意的（内存块的大小可以在程序运行期间决定）内存块，使用后必须显式释放的内存。<br>应用程序一般使用malloc&#x2F;realloc&#x2F;new等函数从堆中分配到块内存，使用完后，程序必须负责相应的调用free&#x2F;delete释放该内存块<br>否则，这块内存就不能被再使用，则称之为该内存泄漏</p></li><li><p>避免内存泄漏的几种方式</p><ol><li><p>计数法： 使用new和malloc时，该数+1，delete&#x2F;free时，该数-1，程序执行完打印这个计数，如果不为0则存在内存泄漏</p></li><li><p>一定要将基类的析构函数声明为<b>虚函数</b></p></li><li><p>对象数组的释放一定要用 delete []</p></li><li><p>有new就有delete，有malloc就有free，保证他们成对出现</p></li></ol></li><li><p>检测工具</p><ul><li><p>Linux下可以使用<b>Valgrind工具</b></p></li><li><p>Windows下可以使用<b>CRT库</b></p></li></ul></li></ul><hr><h2 id="62、对象复用的了解、零拷贝的了解"><a href="#62、对象复用的了解、零拷贝的了解" class="headerlink" title="62、对象复用的了解、零拷贝的了解"></a>62、对象复用的了解、零拷贝的了解</h2><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>对象复用和零拷贝</span></div>    <div class="xContent"><div class="inner">        <ul><li><p>对象复用<br>对象复用本质就是一种设计模式：Flyweight享元模式<br>通过将对象存储到<code>“对象池”</code>中实现对对象的重复利用，这样可以避免多次创建重复对象的开销，节约系统资源。</p></li><li><p>零拷贝<br>零拷贝就是一种避免CPU将数据从一块存储拷贝到另一块存储的技术<br>零拷贝技术可以减少数据拷贝和共享总线操作的次数<br>在C++中，vector的一个成员函数<b>emplace_back()</b>很好地体现了零拷贝技术（和push_back()一样可以将一个元素插入容器尾部）<br>区别在于：push_back()需要调用拷贝构造函数和转移构造函数；emplace_back()插入的元素原地构造，不需要拷贝和转移</p><div class="xControl">  <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>零拷贝</span></div>  <div class="xContent"><div class="inner">      <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">  string name;</span><br><span class="line">  <span class="type">int</span> age;</span><br><span class="line">  <span class="comment">// 初始化构造函数</span></span><br><span class="line">  <span class="built_in">Person</span>(string p_name, <span class="type">int</span> p_age):<span class="built_in">name</span>(std::<span class="built_in">move</span>(p_name)), <span class="built_in">age</span>(p_age)&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;I have been constructed&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 拷贝构造函数</span></span><br><span class="line">  <span class="built_in">Person</span>(<span class="type">const</span> Person&amp; other):<span class="built_in">name</span>(std::<span class="built_in">move</span>(other.name)), <span class="built_in">age</span>(other.age)&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;I have been copy consturcted&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 转移构造函数【使用右值引用】</span></span><br><span class="line">  <span class="built_in">Person</span>(Person&amp;&amp; other):<span class="built_in">name</span>(std::<span class="built_in">move</span>(other.name)), <span class="built_in">age</span>(other.age)&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;I am being moved&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  vector&lt;Person&gt; e;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;emplace_back:&quot;</span> &lt;&lt; endl;</span><br><span class="line">  e.<span class="built_in">emplace_back</span>(<span class="string">&quot;Jane&quot;</span>, <span class="number">23</span>); <span class="comment">// 不用构造类对象</span></span><br><span class="line"></span><br><span class="line">  vector&lt;Person&gt; p;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;push_back:&quot;</span> &lt;&lt; endl;</span><br><span class="line">  p.<span class="built_in">push_back</span>(<span class="built_in">Person</span>(<span class="string">&quot;Mike&quot;</span>, <span class="number">36</span>));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果：</span></span><br><span class="line"><span class="comment">// emplace_back:</span></span><br><span class="line"><span class="comment">// I have been constructed</span></span><br><span class="line"><span class="comment">// push_back:</span></span><br><span class="line"><span class="comment">// I have been constructed;</span></span><br><span class="line"><span class="comment">// I am bing moved</span></span><br></pre></td></tr></table></figure>   </div></div>  </div></li></ul>     </div></div>    </div><h2 id="63、介绍面向对象的三大特性，并举例说明"><a href="#63、介绍面向对象的三大特性，并举例说明" class="headerlink" title="63、介绍面向对象的三大特性，并举例说明"></a>63、介绍面向对象的三大特性，并举例说明</h2><p>三大特性：封装、继承、多态</p><ol><li>封装<br>  数据和代码捆绑在一起，避免外界干扰和不确定性访问。</li></ol><p>  封装，也就是<b>把客观事物封装成抽象的类</b>，并且类可以吧自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。<br>  例如：将公共的数据或方法使用public修饰，而不希望被访问的数据或方法采用private修饰。</p><ol start="2"><li>继承<br>  <b>让某种类型对象获得另一个类型对象的属性和方法</b><br>  它可以实现现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展<br>  常见的继承有三种方式：<ol><li><p>实现继承：指使用基类的属性和方法而无需额外编码</p></li><li><p>接口继承：指仅使用属性和方法的名称、但是子类必须提供实现的能力</p></li><li><p>可视继承：指子窗体（类）使用基窗体（类）的外观和实现代码的能力（C++不常用）</p></li></ol></li></ol><p>  例如：车定义为抽象类，可以派生出轿车、卡车等有自己的属性和方法，但有一些共同点可以在车类中共同编码</p><ol start="3"><li>多态<br>  同一事物表现出不同事物的能力，即向不同对象发送同一消息，不同的对象在接收时会产生不同的行为<br>  <b>（重载实现编译时多态，虚函数实现运行时多态）</b></li></ol><p>  多态性是允许你将父对象设置成为和一个或更多他的子对象相等的技术，赋值之后，父对象就可以根据当前赋值给它的子对象的特性以不同方式运作。<br>  总之：<b>允许将子类类型的指针赋值给父类类型的指针</b></p><p>  实现多态的方式有两种：覆盖（override），重载（overload）</p><ul><li><p>覆盖：是指子类重新定义父类的虚函数的做法</p></li><li><p>重载：是指允许存在多个同名函数，而这些函数又属于重载关系。</p></li></ul><hr><h2 id="64、成员初始化列表的概念，为什么用它会快一点-——-参考条目58"><a href="#64、成员初始化列表的概念，为什么用它会快一点-——-参考条目58" class="headerlink" title="64、成员初始化列表的概念，为什么用它会快一点 —— 参考条目58"></a>64、成员初始化列表的概念，为什么用它会快一点 —— 参考条目58</h2><p>如果在函数体内进行赋值，相当于一次默认构造+一次赋值，初始化列表中只一次赋值操作<br>【如果成员中含有类的话，那初始化列表是快一些，省去了构造函数时间】</p><hr><h2 id="65、C-的四种强制转换reinterpret-cast-x2F-const-cast-x2F-static-cast-x2F-dynamic-cast"><a href="#65、C-的四种强制转换reinterpret-cast-x2F-const-cast-x2F-static-cast-x2F-dynamic-cast" class="headerlink" title="65、C++的四种强制转换reinterpret_cast&#x2F;const_cast&#x2F;static_cast&#x2F;dynamic_cast"></a>65、C++的四种强制转换reinterpret_cast&#x2F;const_cast&#x2F;static_cast&#x2F;dynamic_cast</h2><ol><li>reinterpret_cast<br>  reinterpret_cast&lt; type_id&gt; (expression)</li></ol><p>  type-id必须是一个指针、引用、算术类型、函数指针或者成员指针。<br>  它可以用于类型之间的强制转换</p><ol start="2"><li>const_cast<br>  const_cast&lt; type_id&gt;(expression)<br>  该运算符用来修改类型的const或volatile属性。<br>  除了const或volatile修饰以外，type-id和expression的类型是一样的<br>  具体用法如下：</li></ol><ul><li><p>常量指针被转化为非常量的指针，并且仍然指向原来的对象</p></li><li><p>常量引用被转换为非常量的引用，并且仍然指向原来的对象</p></li><li><p>const_cast一般用于修改底指针。如const char *p形式</p></li></ul><ol start="3"><li>static_cast<br>  static_cast&lt; type_id&gt;(expression)<br>  该运算符把expression转换为type-id类型，但没有运行时类型检查来保证转换的安全性。<br>  主要以下几种用法:<ul><li><p>用于类层次结构中基类（父类）和派生类（子类）之间指针或引用的转换。</p><ul><li><p>进行上行转换（把派生类的指针或引用转换成基类表示）是安全的【父类是子类的子集】</p></li><li><p>进行下行转换（把基类指针或引用转换成派生类表示）时，由于没有动态类型检查，所以是不安全的</p></li></ul></li><li><p>用于基本数据类型之间的转换，如把int转换为char，把int转换为enum。这种安全性也要开发人员来保证。</p></li><li><p>把空指针转换成目标类型的空指针</p></li><li><p>把任何类型的表达式转换成void类型</p></li></ul></li></ol><p>  注意：static_cast不能转换掉expression的const&#x2F;volatile或者__unaligned属性。</p><ol start="4"><li>dynamic_cast<br>  dynamic_cast&lt; type_id&gt;(expression)<br>  有类型检查，基类向派生类转换比较安全，但是派生类向基类转换则不太安全（和static_cast相反？）<br>  该运算符把expression转换成type_id类型的对象，type_id必须是类的指针、类的引用或者void*</li></ol><p>  如果type_id是类指针类型，那么expression也必须是一个指针<br>  如果type_id是一个引用，那么expression也必须是一个引用</p><p>  dynamic_cast 运算符可以在执行期决定真正的类型，也就是说expression必须是多态类型。<br>  如果下行转换是安全的（也就是说，如果基类指针或者引用确实指向一个派生类对象）这个运算符会传回<code>适当转型过的指针</code>。<br>  如果下行转换不安全，这个运算符会传回<code>空指针</code>（也就是说，基类指针或者引用没有指向一个派生类对象）</p><p>  dynamic_cast 主要用于类层次间的上行转换和下行转换，还可以用于类之间的交叉转换</p><p>  在类层次间进行上行转换时，dynamic_cast和static_cast效果是一样的</p><p>  在进行下行转换时，dynamic_cast具有类型检查功能，比static_cast更安全【下行转换不安全时直接nullptr】</p>  <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>例子</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Base</span>():<span class="built_in">b</span>(<span class="number">1</span>)&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">  <span class="type">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> : <span class="keyword">public</span> Base&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Son</span>():<span class="built_in">d</span>(<span class="number">2</span>)&#123;&#125;</span><br><span class="line">  <span class="type">int</span> d;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> n = <span class="number">97</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// reinterpret_cast</span></span><br><span class="line">  <span class="type">int</span> *p = &amp;n;</span><br><span class="line">  <span class="comment">// 以下两者效果相同</span></span><br><span class="line">  <span class="type">char</span> *c = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">char</span>*&gt; (p);</span><br><span class="line">  <span class="type">char</span> *c2 = (<span class="type">char</span> *)(p);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;reinterpret_cast输出：&quot;</span>&lt;&lt; *c2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// const_cast</span></span><br><span class="line">  <span class="type">const</span> <span class="type">int</span> *p2 = &amp;n;</span><br><span class="line">  <span class="type">int</span> *p3 = <span class="built_in">const_cast</span>&lt;<span class="type">int</span>*&gt;(p2);</span><br><span class="line">  *p3 = <span class="number">100</span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;const_cast输出：&quot;</span> &lt;&lt; *p3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// static_cast</span></span><br><span class="line">  Base* b1 = <span class="keyword">new</span> Son;   <span class="comment">// 派生类</span></span><br><span class="line">  Base* b2 = <span class="keyword">new</span> Base;  <span class="comment">// 基类</span></span><br><span class="line"></span><br><span class="line">  Son* s1 = <span class="built_in">static_cast</span>&lt;Son*&gt;(b1);  <span class="comment">// 同类型转换</span></span><br><span class="line">  Son* s2 = <span class="built_in">static_cast</span>&lt;Son*&gt;(b2);  <span class="comment">// 下行转换，不安全</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;static_cast输出：&quot;</span> &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; s1-&gt;d &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; s2-&gt;d &lt;&lt; endl;  <span class="comment">// 由于是下行转换，原先父对象没有d成员，因此返回垃圾值</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// dynamic_cast</span></span><br><span class="line">  Son* s3 = <span class="built_in">dynamic_cast</span>&lt;Son*&gt;(b1); <span class="comment">// 同类型转换</span></span><br><span class="line">  Son* s4 = <span class="built_in">dynamic_cast</span>&lt;Son*&gt;(b2); <span class="comment">// 下行转换，安全</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;dynamic_cast输出：&quot;</span> &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; s3-&gt;d &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">if</span>(s4 == <span class="literal">nullptr</span>) cout &lt;&lt; <span class="string">&quot;s4指针为nullptr&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">else</span>  cout &lt;&lt; s4-&gt;d &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="comment">// reinterpret_cast输出：a</span></span><br><span class="line"><span class="comment">// const_cast输出：100</span></span><br><span class="line"><span class="comment">// static_cast输出：</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// -33686019</span></span><br><span class="line"><span class="comment">// dynamic_cast输出：</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// s4指针为nullptr</span></span><br></pre></td></tr></table></figure>     </div></div>    </div><blockquote><p>总结：下行转换时，dynamic_cast是安全的，如果下行转换不安全的话会返回<code>空指针</code>，这样在进行操作时可以预先判断<br>使用static_cast下行转换时存在不安全情况也可以转换成功，但是直接使用该对象可能会产生错误</p><p>同时，reinterpret_cast不能丢掉原数据类型的const，同时，无论参数是什么，只要type-id是合法类型就可转换</p></blockquote><hr><h2 id="66、C-函数调用的压栈过程"><a href="#66、C-函数调用的压栈过程" class="headerlink" title="66、C++函数调用的压栈过程"></a>66、C++函数调用的压栈过程</h2><ol><li>以例子进行讲解<div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>例子讲解压栈过程</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">  cout &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> param1, <span class="type">int</span> param2)</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> var1 = param1;</span><br><span class="line">  <span class="type">int</span> var2 = param2;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;var1 = %d, var2 = %d&quot;</span>, <span class="built_in">f</span>(var1), <span class="built_in">f</span>(var2)); <span class="comment">//如果将printf转换为cout，则输出结果正好相反</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span>&#123;</span><br><span class="line">  <span class="built_in">func</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果：</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// var1 = 1, var2 = 2</span></span><br></pre></td></tr></table></figure>     </div></div>    </div>当函数从入口函数main函数开始执行时，编译器会将操作系统运行状态、main函数返回地址、main参数、main()内定义变量依次进行压栈；</li></ol><p>当main()开始调用func()时，编译器此时会将main()的运行状态压栈<br>再将func()函数的返回地址，func()函数参数从右到左，func()定义变量依次压栈；</p><p>当func()调用f()的时候，编译器此时会将func()函数的运行状态压栈<br>再将返回地址、f()函数的参数从右到左，f()定义变量依次压栈；</p><p>从代码的输出结果可以看出，函数f(var1)、f(var2)依次入栈，而后先执行f(var2)，再执行f(var1)，最后打印整个字符串<br>将栈中的变量依次弹出，最后主函数返回。</p><ol start="2"><li><p>文字化表述<br>函数的调用过程：</p></li><li><p>从栈空间分配存储空间</p></li><li><p>从实参的存储空间复制值到形参栈空间</p></li><li><p>进行运算</p></li></ol><p>形参在函数未调用之前都是没有分配存储空间的，在函数调用结束后，形参弹出栈空间，清除形参空间。</p><p>数组作为参数的函数调用方式是地址传递，形参和实参都指向相同的内存空间，调用完成后，形参指针被销毁，但内存空间依然存在，不能也不会被销毁。</p><h2 id="当函数有多个返回值时，不能用普通return方式实现，需要通过传回地址的形式进行，即地址-x2F-指针传递。"><a href="#当函数有多个返回值时，不能用普通return方式实现，需要通过传回地址的形式进行，即地址-x2F-指针传递。" class="headerlink" title="当函数有多个返回值时，不能用普通return方式实现，需要通过传回地址的形式进行，即地址&#x2F;指针传递。"></a>当函数有多个返回值时，不能用普通return方式实现，需要通过传回地址的形式进行，即地址&#x2F;指针传递。</h2><h2 id="67、写C-代码时有一类错误是coredump，常见，如何调试？"><a href="#67、写C-代码时有一类错误是coredump，常见，如何调试？" class="headerlink" title="67、写C++代码时有一类错误是coredump，常见，如何调试？"></a>67、写C++代码时有一类错误是coredump，常见，如何调试？</h2><p>coredump是程序由于异常或者bug在运行时异常退出或者终止，在一定条件下生成的一个叫做core的文件，<br>这个core文件会记录程序在运行时的内存，寄存器状态，内存指针和函数堆栈信息等。<br>对这个文件进行分析可以定位到程序异常的时候对应的堆栈调用信息。</p><ul><li>使用gdb命令对core文件进行调试</li></ul><p>以下例子在Linux上编写一段代码并导致segment fault并产生core文件</p><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>例子</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir coredumpTest</span><br><span class="line">vim coredumpTest.cpp</span><br></pre></td></tr></table></figure><p>编辑器内键入：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, i); <span class="comment">// 应该是&amp;i;</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">  <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ coredumpTest.cpp -g -o coredumpTest</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./coredumpTest</span><br></pre></td></tr></table></figure><p>使用gdb调试coredump</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb [可执行文件名] [core文件名]</span><br></pre></td></tr></table></figure>     </div></div>    </div><hr><h2 id="68、移动构造函数"><a href="#68、移动构造函数" class="headerlink" title="68、移动构造函数"></a>68、移动构造函数</h2><ol><li><p>用对象a初始化对象b，a不再使用，但a的空间依然存在<br>既然拷贝构造函数是使用a内容复制给b，为什么不直接用a的空间？<br>这样甚至可以避免新空间的分配，降低了构造成本。</p></li><li><p>拷贝构造函数中，对于指针，一定要深拷贝<br>移动构造函数中，对于指针，可以使用浅拷贝。</p><p>若使用浅拷贝，第一个对象释放指针时，将其置为nullptr，可以避免悬空指针</p></li><li><p>移动构造函数参数和拷贝构造函数参数不同：<br>拷贝构造函数的参数是一个<code>左值引用</code>，移动构造函数的参数是一个<code>右值引用</code><br>即：移动构造函数参数是一个右值或者将亡值引用。<br>即：只用一个右值，或者将亡值初始化另一个对象的时候才调用移动构造函数<br>std::move()的作用是将左值变成一个右值</p></li></ol><blockquote><p>补充，一般函数返回值都是右值，如果返回左值需要返回一个引用</p></blockquote><hr><h2 id="69、C-中将临时变量做返回值的处理过程"><a href="#69、C-中将临时变量做返回值的处理过程" class="headerlink" title="69、C++中将临时变量做返回值的处理过程"></a>69、C++中将临时变量做返回值的处理过程</h2><p>首先：临时变量在函数调用过程中是被压到程序进程栈中的，函数退出时，临时变量出栈，即临时变量被销毁，<br>      其占用内存空间没有清空，但是可以被分配给其他变量，所以有可能在函数退出时，该内存已经被修改了，对于临时变量来说没有意义</p><p>C中规定：16bit程序中，返回值保存在ax寄存器中<br>        32bit程序中，返回值保存在eax寄存器中<br>        64bit程序中，高32bit保存在edx中，低32bit保存在eax中</p><p>即：函数调用结束后，返回值被临时存储到寄存器中，并没有放到堆或栈中，也就是说与内存没有关系<br>    退出函数时时，临时变量可能被销毁，但返回值放到寄存器中，与临时变量生命周期没有关系</p><h2 id="如果需要返回值，一般使用赋值语句即可"><a href="#如果需要返回值，一般使用赋值语句即可" class="headerlink" title="如果需要返回值，一般使用赋值语句即可"></a>如果需要返回值，一般使用赋值语句即可</h2><h2 id="70、如何获得结构成员相对于结构开头的字节偏移量"><a href="#70、如何获得结构成员相对于结构开头的字节偏移量" class="headerlink" title="70、如何获得结构成员相对于结构开头的字节偏移量"></a>70、如何获得结构成员相对于结构开头的字节偏移量</h2><p>使用&lt; stddef.h&gt;头文件中的offsetof宏</p><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>示例</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span>  <span class="title class_">S</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">char</span> y;</span><br><span class="line">    <span class="type">int</span> z;</span><br><span class="line">    <span class="type">double</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">offsetof</span>(S, x) &lt;&lt; endl; <span class="comment">// 0</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">offsetof</span>(S, y) &lt;&lt; endl; <span class="comment">// 4</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">offsetof</span>(S, z) &lt;&lt; endl; <span class="comment">// 8</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">offsetof</span>(S, a) &lt;&lt; endl; <span class="comment">// 12</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然可以使用 #pragma pack(4)指定4字节对齐方式</p>     </div></div>    </div><hr><h2 id="71、静态类型和动态类型，静态绑定和动态绑定"><a href="#71、静态类型和动态类型，静态绑定和动态绑定" class="headerlink" title="71、静态类型和动态类型，静态绑定和动态绑定"></a>71、静态类型和动态类型，静态绑定和动态绑定</h2><ul><li><p>静态类型：对象在声明时采用的类型，在编译器即已经确定</p></li><li><p>动态类型：通常是指一个指针或引用目前所指对象的类型，是在运行期决定的</p></li><li><p>静态绑定：绑定的是静态类型，所对应的函数或属性依赖于对象的静态类型，发生在编译期；</p></li><li><p>动态绑定：绑定的是动态类型，所对应的函数或属性依赖于对象的动态类型，发生在运行期；</p></li></ul><p>由以上定义看出，非虚函数一般是静态绑定，而虚函数都是动态绑定（如此可以实现多态性）</p><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>例子</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">/*virtual*/</span> <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;std::cout &lt;&lt; <span class="string">&quot;A::func()\n&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">public</span> A&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;std::cout &lt;&lt; <span class="string">&quot;B::func()\n&quot;</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> : <span class="keyword">public</span> A&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;std::cout &lt;&lt; <span class="string">&quot;C::func()\n&quot;</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  C* pc = <span class="keyword">new</span> <span class="built_in">C</span>();  <span class="comment">// pc的静态类型是它声明的类型C*，动态类型也是C*</span></span><br><span class="line">  B* pb = <span class="keyword">new</span> <span class="built_in">B</span>();  <span class="comment">// pb的静态类型和动态类型都是B*</span></span><br><span class="line">  A* pa = pc;       <span class="comment">// pa的静态类型是它声明的类型A*，动态类型是pa所指向的对象pc的类型C*</span></span><br><span class="line">  pa = pb;          <span class="comment">// pa的动态类型可以更改，现在它的动态类型是B*，静态类型依然是声明的A*</span></span><br><span class="line">  C *pnull = <span class="literal">nullptr</span>; <span class="comment">// pnull的静态类型是它声明的类型C*，没有动态类型，因为指向了nullptr</span></span><br><span class="line"></span><br><span class="line">  pa-&gt;<span class="built_in">func</span>();       <span class="comment">// A::func() pa的静态类型永远都是A*，不管指向的是哪个子类，都是直接调用A::func()</span></span><br><span class="line">  pc-&gt;<span class="built_in">func</span>();       <span class="comment">// C::func() pc的动静态类型都是C*，因此调用C::func()</span></span><br><span class="line">  pnumm-&gt;<span class="built_in">func</span>();    <span class="comment">// C::func() 编译期确定了，和指针是否为空无关</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果将A类中的virtual注释去掉，则结果是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pa-&gt;<span class="built_in">func</span>();   <span class="comment">// B::func()  因为有了virtual虚函数特性，pa的动态类型指向B*，因此先在B中查找</span></span><br><span class="line">pc-&gt;<span class="built_in">func</span>();   <span class="comment">// C::func()  pc的动静态类型都是C*，因此先在C中查找</span></span><br><span class="line">pnumm-&gt;<span class="built_in">func</span>();<span class="comment">// 空指针异常，因为func是virtual虚函数，因此对func的调用只能在运行期才能确定</span></span><br></pre></td></tr></table></figure>     </div></div>    </div><p>在上面的例子中：</p><ul><li><p>如果基类A中的func不是virtual函数，那么不论pa&#x2F;pb&#x2F;pc指向哪个子类指针，对func的调用都是在定义pa&#x2F;pb&#x2F;pc时的静态类型决定【编译期】</p></li><li><p>同样空指针也能直接调用no-virtual函数而不报错【一定要做空指针检查】，因此静态绑定不能实现多态；</p></li><li><p>如果func是虚函数，那所有的调用都要等到运行时根据其指向对象的类型才能确定，比起静态绑定自然是有性能损失的，但能实现多态特性。</p><blockquote><p>注意，上述代码是针对指针分析的，对引用的情况也同样适用</p></blockquote></li></ul><p>静态绑定和动态绑定的区别：</p><ul><li><p>静态绑定发生在<code>编译期</code>，动态绑定发生在<code>运行期</code>；</p></li><li><p>对象的动态类型可以更改，静态类型无法更改；</p></li><li><p>要想实现多态，必须使用动态绑定；</p></li><li><p>在继承体系中只有虚函数使用的是动态绑定，其他的全都是静态绑定；</p></li></ul><blockquote><p>建议：<br>  不要重新定义继承而来的<code>非虚函数</code>，这样导致函数调用由对象声明时的静态类型确定了，而与对象本身脱离了关系，没有多态，从而有隐患<br>  在动态绑定也即在virtual函数中，要注意默认参数的使用。<br>  当缺省参数和virtual函数一起使用时一定要谨慎，不然出了问题很难排查。</p></blockquote><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>缺省参数</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">E</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> i=<span class="number">0</span>)</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;E::func()\t&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">F</span>: <span class="keyword">public</span> E&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> i=<span class="number">1</span>)</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;F::func()\t&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">  F* pf = <span class="keyword">new</span> <span class="built_in">F</span>();</span><br><span class="line">  E* pe = pf;</span><br><span class="line">  pf-&gt;<span class="built_in">func</span>(); <span class="comment">// F::func() 1  正常</span></span><br><span class="line">  pe-&gt;<span class="built_in">func</span>(); <span class="comment">// F::func() 0  调用了子类的函数，但是使用了基类的参数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">test2</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><hr><h2 id="72、引用是否能实现动态绑定，为什么可以实现？"><a href="#72、引用是否能实现动态绑定，为什么可以实现？" class="headerlink" title="72、引用是否能实现动态绑定，为什么可以实现？"></a>72、引用是否能实现动态绑定，为什么可以实现？</h2><p>可以<br>引用在创建时必须初始化，在访问虚函数时，编译器会根据其绑定的对象类型要调用哪个函数，注意只能调用虚函数。</p><h2 id="即：虚函数才有动态绑定，采用虚函数情况下，使用的是动态绑定对象的虚函数"><a href="#即：虚函数才有动态绑定，采用虚函数情况下，使用的是动态绑定对象的虚函数" class="headerlink" title="即：虚函数才有动态绑定，采用虚函数情况下，使用的是动态绑定对象的虚函数"></a>即：虚函数才有动态绑定，采用虚函数情况下，使用的是动态绑定对象的虚函数</h2><h2 id="73、全局变量和局部变量有什么区别"><a href="#73、全局变量和局部变量有什么区别" class="headerlink" title="73、全局变量和局部变量有什么区别"></a>73、全局变量和局部变量有什么区别</h2><ol><li><p>声明周期不同：<br>全局变量随主程序创建而创建，随主程序销毁而销毁；<br>局部变量在局部函数内部，甚至局部循环体等内部存在，退出就不存在</p></li><li><p>使用方式不同：<br>通过声明后全局变量在程序的各个部分都可以用到；<br>局部变量分配在堆栈区，只能在局部使用。</p></li></ol><p>操作系统和编译器通过内存分配的位置可以区分二者<br>全局数据分配在全局数据段并且在程序开始运行时被加载<br>局部变量则分配在堆栈里</p><hr><h2 id="74、指针加减计算要注意什么？"><a href="#74、指针加减计算要注意什么？" class="headerlink" title="74、指针加减计算要注意什么？"></a>74、指针加减计算要注意什么？</h2><p>指针加减本质是对其所指地址的移动，移动的步长跟指针的类型是有关系的，因此在涉及指针加减运算需要十分小心。<br>操作不当会导致指向未知区域，从而内存风险</p><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>例子</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> *a, *b, *c;</span><br><span class="line">  a = (<span class="type">int</span> *)<span class="number">0x500</span>;</span><br><span class="line">  b = (<span class="type">int</span> *)<span class="number">0x520</span>;</span><br><span class="line">  c = b - a;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, c);  <span class="comment">// 8</span></span><br><span class="line"></span><br><span class="line">  a += <span class="number">0x020</span>;</span><br><span class="line">  c = b - a;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, c);  <span class="comment">// -24</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><p>首先变量a和b都是以16进制的形式初始化，将它们转换成十进制分别是1280和1312<br>则差值为32，即a和b所指地址之间间隔32位<br>但是由于int类型占4位，所以c的值为32&#x2F;4 &#x3D; 8【int类型4位】</p><p>a自增16进制0x20后，其实际地址为1280+2*16 *4 &#x3D; 1408（因为一个int是4位，要乘4）<br>则他们的差值变成了1312-1280&#x3D;-96，即-96&#x2F;4 &#x3D; -24</p><p>遇到指针的计算，<br><b>需要明确的是指针每移动一位，它实际跨越的内存间隔是指针类型的长度，建议都转成十进制计算，计算结果要除以类型长度</b></p><hr><h2 id="75、如何判断两个浮点数相等？"><a href="#75、如何判断两个浮点数相等？" class="headerlink" title="75、如何判断两个浮点数相等？"></a>75、如何判断两个浮点数相等？</h2><h2 id="要误差小于某个特定的值，不能直接用-x3D-x3D"><a href="#要误差小于某个特定的值，不能直接用-x3D-x3D" class="headerlink" title="要误差小于某个特定的值，不能直接用&#x3D;&#x3D;"></a>要误差小于某个特定的值，不能直接用&#x3D;&#x3D;</h2><h2 id="76、方法调用的原理（栈、汇编）"><a href="#76、方法调用的原理（栈、汇编）" class="headerlink" title="76、方法调用的原理（栈、汇编）"></a>76、方法调用的原理（栈、汇编）</h2><ol><li><p>机器用栈来传递过程参数、存储返回信息、保存寄存器用于以后恢复，以及本地存储，为单个过程分配的那部分叫做帧栈；<br>帧栈可以认为是程序栈的一段，有两个端点，一个标识起始地址，一个标识结束地址<br>两个指针结束地址指针esp，开始地址指针ebp；</p></li><li><p>有一系列栈帧构成，这些栈帧对应一个过程，而且每一个栈指针+4的位置存储函数返回过程；<br>每一个栈帧都建立在调用者的下方，当被调用者执行完毕时，这一段栈帧会被释放。<br>由于栈帧是向着地址递减的方向延伸，因此如果我们将栈指针减去一定的值，相当于分配了一定空间的内存。<br>如果加上一定的值，相当于压缩栈帧长度，即内存释放。</p></li><li><p>过程实现</p></li><li><p>备份原来栈指针，调整当前栈帧指针到栈指针位置；</p></li><li><p>建立起来的栈帧就是为被调用者准备的，当被调用者使用栈帧时，需要给临时变量分配预留内存</p></li><li><p>使用建立好的栈帧，比如读取和写入，一般使用mov，push以及pop指令等等。</p></li><li><p>恢复被调用者寄存器当中的值，这一过程其实是栈帧中将备份的值再恢复到寄存器，不过这些值可能已经不在栈顶</p></li><li><p>释放被调用者的栈帧，释放就意味着将栈指针加大，而具体的做法一般是直接将栈指针指向帧指针，因此会采用类似下面的汇编代码处理</p></li><li><p>恢复调用者的栈帧，恢复其实就是调整栈帧两端，使得当前栈帧的区域有回到了原始的位置。</p></li><li><p>弹出返回地址，跳出当前过程，继续执行调用者代码。</p></li><li><p>过程调用和返回指令</p></li><li><p>call指令</p></li><li><p>leave指令</p></li><li><p>ret指令</p></li></ol><hr><h2 id="77、C-中的指针参与传递和引用参数传递有什么区别？底层原理"><a href="#77、C-中的指针参与传递和引用参数传递有什么区别？底层原理" class="headerlink" title="77、C++中的指针参与传递和引用参数传递有什么区别？底层原理"></a>77、C++中的指针参与传递和引用参数传递有什么区别？底层原理</h2><ol><li><p>指针参数传递本质上是值传递，传递的是一个地址值。<br>  值传递是一个副本，只是对局部变量进行操作，不会改变原变量的值</p></li><li><p>引用传递过程中，被调函数的形参也作为局部变量在栈中开辟内存，但存放的是主调函数放进来的实参变量的地址。<br>  被调函数对形参（本体）的任何操作都被处理为间接寻址，即还是要修改到实参变量。</p></li><li><p>引用传递和指针传递是不同的<br>  对引用传递的修改，间接寻址，修改到原实参的值<br>  对指针传递参数本身的修改，只是改变这个地址的值（除非该地址指向的区域）</p></li><li><p>编译角度上来说，程序在编译时分别将指针和引用添加到符号表上，符号表中记录的是变量名和变量对应的地址<br>  指针变量在符号表上对应的地址值为指针变量的地址值 —— 指针的指针，因此可以修改指针<br>  引用在符号表上对应的地址值为引用对象的地址值 —— 引用对象的地址值，因此不可以修改这个条目【因为符号表不能修改】<br>  符号表生成后就不可以修改，因此指针可以改变指向对象（指针变量中值可以改），引用对象不能修改。</p></li></ol><hr><h2 id="78、类如何实现只能静态分配和只能动态分配"><a href="#78、类如何实现只能静态分配和只能动态分配" class="headerlink" title="78、类如何实现只能静态分配和只能动态分配"></a>78、类如何实现只能静态分配和只能动态分配</h2><ol><li><p>静态分配：把new和delete运算符重载为private属性<br>动态分配：把构造、析构函数设为protected属性，再用子类动态创建</p></li><li><p>建立类的对象有两种方式：</p></li><li><p>静态建立：静态建立一个类对象，就是由编译器为对象在占空间中分配内存</p></li><li><p>动态建立：A *p &#x3D; new A(); 动态建立一个类对象，就是用new运算符为对象在堆空间中分配内存<br>步骤：第一，执行operator new()函数，在堆中搜索一块内存并分配；第二，调用类构造函数构造对象</p></li><li><p>使用new运算符，对象才会被建立在堆上<br>只要限制new运算符就可以实现类对象只能建立在栈上，即将new运算符设置为私有</p></li></ol><hr><h2 id="79、如果想将某个类用作基类，为什么该类必须定义而非声明？"><a href="#79、如果想将某个类用作基类，为什么该类必须定义而非声明？" class="headerlink" title="79、如果想将某个类用作基类，为什么该类必须定义而非声明？"></a>79、如果想将某个类用作基类，为什么该类必须定义而非声明？</h2><p>派生类中包含并且可以使用它从基类继承而来的成员，为了使用这些成员，派生类必须知道他们是什么<br>所以必须定义而非声明。</p><hr><h2 id="80、继承机制中对象之间如何转换？指针和引用之间如何转换？"><a href="#80、继承机制中对象之间如何转换？指针和引用之间如何转换？" class="headerlink" title="80、继承机制中对象之间如何转换？指针和引用之间如何转换？"></a>80、继承机制中对象之间如何转换？指针和引用之间如何转换？</h2><ol><li><p>向上类型转换<br>  将派生类指针或引用转换为基类的指针或引用被称为向上类型转换<br>  向上类型转换会自动进行，而且向上类型转换是安全的</p></li><li><p>向下类型转换<br>  将基类指针或引用转换为派生类指针或引用被称为向下类型转换<br>  向下类型转换不会自动进行，因为一个基类对应几个派生类，所以向下类型转换时不知道对应哪个派生类<br>  向下类型转换必须加动态类型识别技术RTTI，用dynamic_cast向下类型转换</p></li></ol><hr><h2 id="81、C-中的组合，和继承相比缺点？"><a href="#81、C-中的组合，和继承相比缺点？" class="headerlink" title="81、C++中的组合，和继承相比缺点？"></a>81、C++中的组合，和继承相比缺点？</h2><ol><li>继承<br>  继承是 is A 的关系，Student 继承 Person，即Student is a Person。</li></ol><ul><li><p>继承的优点：<br>  是子类可以重写父类的方法来方便地实现对父类扩展</p></li><li><p>继承的缺点：</p><ol><li><p>父类的内部细节对子类是可见的</p></li><li><p>子类从父类继承的方法在编译时就确定下来了，所以无法在运行期间改变从父类继承的方法的行为</p></li><li><p>如果对父类的方法做了修改的话（如增加了一个参数），则子类的方法必须做出相应的修改。<br>所以子类和父类是一种高耦合，违背了OOP</p></li></ol></li></ul><ol start="2"><li>组合<br>  组合也就是设计类的时候把要组合的类的对象加入到该类中作为自己的成员变量。</li></ol><ul><li><p>组合的优点：</p><ol><li><p>当前对象只能通过所包含的那个对象去调用其方法，所以所包含的对象的内部细节对当前对象不可见</p></li><li><p>当前对象和包含的对象是一个低耦合关系，如果修改包含对象的类中代码不需要修改当前对象类的代码。</p></li><li><p>当前对象可以在运行时动态的绑定所包含的对象，可以通过set方法可以给所包含对象赋值</p></li></ol></li><li><p>组合的缺点：</p><ol><li><p>容易产生过多的对象</p></li><li><p>为了能组合多个对象，必须仔细对接口进行定义</p></li></ol></li></ul><hr><h2 id="82、函数指针"><a href="#82、函数指针" class="headerlink" title="82、函数指针"></a>82、函数指针</h2><ol><li>什么是函数指针？<br>  函数指针指向的是特殊的数据类型，函数的类型是由其返回的数据类型和其参数列表共同决定的<br>  <b>函数的名称则不是其类型的一部分</b></li></ol><p>  一个具体函数的名字，如果后面不跟调用符号（括号），则该名字就是函数的指针（大部分情况下是如此，但不严格）</p><ol start="2"><li><p>函数指针的声明方法。</p></li><li><p>int (*pf)(const int&amp;, const int&amp;);<br>pf就是一个函数指针，指向所有返回类型为int，并带有两个const int&amp; 参数的函数。</p></li><li><p>int <em>pf(const int&amp;, const int&amp;);<br>声明了一个函数pf，返回类型为int</em>，带有两个const int&amp;参数。</p></li><li><p>为什么有函数指针<br>函数与数据项相似，函数也有地址。【参考汇编 call 指令】<br>希望同一个函数通过使用相同的形参在不同的时间产生不同的效果。</p></li><li><p>一个函数名就是一个指针，它指向函数的代码。<br>一个函数地址是该函数的进入点，也就是调用函数的地址。<br>函数的调用可以通过函数名，也可以通过指向函数的指针来调用。<br>函数指针还允许将函数作为变元传给其他的函数。</p></li><li><p>两种方法赋值：<br>指针名 &#x3D; 函数名;<br>指针名 &#x3D; &amp;函数名;</p></li></ol><hr><h2 id="83、内存对齐及原因。"><a href="#83、内存对齐及原因。" class="headerlink" title="83、内存对齐及原因。"></a>83、内存对齐及原因。</h2><ol><li><p>内存对齐</p></li><li><p>分配内存的顺序是按照声明的顺序。</p></li><li><p>每个变量相对于起始位置的偏移量必须是该变量类型大小的整数倍，不是整数倍则空出内存，直到偏移量是整数倍</p></li><li><p>最后整个结构体的大小必须是里面变量类型最大值的整数倍。</p></li><li><p>添加#pragma pack(n)后：</p></li><li><p>偏移量要是n和当前变量大小中较小值的整数倍</p></li><li><p>整体大小要是n和最大变量大小中较小值的整数倍</p></li><li><p>n值必须为1,2,4,8……，为其他值时要按照默认的分配规则。</p></li></ol><hr><h2 id="84、结构体变量比较是否相等"><a href="#84、结构体变量比较是否相等" class="headerlink" title="84、结构体变量比较是否相等"></a>84、结构体变量比较是否相等</h2><ol><li><p>重载 “&#x3D;&#x3D;” 操作符</p><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>重载</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">foo</span>&#123;</span><br><span class="line">  <span class="type">int</span> a;</span><br><span class="line">  <span class="type">int</span> b;</span><br><span class="line"></span><br><span class="line">  <span class="type">bool</span> <span class="keyword">operator</span> == (<span class="type">const</span> foo&amp; rhs)&#123;  <span class="comment">// 操作符重载</span></span><br><span class="line">    <span class="built_in">return</span> (a == rhs.a) &amp;&amp; (b == rhs.b);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>     </div></div>    </div></li><li><p>元素的话一个个比</p></li><li><p>指针直接比较，如果保存的是同一个实例地址，则(p1 &#x3D;&#x3D; p2)为真。</p></li></ol><hr><h2 id="85、函数调用过程栈的变化，返回值和参数变量哪个先入栈？"><a href="#85、函数调用过程栈的变化，返回值和参数变量哪个先入栈？" class="headerlink" title="85、函数调用过程栈的变化，返回值和参数变量哪个先入栈？"></a>85、函数调用过程栈的变化，返回值和参数变量哪个先入栈？</h2><ol><li><p>调用者函数把被调函数所需要的参数按照与被调函数的形参顺序相反的顺序压入栈中，<br>即：从右往左依次把被调函数所需要的参数压入栈。</p></li><li><p>调用者函数使用call指令调用被调函数，并把call指令的下一条指令的地址当成返回地址压入栈中（压栈操作隐含在call中）</p></li><li><p>在被调函数中，被调函数会先保存调用者函数的栈底地址（push ebp），然后再保存调用者函数的栈顶地址【上个函数返回地址，当前函数返回地址】<br>即：当前被调函数的栈底地址（mov ebp, esp）</p></li><li><p>在被调函数中，从ebp的位置处开始存放被调函数的局部变量和临时变量，并且这些变量的地址按照定义时的顺序依次减小<br>即：这些变量的地址是按照栈的延伸方向排列的，先定义的变量先入栈，后定义的变量后入栈。</p></li></ol><hr><h2 id="86、define、const、typedef、inline的使用方法？他们之间的区别？"><a href="#86、define、const、typedef、inline的使用方法？他们之间的区别？" class="headerlink" title="86、define、const、typedef、inline的使用方法？他们之间的区别？"></a>86、define、const、typedef、inline的使用方法？他们之间的区别？</h2><ol><li><p>const和#define的区别</p></li><li><p>const定义的常量是变量带类型<br>#define定义的是常数不带类型</p></li><li><p>const在编译、链接过程中起作用<br>#define只在预处理阶段起作用，简单的文本替换</p></li><li><p>const有数据类型，是要进行类型检查，可以避免一些低级错误<br>#define只是简单的字符串替换没有类型检查</p></li><li><p>const占用数据段空间<br>#define占用代码段空间</p></li><li><p>const不能冲定义<br>#define可以通过undef取消某个符号的定义，进行重定义</p></li><li><p>#define独特功能，比如可以用来防止文件重复引用</p></li><li><p>#define和别名typedef的区别</p></li><li><p>执行时间不同：<br>#define是宏定义，发生在预处理阶段，不进行类型检查<br>typedef在编译阶段有效，有类型检查的功能</p></li><li><p>功能差异：<br>#define不只是可以为类型取别名，还可以定义常量、变量、编译开关等<br>typedef用来定义类型的别名，定义与平台无关的数据类型，与struct结合使用等</p></li><li><p>作用域不同：<br>#define没有作用域的限制，只要是之前预定义过的宏，在以后的程序中都可以使用<br>typedef有自己的作用域。</p></li><li><p>define和inline的区别</p></li><li><p>#define是关键字<br>inline是函数</p></li><li><p>宏定义在预处理阶段进行文本替换<br>inline函数在编译阶段进行替换</p></li><li><p>宏定义没有类型检查<br>inline函数有类型检查</p></li></ol><hr><h2 id="87、printf的实现原理"><a href="#87、printf的实现原理" class="headerlink" title="87、printf的实现原理"></a>87、printf的实现原理</h2><p>C&#x2F;C++中对函数参数的扫描是从后向前的</p><p>压栈传参，栈是从高地址向低地址生长的，控制生长的是堆栈指针，最后压入的参数总能被函数找到，因为就在堆栈指针上方。</p><p>printf第一个被找到的参数就是字符指针，就是被双引号括起来的一部分，函数通过判断字符串里的参数的个数来判断参数的个数即数据类型<br>从而算出堆栈指针的偏移量</p><hr><h2 id="88、为什么模板类一般都是放在一个h文件中"><a href="#88、为什么模板类一般都是放在一个h文件中" class="headerlink" title="88、为什么模板类一般都是放在一个h文件中"></a>88、为什么模板类一般都是放在一个h文件中</h2><ol><li><p>模板定义很特殊<br>由template&lt;…&gt;处理的任何东西都意味着编译器在当时不为它分配存储空间，它一直处于等待状态直到被一个模板实例告知。<br>在编译器和连接器的某一处，有一机制能去掉指定模板的多重定义。</p><p>所以为了容易使用，几乎总是在头文件中放置全部的模板声明和定义。</p></li><li><p>在分离式编译的环境下，编译器编译某一个.cpp文件时并不知道另一个.cpp文件的存在<br>也不会去查找（当遇到未决符号时会寄希望于连接器）。<br>这种模式在没有模板的情况下运行良好，但模板仅在需要的时候才实例化出来。</p><p>所以编译器只看到模板声明，不能实例化该模板，只创建一个有外部连接的符号并期待连接器能将符号地址决议出来。</p><p>当实现该模板的.cpp文件中没有用到模板的实例时，编译器不去优化，因此整个工程.obj找不到一行模板实例的二进制代码，连接器也做不到。</p></li></ol><hr><h2 id="89、C-中类成员的访问权限和继承权限问题-——-参见条目37"><a href="#89、C-中类成员的访问权限和继承权限问题-——-参见条目37" class="headerlink" title="89、C++中类成员的访问权限和继承权限问题 —— 参见条目37"></a>89、C++中类成员的访问权限和继承权限问题 —— 参见条目37</h2><hr><h2 id="90、cout-和-printf-有什么区别？"><a href="#90、cout-和-printf-有什么区别？" class="headerlink" title="90、cout 和 printf 有什么区别？"></a>90、cout 和 printf 有什么区别？</h2><p>cout &lt;&lt; 是一个函数，cout &lt;&lt; 后可以跟不同的类型是因为cout &lt;&lt; 已存在针对各种数据类型的重载，所以会自动识别数据类型<br>输出过程会首先将输出字符放入缓冲区，然后输出到屏幕。</p><p>cout 是有缓冲输出</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; <span class="string">&quot;abc &quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;abc \n&quot;</span>; cout &lt;&lt; flush;  <span class="comment">// 这两个菜一样</span></span><br></pre></td></tr></table></figure><h2 id="flush立即强迫缓冲输出，printf是无缓冲输出，有输出时立即输出。"><a href="#flush立即强迫缓冲输出，printf是无缓冲输出，有输出时立即输出。" class="headerlink" title="flush立即强迫缓冲输出，printf是无缓冲输出，有输出时立即输出。"></a>flush立即强迫缓冲输出，printf是无缓冲输出，有输出时立即输出。</h2><h2 id="91、重载运算符"><a href="#91、重载运算符" class="headerlink" title="91、重载运算符"></a>91、重载运算符</h2><ol><li><p>只能重载已有的运算符，无权发明新的运算符；<br>对于重载运算符，优先级和结合律与内置类型一致才可以；<br>不能改变操作符运算数个数。</p></li><li><p>两种重载方式：</p><ol><li>成员运算符和非成员运算符，成员运算符比非成员运算符少一个参数</li><li>下标运算符、箭头运算符，必须是成员运算符</li></ol></li><li><p>引入运算符重载，是为了实现类的多态性。</p></li><li><p>当重载的运算符是成员函数时，this绑定到左侧运算符对象。<br>成员运算符函数的参数数量比运算符的对象的数量少一个<br>至少含有一个类类型的参数</p></li><li><p>从参数个数推断到底定义的是哪种运算符<br>当运算符既是一元运算符又是二元运算符（+,-,*,&amp;）</p></li><li><p>下标运算符必须是成员函数，下标运算符通常以所访问元素的引用作为返回值，同时最好定义下标运算符的常量版本和非常量版本；</p></li><li><p>箭头运算符必须是类的成员，解引用通常也是类的成员<br>重载的箭头运算符必须返回类的指针</p></li></ol><hr><h2 id="92、当程序中有函数重载时，函数的匹配原则和顺序是什么？"><a href="#92、当程序中有函数重载时，函数的匹配原则和顺序是什么？" class="headerlink" title="92、当程序中有函数重载时，函数的匹配原则和顺序是什么？"></a>92、当程序中有函数重载时，函数的匹配原则和顺序是什么？</h2><ol><li><p>名字查找</p></li><li><p>确定候选函数</p></li><li><p>寻找最佳匹配</p></li></ol><hr><h2 id="93、定义和声明的区别-——-参见条目15"><a href="#93、定义和声明的区别-——-参见条目15" class="headerlink" title="93、定义和声明的区别 —— 参见条目15"></a>93、定义和声明的区别 —— 参见条目15</h2><h2 id="有变量、函数的声明和定义"><a href="#有变量、函数的声明和定义" class="headerlink" title="有变量、函数的声明和定义"></a>有变量、函数的声明和定义</h2><h2 id="94、全局变量和static变量的区别"><a href="#94、全局变量和static变量的区别" class="headerlink" title="94、全局变量和static变量的区别"></a>94、全局变量和static变量的区别</h2><ol><li>全局变量（外部变量）的说明之前再冠以static就构成了静态全局变量<br>  全局变量本身就是静态存储方式、静态全局变量也是静态存储方式。<br>  上述两种在存储方式上并无不同。区别在于非静态全局变量的作用域是整个源程序，当一个源程序由多个源文件组成时，<code>非静态全局变量在各源文件有效</code>。</li></ol><p>  静态全局变量限定了其作用域，即<code>只在定义该变量的源文件内有效</code>，在同一源程序的其他源文件中不能使用它。</p><p>  静态全局变量的作用限于一个源文件内有效，在同一源程序的其他源文件中不能使用它<br>  由于静态全局变量的作用域限于一个源文件内，只能为该源文件内的函数共用，因此可以避免在其他源文件内引起错误</p><p>  static全局变量域普通的全局变量的区别是：static全局变量只初始化一次，防止在其他文件单元被引用。</p><ol start="2"><li>static函数和普通函数区别？<br>  static函数与普通的函数作用域不同，只在本文件中。<br>  只在当前源文件中使用的函数应该说明为内部函数（static），内部函数应该在当前源文件中说明和定义。</li></ol><p>  对于可在当前源文件以外使用的函数应该在一个头文件中说明，要使用这些函数的源文件要包含这个头文件。</p><p>  static函数与普通函数最主要的区别就是static函数在内存中只有一份<br>  普通函数在每个被调用中维持一份拷贝程序的局部变量存在于（堆栈）中，全局变量存在于（静态区）中，动态申请数据存在于（堆）</p><hr><h2 id="95、静态成员与普通成员的区别？"><a href="#95、静态成员与普通成员的区别？" class="headerlink" title="95、静态成员与普通成员的区别？"></a>95、静态成员与普通成员的区别？</h2><ol><li><p>生命周期<br>  静态成员变量从类被加载开始到类被卸载，一直存在<br>  普通成员变量只有在类创建对象后才开始存在，对象结束，它的生命期结束</p></li><li><p>共享方式<br>  静态成员变量是全类共享<br>  普通成员变量是每个对象单独想用的</p></li><li><p>定义位置<br>  静态成员变量存储在静态全局区<br>  普通成员变量存储在栈或堆中</p></li><li><p>初始化位置<br>  静态成员变量在类外初始化<br>  普通成员变量在类中初始化</p></li><li><p>默认实参<br>  静态成员变量作为默认实参</p></li></ol><hr><h2 id="96、ifdef和endif代表什么？"><a href="#96、ifdef和endif代表什么？" class="headerlink" title="96、ifdef和endif代表什么？"></a>96、ifdef和endif代表什么？</h2><ol><li><p>一般情况下，源程序中所有行都参与编译，但有时希望对其中一部分内容只在满足一定条件才可编译，即<code>条件编译</code><br>有时当满足某条件时对一组语句进行编译，而当条件不满足则编译另一组语句。</p></li><li><p>条件编译命令最常见的形式：</p><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>例子</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> 标识符</span></span><br><span class="line">程序段<span class="number">1</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">程序段<span class="number">2</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>其作用：当标识符已经被定义过（一般是用#define命令定义），则对程序段1进行编译，否则编译程序段2<br>其中#else部分也可以没有</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span></span></span><br><span class="line">程序段<span class="number">1</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>     </div></div>    </div></li><li><p>在一个大的软件工程里，可能会有多个文件同时包含一个头文件，当这些头文件编译链接成一个可执行文件上时，会出现大量<code>重定义</code>错误<br>头文件中使用#define、#ifndef、#ifdef、#endif能避免头文件冲定义。</p></li></ol><hr><h2 id="97、隐式转换，如何消除隐式转换"><a href="#97、隐式转换，如何消除隐式转换" class="headerlink" title="97、隐式转换，如何消除隐式转换"></a>97、隐式转换，如何消除隐式转换</h2><ol><li><p>C++的基本类型中并非完全的对立，部分数据类型之间是可以进行隐式转换的。<br>所谓<code>隐式转换</code>，是指不需要用户干预，编译器私下进行的类型转换行为。<br>很多时候用户可能不知道进行了哪些转换。</p></li><li><p>C++面向对象的多态特性，就是通过父类的类型实现对子类的封装。<br>通过隐式转换，可以直接将一个子类的对象使用父类的类型进行返回。<br>例如：数值和布尔类型、整数和浮点类型的转换。<br>某些方面来说，隐式类型转换带来了不小便捷，C++是一门强类型语言，类型的检查是非常严格的。</p></li><li><p>基本数据类型<br>基本数据类型的转换以<b>取值范围作为转换基础（保证精度不丢失）</b>。<br>隐式转换发生在从小到大的转换中<br>例如：char-&gt;int、int-&gt;long。<br>自定义对象中，<b>子类对象可以隐式转换为父类对象</b>。</p></li><li><p>C++中提供了explicit关键字，在构造函数声明时加上explicit关键字，能禁止隐式转换</p></li><li><p>如果构造函数只接受一个参数，则实际上定义了转换为此类型的隐式转换机制。<br>可以通过将构造函数声明为explicit加以制止隐式类型转换，关键字explicit只对一个实参的构造函数有效<br>需要多个实参的构造函数不能执行隐式转换，所以无需将这些构造函数指定为explicit。</p></li></ol><hr><h2 id="98、C-如何处理多个异常的？"><a href="#98、C-如何处理多个异常的？" class="headerlink" title="98、C++如何处理多个异常的？"></a>98、C++如何处理多个异常的？</h2><ol><li>C++中的异常情况：</li></ol><ul><li>语法错误（编译错误）<br>如：变量未定义、括号不匹配、关键字拼写错误等在编译时就能发现的错误，可被编译器及时发现，而且也可及时知道出错的位置及原因，方便改正。</li><li>运行时错误<br>如：数组下标越界、系统内存不足等。这类错误不易被程序员发现，它能通过编译且能进入运行，但运行时会出错，导致程序崩溃<br>【解决这种错误可以使用异常处理机制】</li></ul><ol start="2"><li>C++异常处理机制：<br>  异常处理基本思想：执行一个函数的过程中发现异常，可以不用在本函数内立即进行处理，而是抛出异常，让函数的调用者直接或间接地处理这个问题。<br>  C++的异常处理机制由3个模块组成：<br> try（检查）、throw（抛出）、catch（捕获）<br> 抛出异常的语句格式为：throw表达式;<br> 如果try块中程序段发现了异常则抛出异常。  <div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>异常处理机制</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123; <span class="comment">// 可能抛出异常的语句;（检查）try</span></span><br><span class="line">  可能抛出异常的语句; （检查）</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span>(类型名[形参名])&#123;  <span class="comment">// 捕获特定类型的异常</span></span><br><span class="line">  <span class="comment">// 处理1;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span>(类型名[形参名])&#123;  <span class="comment">//捕获特定类型的异常</span></span><br><span class="line">  <span class="comment">// 处理2;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span>(...)&#123; <span class="comment">// 捕获所有类型的异常</span></span><br><span class="line">  <span class="comment">// 处理;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div></li></ol><hr><h2 id="99、如何在不使用额外空间的情况下，交换两个数？"><a href="#99、如何在不使用额外空间的情况下，交换两个数？" class="headerlink" title="99、如何在不使用额外空间的情况下，交换两个数？"></a>99、如何在不使用额外空间的情况下，交换两个数？</h2><ol><li><p>算术<br>x &#x3D; x + y;<br>y &#x3D; x - y;<br>x &#x3D; x - y;</p></li><li><p>异或<br>x &#x3D; x ^ y;  &#x2F;&#x2F; 只能对int, char<br>y &#x3D; x ^ y;<br>x &#x3D; x ^ y;<br>&#x2F;&#x2F; x ^&#x3D; y ^&#x3D; x;</p></li></ol><hr><h2 id="100、strcpy和memcpy的区别？"><a href="#100、strcpy和memcpy的区别？" class="headerlink" title="100、strcpy和memcpy的区别？"></a>100、strcpy和memcpy的区别？</h2><ol><li><p>复制的内容不同。<br> strcpy只能复制字符串<br> memcpy可以复制任意内容，例如字符数组、整形、结构体、类等。</p></li><li><p>复制的方法不同。<br> strcpy不需要指定长度，因为有’\0’结束，因此容易溢出，<br> memcpy则是根据第三个参数决定复制的长度。</p></li><li><p>用途不同。<br> 通常在复制字符串时用strcpy<br> 复制其他类型数据一般用memcpy</p></li></ol><hr><h2 id="101、程序在执行int-main-int-argc-char-argc-时的内存结构？"><a href="#101、程序在执行int-main-int-argc-char-argc-时的内存结构？" class="headerlink" title="101、程序在执行int main(int argc, char *argc[])时的内存结构？"></a>101、程序在执行int main(int argc, char *argc[])时的内存结构？</h2><p>参数的含义是程序在命令行下运行的时候，需要输入argc个参数，每个参数以char类型输入，依次存在数组里面<br>数组是argv[]，所有的参数在指针char *指向的内存中，数组中的元素个数为argc个<br>第一个参数为程序的名称。</p><hr><h2 id="102、volatile关键字的作用-——-参见条目39"><a href="#102、volatile关键字的作用-——-参见条目39" class="headerlink" title="102、volatile关键字的作用 —— 参见条目39"></a>102、volatile关键字的作用 —— 参见条目39</h2><p>volatile用处：</p><ol><li><p>中断服务程序中修改的供其他程序检测的变量要加volatile【都要从内存中取而非寄存器】</p></li><li><p>多任务环境下各任务间共享的标志应该加volatile</p></li><li><p>存储器映射的硬件寄存器通常也要加volatile说明，因为每次对它的读写都可能有不同意义。</p></li></ol><hr><h2 id="103、如果有一个空类，它会默认添加哪些函数？"><a href="#103、如果有一个空类，它会默认添加哪些函数？" class="headerlink" title="103、如果有一个空类，它会默认添加哪些函数？"></a>103、如果有一个空类，它会默认添加哪些函数？</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Empty</span>();  <span class="comment">// 缺省构造函数</span></span><br><span class="line"><span class="built_in">Empty</span>(<span class="type">const</span> Empty&amp;);  <span class="comment">// 拷贝构造函数</span></span><br><span class="line">~<span class="built_in">Empty</span>(); <span class="comment">// 析构函数</span></span><br><span class="line">Empty&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Empty&amp;); <span class="comment">// 赋值运算符</span></span><br></pre></td></tr></table></figure><hr><h2 id="104、C-中标准库是什么"><a href="#104、C-中标准库是什么" class="headerlink" title="104、C++中标准库是什么"></a>104、C++中标准库是什么</h2><ol><li><p>C++标准库可以分为两部分：<br> 标准函数库：这个库是由通用的、独立的、不属于任何类的函数组成的。函数库继承自C语言。<br> 面向对象类库：这个库是<code>类及其相关函数</code>的集合。</p></li><li><p>输入&#x2F;输出（I&#x2F;O）、字符串和字符处理、数学、时间、日期、本地化、动态分配、其他、宽字符函数。</p></li><li><p>标准的C++ I&#x2F;O类、String类、数值类、STL容器类、STL算法、STL函数对象、STL迭代器、STL分配器、本地化库、异常处理库、杂项支持库</p></li></ol><hr><h2 id="105、const-char-和-string之间的关系？"><a href="#105、const-char-和-string之间的关系？" class="headerlink" title="105、const char* 和 string之间的关系？"></a>105、const char* 和 string之间的关系？</h2><ol><li><p>string 是C++标准库里面其中一个，封装了对字符串的操作<br>实际操作过程我们可以用 const char*给string类初始化。</p></li><li><p>三者转换关系如下所示</p><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>例子</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// string 转 const char*</span></span><br><span class="line">string s = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* c_s = s.<span class="built_in">c_str</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// const char* 转 string，直接赋值即可</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* c_s = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(c_s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// string 转 char*</span></span><br><span class="line">string s = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">char</span>* c;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> len = s.<span class="built_in">length</span>();</span><br><span class="line">c = <span class="keyword">new</span> <span class="type">char</span>[len + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(c, s.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// char* 转 string</span></span><br><span class="line"><span class="type">char</span>* c = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(c)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const char* 转 char*</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* cpc = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">char</span> *pc = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(cpc) + <span class="number">1</span>]；</span><br><span class="line"><span class="built_in">strcpy</span>(pc, cpc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// char* 转 const char*，直接赋值即可</span></span><br><span class="line"><span class="type">char</span>* pc = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* cpc = pc;</span><br></pre></td></tr></table></figure>     </div></div>    </div></li></ol><hr><h2 id="106、什么情况用指针参数，什么时候用引用参数？"><a href="#106、什么情况用指针参数，什么时候用引用参数？" class="headerlink" title="106、什么情况用指针参数，什么时候用引用参数？"></a>106、什么情况用指针参数，什么时候用引用参数？</h2><ol><li><p>使用引用参数原因<br> 程序员能修改调用函数中的数据对象<br> 通过传递引用而不是整个数据对象，可以提高程序运行速度</p></li><li><p>一般的原则：对于使用引用的值而不做修改的函数：<br> 如果数据对象很小，如内置数据类型或小型结构，则<code>值传递</code><br> 如果数据对象是数组，则使用<code>指针</code>，并且指针声明为指向const的指针<br> 如果数据对象是较大的结构，则使用<code>const指针</code>或<code>引用</code>，以提高程序效率【可以节省构造所需时间和空间】<br> 如果数据对象是类对象，则使用<code>const引用</code>【传递类对象参数的标准方式是按照引用传递】</p></li><li><p>对于修改函数中数据的函数：<br> 如果数据是内置数据类型，则使用指针<br> 如果数据对象是数组，则<b>只能</b>使用指针<br> 如果数据对象是结构，则使用引用或指针<br> 如果数据对象是类对象，则使用引用</p></li></ol><hr><h2 id="107、静态绑定和动态绑定？-——-参照条目71"><a href="#107、静态绑定和动态绑定？-——-参照条目71" class="headerlink" title="107、静态绑定和动态绑定？ —— 参照条目71"></a>107、静态绑定和动态绑定？ —— 参照条目71</h2><hr><h2 id="108、如何设计一个计算仅单个子类的对象个数"><a href="#108、如何设计一个计算仅单个子类的对象个数" class="headerlink" title="108、如何设计一个计算仅单个子类的对象个数"></a>108、如何设计一个计算仅单个子类的对象个数</h2><ol><li><p>为类设计一个static静态变量count作为计数器</p></li><li><p>类定义结束后初始化count【注意是定义结束后，static类成员独立与类对象存在】</p></li><li><p>在构造函数中count+1</p></li><li><p>设计拷贝构造函数，在进行拷贝构造函数中进行count+1</p></li><li><p>设计复制构造函数，在进行复制函数中对count+1操作</p></li><li><p>在析构函数中对count进行-1</p></li></ol><hr><h2 id="109、如何快速定位错误出现的地方？"><a href="#109、如何快速定位错误出现的地方？" class="headerlink" title="109、如何快速定位错误出现的地方？"></a>109、如何快速定位错误出现的地方？</h2><ol><li><p>如果是简单的错误，可以直接双击错误列表里的错误项或者生成输出的错误信息中带行号的地方就可以让编辑窗口定位</p></li><li><p>对于复杂的模板错误，最好使用生成输出窗口。<br>多数情况下触发错误的位置是最靠后的引用位置。<br>如果这样确定不了错误，就需要先把自己写的代码里的引用位置找出来，然后逐个分析。</p></li></ol><hr><h2 id="110、初始化成员列表什么时候用？调用过程-——-参照条目59"><a href="#110、初始化成员列表什么时候用？调用过程-——-参照条目59" class="headerlink" title="110、初始化成员列表什么时候用？调用过程 —— 参照条目59"></a>110、初始化成员列表什么时候用？调用过程 —— 参照条目59</h2><h2 id="引用、常量、基类、成员类，按照类中定义顺序执行"><a href="#引用、常量、基类、成员类，按照类中定义顺序执行" class="headerlink" title="引用、常量、基类、成员类，按照类中定义顺序执行"></a>引用、常量、基类、成员类，按照类中定义顺序执行</h2><h2 id="111、在进行函数参数以及返回值传递时，可以使用引用或者值传递，其中使用引用的好处？"><a href="#111、在进行函数参数以及返回值传递时，可以使用引用或者值传递，其中使用引用的好处？" class="headerlink" title="111、在进行函数参数以及返回值传递时，可以使用引用或者值传递，其中使用引用的好处？"></a>111、在进行函数参数以及返回值传递时，可以使用引用或者值传递，其中使用引用的好处？</h2><p>对比值传参，引用传参的好处：</p><ol><li><p>在函数内部可以对此参数进行修改</p></li><li><p>提高函数调用和运行的效率（因为没有传值和生成副本的时间和空间消耗）</p></li></ol><p>如果函数的实参实质就是形参，不过这个形参的作用域只在函数体内部，也即实参和形参是两个不同的东西，形参代替实参，则值传递。</p><p>函数调用时，值的传递机制是通过“形参&#x3D;实参”来对形参赋值达到传值目的，产生了一个实参的副本。</p><p>即使函数内部有对参数的修改，也只是针对形参，也就是那个副本，实参不会有任何更改。</p><p>函数一旦结束，形参声明也宣告终结，做出的修改一样没对任何变量产生影响。</p><p>限制：</p><ol><li><p>不能返回局部变量的引用，因为函数返回以后局部变量就会被销毁。</p></li><li><p>不能返回函数内部new分配的内存的引用。虽然不存在局部变量的被动销毁问题，可对于这种情况（返回函数内部new分配内存的引用），有面临其他尴尬局面<br>如：被函数返回的引用只是作为一个临时变量出现，而没有赋予一个实际的变量，则引用指向的空间（new分配）就无法释放，memory leak</p></li><li><p>可以返回类成员的引用，但最好是const。<br>因为如果其他对象可以获得该属性的非常量引用，则对该属性单纯赋值会破坏业务规则完整性。</p></li></ol><hr><h2 id="112、说一说strcpy、sprintf和memcpy这三个函数的不同之处"><a href="#112、说一说strcpy、sprintf和memcpy这三个函数的不同之处" class="headerlink" title="112、说一说strcpy、sprintf和memcpy这三个函数的不同之处"></a>112、说一说strcpy、sprintf和memcpy这三个函数的不同之处</h2><ol><li><p>操作对象不同</p></li><li><p>strcpy的两个操作对象均为字符串</p></li><li><p>sprintf的操作源对象可以是多种数据类型，目的操作对象是字符串</p></li><li><p>memcpy的两个对象就是两个任意可操作的内存地址，并不限于任何数据类型</p></li><li><p>执行效率不同<br>  memcpy 最高；strcpy 次之；sprintf 效率最低</p></li><li><p>实现功能不同</p></li><li><p>strcpy主要实现字符串变量间的拷贝</p></li><li><p>sprintf主要实现其他数据类型格式到字符串的转化</p></li><li><p>memcpy主要是内存块间的拷贝</p></li></ol><hr><h2 id="113、将引用作为函数参数好处？"><a href="#113、将引用作为函数参数好处？" class="headerlink" title="113、将引用作为函数参数好处？"></a>113、将引用作为函数参数好处？</h2><ol><li><p>传递引用给函数和传递指针的效果是一样的【都对实参进行修改】</p></li><li><p>使用引用传递的参数，在内存中并没有实参的副本，而是直接对实参操作【如果传递的数据较大时，用引用效率更高】</p></li><li><p>使用指针作为函数的参数虽然也能达到与使用引用的效果，但是在被调函数中同样要给形参分配存储单元<br>且需要重复使用”*”运算符进行运算，容易导致程序错误且阅读性较差。<br>同时，指针不如引用清晰</p></li></ol><hr><h2 id="114、指针和数组的区别？"><a href="#114、指针和数组的区别？" class="headerlink" title="114、指针和数组的区别？"></a>114、指针和数组的区别？</h2><ol><li><p>指针在内存中是连续存放的，开辟一块连续的内存空间；<br>数组所占存储空间：sizeof(数组名);<br>数组大小：sizeof(数组名)&#x2F;sizeof(数组元素数据类型);</p></li><li><p>用运算符sizeof可以计算出数组的容量（字节数)<br>sizeof(p)，p为指针得到的是一个指针变量的字节数，而不是p所指的内存容量。</p></li><li><p>编译器为了简化对数组的支持，实际上是利用指针实现了对数组的支持。<br>具体来说，就是将表达式中的数组元素引用转换为指针加偏移量的引用。</p></li><li><p>在向函数传递参数的时候，如果实参是一个数组，那用于接受的形参为对应的指针。<br>也就是传递过去的是数组的首地址而不是整个数组，能提高效率。</p></li><li><p>在使用下标的时候，两者的用法相同，都是源地址加下标地址，<br>不过数组的原地址就是数组首元素的地址是固定的，指针的原地址不是固定的。</p></li></ol><hr><h2 id="115、如何组织一个类被实例化？有哪些办法？"><a href="#115、如何组织一个类被实例化？有哪些办法？" class="headerlink" title="115、如何组织一个类被实例化？有哪些办法？"></a>115、如何组织一个类被实例化？有哪些办法？</h2><ol><li><p>将类定义为抽象基类或将构造函数声明为private</p></li><li><p>不允许类外部创建类对象，只能在类内部创建类对象</p></li></ol><hr><h2 id="116、如何禁止程序自动生成拷贝构造函数？"><a href="#116、如何禁止程序自动生成拷贝构造函数？" class="headerlink" title="116、如何禁止程序自动生成拷贝构造函数？"></a>116、如何禁止程序自动生成拷贝构造函数？</h2><ol><li><p>为了组织编译器默认生成拷贝构造函数和拷贝赋值函数，我们需要手动重写这两个函数<br>某些情况下，为了避免调用拷贝构造函数和拷贝赋值函数，我们要将它们设置为private，防止被调用。</p></li><li><p>类的成员函数和friend函数还是可以调用private函数，如果这个private函数只声明不定义，则会产生连接错误</p></li><li><p>真对上述两种情况，我们可以定义一个base类，在base类中将拷贝构造函数和拷贝赋值函数设置成private，<br>那么派生类中编译器将不会自动生成这两个函数，且由于base类中该函数是私有的，因此派生类将阻止编译器执行相关的操作。</p></li></ol><hr><h2 id="117、Debug和release的区别？"><a href="#117、Debug和release的区别？" class="headerlink" title="117、Debug和release的区别？"></a>117、Debug和release的区别？</h2><ol><li><p>调试版本，包含调试信息，因此容量比release大得多，并且不能进行任何优化（优化使调试复杂化，因为源代码和生成的指令间关系更复杂），便于调试。<br>Debug模式下生成两个文件，除了.exe和.dll文件之外，还有一个.pdb文件，该文件<code>记录了代码中断点等调试信息</code>。</p></li><li><p>发布版本，不对源代码进行任何调试，编译时对应用程序的速度进行优化，使得程序在代码大小和运行速度上都是最优的。<br>（调试信息可在单独的PDB文件中生成）<br>Release模式下生成一个文件.exe或.dll文件</p></li><li><p>实际上，Debug和Release并没有本质的界限，他们只是一组编译选项的集合，编译器只是按照预定的选项行动。<br>事实上，我们甚至可以修改这些选项，从而得到优化过的调试版本或带跟踪语句的发布版本。</p></li></ol><hr><h2 id="118、main函数的返回值有什么值得考究之处？"><a href="#118、main函数的返回值有什么值得考究之处？" class="headerlink" title="118、main函数的返回值有什么值得考究之处？"></a>118、main函数的返回值有什么值得考究之处？</h2><p>  程序运行过程入口点main函数，main()函数返回值类型必须是int，这样返回值才能传递给程序激活者（如操作系统）表示程序正常退出。</p><h2 id="main-int-args-char-argv-参数的传递。参数的处理，一般会调用getopt-函数处理，但实践中，这仅仅是一部分，不会经常用到。"><a href="#main-int-args-char-argv-参数的传递。参数的处理，一般会调用getopt-函数处理，但实践中，这仅仅是一部分，不会经常用到。" class="headerlink" title="  main(int args, char **argv)参数的传递。参数的处理，一般会调用getopt()函数处理，但实践中，这仅仅是一部分，不会经常用到。"></a>  main(int args, char **argv)参数的传递。参数的处理，一般会调用getopt()函数处理，但实践中，这仅仅是一部分，不会经常用到。</h2><h2 id="119、模板类？写一个比较大小模板类"><a href="#119、模板类？写一个比较大小模板类" class="headerlink" title="119、模板类？写一个比较大小模板类"></a>119、模板类？写一个比较大小模板类</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> type1, <span class="keyword">typename</span> type2&gt;  <span class="comment">// 函数模板</span></span><br><span class="line"><span class="function">type1 <span class="title">Max</span><span class="params">(type1 a, type2 b)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;Max = &quot;</span> &lt;&lt; <span class="built_in">Max</span>(<span class="number">5.5</span>, <span class="string">&#x27;a&#x27;</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该模板有个比较隐晦的bug，即a、b只有在能进行转型的时候才能进行比较，否则a &gt; b这一步是会报错的。</p><h2 id="这个时候往往需要对于-gt-号进行重载，代码量-；"><a href="#这个时候往往需要对于-gt-号进行重载，代码量-；" class="headerlink" title="这个时候往往需要对于 &gt; 号进行重载，代码量++；"></a>这个时候往往需要对于 &gt; 号进行重载，代码量++；</h2><h2 id="120、strcpy函数和strncpy函数的区别？哪个函数更安全？"><a href="#120、strcpy函数和strncpy函数的区别？哪个函数更安全？" class="headerlink" title="120、strcpy函数和strncpy函数的区别？哪个函数更安全？"></a>120、strcpy函数和strncpy函数的区别？哪个函数更安全？</h2><ol><li><p>函数原型</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span> * <span class="title">strcpy</span><span class="params">(<span class="type">char</span> * strDest, <span class="type">const</span> <span class="type">char</span>* strSrc)</span></span>;</span><br><span class="line"><span class="function"><span class="type">char</span> * <span class="title">strncpy</span><span class="params">(<span class="type">char</span>* strDest, <span class="type">const</span> <span class="type">char</span>* strSrc, <span class="type">int</span> pos)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>strcpy函数：如果参数dest所指的内存空间不够大，可能会造成缓冲溢出（buffer Overflow）的错误情况，在编写程序的时候特别留意，或用strncpy()；<br>strncpy函数：用来复制源字符串的前n个字符，src和dest所指的内存区域不能重叠，且dest必须有足够的空间存放n个字符。</p></li><li><p>如果目标长 &gt; 指定长 &gt; 源长，则将源长全部拷贝到目标长，自动加上’\0’<br>如果指定长 &lt; 源长，则将源长中按指定长度拷贝到目标字符串，不包括’\0’；<br>如果指定长 &gt; 目标长，运行时错误。<br>【源长：源字符串；指定长：指定的n；目标长：目的字符串】</p></li></ol><hr><h2 id="121、static-cast比C语言中的转换强在哪里？"><a href="#121、static-cast比C语言中的转换强在哪里？" class="headerlink" title="121、static_cast比C语言中的转换强在哪里？"></a>121、static_cast比C语言中的转换强在哪里？</h2><ol><li><p>更加安全</p></li><li><p>更直接明显，能够一眼看出是什么类型转换为什么类型，容易找出程序中的错误；<br>可以清楚地辨别代码中每个显式的强制类型转换；<br>可读性更好，能体现程序员的意图。</p></li></ol><hr><h2 id="122、成员函数里memset-this-0-sizeof-this-会发生什么？"><a href="#122、成员函数里memset-this-0-sizeof-this-会发生什么？" class="headerlink" title="122、成员函数里memset(this, 0, sizeof(*this))会发生什么？"></a>122、成员函数里memset(this, 0, sizeof(*this))会发生什么？</h2><ol><li><p>有时候类里面定义了很多int, char, struct等C语言里的那些类型的变量，习惯在构造函数中都初始化为0，可以使用该语句全部置为0.<br>对于这种情况可以很好的工作，但也有例外情况</p></li><li><p>类含有虚函数表：这么做会破坏虚函数表，后续对虚函数表的调用都将出现异常</p></li><li><p>类中含有C++类型的对象：例如，类中定义了一个list的对象，<br>由于在构造函数体的代码执行之前就对list对象完成了初始化，假设list在它的构造函数里分配了内存，这样做就破坏了list对象的内存</p></li></ol><hr><h2 id="123、回调函数？作用？"><a href="#123、回调函数？作用？" class="headerlink" title="123、回调函数？作用？"></a>123、回调函数？作用？</h2><ol><li><p>当发生某种事件时，系统或其他函数将会自动调用程序员定义的一段函数。</p></li><li><p>回调函数就相当于一个中断处理函数，由系统在符合设定的条件时自动调用。<br>为此，应当做三件事：</p><ol><li>声明</li><li>定义</li><li>设置触发条件，即在函数中把回调函数名称转化为地址作为一个参数，以便系统调用。</li></ol></li><li><p>回调函数就是一个通过函数指针调用的函数。<br>如果你把函数的指针（地址）作为参数传递给另一个函数，当这个指针被用为调用它所指向的函数时，我们称之为回调函数。</p></li><li><p>因为可以把调用者与被调用者分开。<br>调用者不关心谁是被调用者，所有它需要知道的，只是存在一个具有某种特定原型、某些限制条件（如返回值int）的被调用函数。</p></li></ol><hr><h2 id="124、一致性哈希"><a href="#124、一致性哈希" class="headerlink" title="124、一致性哈希"></a>124、一致性哈希</h2><p><b>一致性哈希</b></p><p>一致性哈希是一种哈希算法，就是<b>在移除或增加一个结点时，能使尽可能小的改变已存在key的映射关系</b>。</p><p>尽可能少地改变已有的映射关系，一般是沿着顺时针进行操作，回答之前可以想想，真实情况如何处理</p><p>一致性哈希将整个哈希值空间<b>组织成一个虚拟的圆环</b>，假设哈希的值空间为 0~2^32-1，整个哈希环如图所示</p><img src="/2022/03/02/cpp/hash1.png" class=""><p>一致性哈希的基本思想就是使用相同的hash算法将数据和结点都映射到图中的环形哈希空间中，上右图显示了4个数据object1-4在环上的分布图</p><p><b>结点和数据映射</b></p><p>假设有一批服务器，可以根据IP或者主机名作为关键字进行哈希，根据结果映射到哈希环中，3台服务器分别是nodeA-C</p><p>现在有一批数据Object1-4需要存在服务器上，则可以使用相同的哈希算法对数据进行哈希，其结果必然也在环上，也可以沿着顺时针方向寻找，找到一个节点（服务器）就将数据存在该结点上，这样数据和结点就产生了一对一的关联，如下图所示：</p><img src="/2022/03/02/cpp/hash2.png" class=""><p><b>移除结点</b></p><p>如果一台服务器出现问题，如上图的nodeB，则受影响的是其逆时针方向至下一个结点之间的数据，只需将这些数据映射到它顺时针方向的第一个结点上即可。<br>如下左图：</p><img src="/2022/03/02/cpp/hash3.png" class=""><p><b>添加结点</b></p><p>如果新增一台服务器nodeD，受影响的是其逆时针方向至下一个结点之间的数据，将这些数据映射到nodeD上即可，如上右图</p><p><b>虚拟结点</b></p><p>假设仅有两台服务器：nodeA和nodeC，nodeA映射了1条数据，nodeC映射了3条，这样数据分布是不平衡的。</p><p>引入虚拟结点，假设结点复制个数为2，则nodeA变成：nodeA1 和 nodeA2，nodeC变成：nodeC1 和 nodeC2，映射情况如下：</p><img src="/2022/03/02/cpp/hash4.png" class=""><h2 id="这样数据分布均衡，平衡性提高"><a href="#这样数据分布均衡，平衡性提高" class="headerlink" title="这样数据分布均衡，平衡性提高"></a>这样数据分布均衡，平衡性提高</h2><h2 id="125、C-从代码到可执行程序经历了什么？"><a href="#125、C-从代码到可执行程序经历了什么？" class="headerlink" title="125、C++从代码到可执行程序经历了什么？"></a>125、C++从代码到可执行程序经历了什么？</h2><ol><li><p>预编译<br>  主要处理源代码文件中的以”#”开头的预编译指令。处理规则如下：</p><ol><li><p>删除所有的#define 展开所有宏定义</p></li><li><p>处理所有的条件预编译指令，如”#if”、”#endif”、”#ifdef”、”#elif”、”#else”</p></li><li><p>处理”#include”预编译指令，将文件内容替换到它的位置，这个过程是递归进行的，文件中可能包含其他文件。</p></li><li><p>删除所有的注释，”&#x2F;&#x2F;“和”&#x2F;**&#x2F;“</p></li><li><p>保留所有的#pragma 编译器指令，编译器需要用到他们，如：#pragma once是为了防止有文件被重复引用</p></li><li><p>添加行号和文件标识，便于编译时编译器产生调试用的行号信息，和编译时产生编译错误或警告时显示行号</p></li></ol></li><li><p>编译<br>  把预编译之后生成的xxx.i 或 xxx.ii文件，进行一系列词法分析、语法分析、语义分析及优化后，生成相应的汇编代码文件。</p><ol><li><p>词法分析：利用类似于“有限状态机”的算法，将源代码程序输入到扫描机中，将其中的字符序列分割成一系列的记号。</p></li><li><p>语法分析：语法分析对由扫描器产生的记号进行语法分析，产生语法树。由语法分析器输出的语法树是一种以表达式为结点的树。</p></li><li><p>语义分析：语法分析器只是完成了对表达式语法层面的分析，语义分析器则对表达式是否有意义进行判断，<br>      其分析的语义是<code>静态语义</code> —— 在编译器能分清的语义，相对应的动态语义是在运行期才能确定的语义。</p></li><li><p>优化：源代码级别的一个优化过程。</p></li><li><p>目标代码生成：由代码生成器将中间代码转化成目标机器代码，生成一系列的代码序列 —— 汇编语言表示。</p></li><li><p>目标代码优化：目标代码优化器对上述的目标机器代码进行优化：寻找合适的寻址方式、使用位移来替代乘法运算、删除多余的指令等。</p></li></ol></li><li><p>汇编<br>  将汇编代码转变成机器可以执行的指令（机器码文件）。<br>  汇编器的编译过程相对于编译器来说更简单，没有复杂的语法和语义，更不需要做指令优化，只是根据汇编指令和机器指令的对照表一一翻译过来，<br>  汇编过程由汇编器完成。经汇编之后，产生目标文件（与可执行文件格式几乎一样）xxx.o（Windows下）、xxx.obj（Linux下）</p></li><li><p>链接<br>  将不同的源文件产生的目标文件进行链接，从而形成一个可以执行的程序。链接可以分为静态链接和动态链接：</p><ol><li>静态链接<br>   函数和数据被编译进一个二进制文件。<br>   在使用静态库的情况下，在编译链接可执行文件时，链接器从库中复制只写函数和数据并把它们和应用程序的其他模块组合起来创建最终可执行文件。</li></ol><p>   空间浪费：因为每个可执行程序中对所有需要的目标文件都要有一份副本，<br>            所以如果多个程序对同一个目标文件都有依赖性，会出现同一个目标文件都在内存存在多个副本</p><p>   更新困难：每当库函数的代码修改，这时就要重新进行编译链接形成可执行程序。</p><p>   运行速度快：静态链接的优点就是在可执行程序中已经具备了所有执行程序所需要的任何东西，在执行的时候运行速度快。</p><ol start="2"><li>动态链接<br>   动态链接的基本思想是把程序按照模块拆分成各个相对独立部分，在程序运行时才将它们链接在一起形成一个完整的程序<br>   而不是像静态链接一样把所有程序模块都链接成一个单独的可执行文件。</li></ol><p>   共享库：就是即使需要每个程序都依赖同一个库，但是该库不会像静态链接那样在内存中存在多份副本，而是这多个程序在执行时共享一个副本。</p><p>   更新方便：更新时只需要替换掉原来的目标文件，而无需将所有程序重新链接一遍。<br>            当程序下一次运行时，新版本的目标文件会被自动加载到内存并链接起来，程序就完成了升级的目标。</p><p>   性能损耗：因为把链接推迟到了程序运行时，所以每次执行程序都需要进行链接，所以性能会有一定损失。</p></li></ol><hr><h2 id="126、友元函数？"><a href="#126、友元函数？" class="headerlink" title="126、友元函数？"></a>126、友元函数？</h2><p>因为编译器必须能读取到这个结构的声明以理解这个数据类型的大小、行为等方面的所有规则。</p><p>而谁能访问private部分在任何关系中都很重要。</p><blockquote><p>补充：友元函数不一定要在类内声明，普通友元函数可以在类外声明<br>      只有友元工厂必须用到类内声明友元函数。</p></blockquote><hr><h2 id="127、友元函数和友元类的基本情况"><a href="#127、友元函数和友元类的基本情况" class="headerlink" title="127、友元函数和友元类的基本情况"></a>127、友元函数和友元类的基本情况</h2><p>友元提供了不同类的成员函数之间、类的成员函数和一般函数之间进行数据共享的机制。<br>通过友元，一个不同函数或者另一个类中的成员函数可以访问类中的私有成员和保护成员。<br>友元的正确使用能提高程序的陨星效率，但友元机制本身也破坏了类的封装性和数据的隐藏性，导致程序可维护性变差。</p><ol><li>友元函数</li></ol><p>友元函数是定义在类外的普通函数，不属于任何类，可以访问其他类的私有成员。<br>但是需要在类的定义中声明所有可以访问它的友元函数。</p><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>友元函数举例</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">set_show</span><span class="params">(<span class="type">int</span> x, A &amp;a)</span></span>;  <span class="comment">// 该函数是友元函数的声明</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="type">int</span> data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_show</span><span class="params">(<span class="type">int</span> t, A &amp;a)</span></span>&#123; <span class="comment">// 友元函数定义，为了访问类A中的成员</span></span><br><span class="line">  a.data = x;</span><br><span class="line">  cout &lt;&lt; a.data &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  A a;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">set_show</span>(<span class="number">1</span>, a);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><p>一个函数可以是多个类的友元函数，但是每个类中都要声明这个函数。</p><ol start="2"><li>友元类<br>友元类的所有成员函数都是另一个类的友元函数，都可以访问另一个类中的隐藏信息（包括私有成员和保护成员）</li></ol><p>但是另一个类里面也要相应地进行声明</p><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>友元类例子</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">C</span>;   <span class="comment">// 友元类的声明</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="type">int</span> data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>&#123;  <span class="comment">// 友元类定义，为了访问类A中的成员</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">set_show</span><span class="params">(<span class="type">int</span> x, A &amp;a)</span></span>&#123;</span><br><span class="line">    a.data = x;  </span><br><span class="line">    cout &lt;&lt; a.data &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  A a;</span><br><span class="line">  C c;</span><br><span class="line"></span><br><span class="line">  c.<span class="built_in">set_show</span>(<span class="number">1</span>, a);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><p>使用友元类时注意：</p><ol><li><p>友元关系不能被继承。</p></li><li><p>友元关系是单向的，不具有交互性。若类B是类A的友元，类A不一定是类B的友元，要看在类中是否有相应的声明</p></li><li><p>友元关系不具有传递性，若类B是类A的友元，类C是类B的友元，则类C不一定是类A的友元，要看类中是否有对应声明</p></li></ol><hr><h2 id="128、使用C语言实现C-的继承"><a href="#128、使用C语言实现C-的继承" class="headerlink" title="128、使用C语言实现C++的继承"></a>128、使用C语言实现C++的继承</h2><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>C语言实现C++继承</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C++中的继承与多态</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;   <span class="comment">// C++中的多态，使用虚函数实现</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;A::fun()&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">B</span>:<span class="keyword">public</span> A&#123;  <span class="comment">// C++中的继承：B类共有继承A类</span></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;   <span class="comment">// C++中的多态：通过虚函数实现（子类的关键字virtual可加可不加）</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;B::fun()&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C语言模拟C++的继承与多态</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*FUN)</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_A</span>&#123;  <span class="comment">// 父类</span></span><br><span class="line">  FUN _fun; <span class="comment">//由于C语言中结构体不能包含函数，故只能用函数指针在外面实现</span></span><br><span class="line">  <span class="type">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_B</span>&#123;  <span class="comment">// 子类</span></span><br><span class="line">  _A _a_;   <span class="comment">// 在子类中定义一个基类的对象即可实现对父类的继承</span></span><br><span class="line">  <span class="type">int</span> _b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> _fA()&#123; <span class="comment">// 父类的同名函数</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;_A:_fun()\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> _fB()&#123; <span class="comment">// 子类的同名函数</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;_B:_fun()\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Test</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">// 测试C++中的继承与多态</span></span><br><span class="line"></span><br><span class="line">  A a;  <span class="comment">// 定义一个父类对象a</span></span><br><span class="line">  B b;  <span class="comment">// 定义一个子类对象b</span></span><br><span class="line"></span><br><span class="line">  A* p1 = &amp;a; <span class="comment">// 定义一个父类指针指向父类的对象</span></span><br><span class="line"></span><br><span class="line">  p1-&gt;<span class="built_in">fun</span>();  <span class="comment">// 调用父类同名函数</span></span><br><span class="line"></span><br><span class="line">  p1 = &amp;b;  <span class="comment">// 让父类指针指向子类的对象</span></span><br><span class="line"></span><br><span class="line">  p1-&gt;<span class="built_in">fun</span>();  <span class="comment">// 调用子类同名函数</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// C语言模拟继承与多态</span></span><br><span class="line"></span><br><span class="line">  _A _a;  <span class="comment">// 定义一个父类对象 _a;</span></span><br><span class="line">  _B _b;  <span class="comment">// 定义一个子类对象 _b;</span></span><br><span class="line"></span><br><span class="line">  _a._fun = _fA;  <span class="comment">// 父类对象调用父类的同名函数</span></span><br><span class="line">  _b._a_._fun = _fB;  <span class="comment">// 子类的对象调用子类的同名函数</span></span><br><span class="line"></span><br><span class="line">  _A* p2 = &amp;_a; <span class="comment">// 定义一个父类指针指向父类的对象</span></span><br><span class="line">  p2-&gt;_fun(); <span class="comment">// 调用父类同名函数</span></span><br><span class="line"></span><br><span class="line">  p2 = (_A*) &amp;_b; <span class="comment">// 让父类指针指向子类的对象，由于类型不匹配所以要强制类型转换</span></span><br><span class="line">  p2-&gt;_fun();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><hr><h2 id="129、动态编译和静态编译"><a href="#129、动态编译和静态编译" class="headerlink" title="129、动态编译和静态编译"></a>129、动态编译和静态编译</h2><ol><li><p>静态编译，编译器在编译可执行文件时，把需要用到的对应动态链接库中的部分提取出来，连接到可执行文件中去，使可执行文件在运行时不依赖动态链接库</p></li><li><p>动态编译的可执行文件需要附带一个动态链接库，在执行时，需要调用其对应动态链接库的命令。<br>优点：</p><ol><li><p>缩小了执行文件本身的体积</p></li><li><p>加快了编译速度，节省系统资源。<br>缺点：</p></li><li><p>哪怕很简单的程序，只用到了链接库的一两条命令，也需要附带一个相对庞大的链接库</p></li><li><p>如果其他计算机上没有安装对应的运行库，则用动态编译的可执行文件就不能运行。</p></li></ol></li></ol><hr><h2 id="130、hello-c程序的编译过程"><a href="#130、hello-c程序的编译过程" class="headerlink" title="130、hello.c程序的编译过程"></a>130、hello.c程序的编译过程</h2><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>例子程序</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;hello, world\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><p>在Unix系统上，编译器将源文件转换为目标文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o hello hello.c</span><br></pre></td></tr></table></figure><p>过程如下：</p><img src="/2022/03/02/cpp/cppCompile.png" class=""><ul><li><p>预处理阶段：处理以#开头的预处理命令；</p></li><li><p>编译阶段：翻译成汇编文件</p></li><li><p>汇编阶段：将汇编文件翻译成可重定位目标文件；</p></li><li><p>链接阶段：将可重定位目标文件和printf.o等单独预编译好的目标文件进行合并，得到最终的可执行目标文件。</p><ul><li><p>静态链接：<br> 静态链接器以一组可重定位目标文件为输入，生成一个完全链接的可执行目标文件为输出。连接器主要完成以下两个任务：</p><ol><li><p>符号解析：每个符号对应一个函数、全局变量或一个静态变量，符号解析的目的是将每个符号引用于一个符号定义关联起来。</p></li><li><p>重定位：链接器通过把每个符号定义与一个内存位置关联起来，然后修改所有对这些符号的引用，使得他们指向这个内存位置。</p></li></ol>   </li><li><p>目标文件：</p><ol><li><p>可执行目标文件： 可以直接在内存中执行；</p></li><li><p>可重定位目标文件：可与其他可重定位目标文件在链接阶段合并，创建一个可执行目标文件；</p></li><li><p>共享目标文件：这是一种特殊的可重定位目标文件，可以在运行时被动态加载到内存并链接；</p></li></ol></li><li><p>动态连接：<br>  静态库有以下两个问题：<br>1. 当静态库更新时那么整个程序都要重新进行链接<br><br>2. 对于printf这种标准函数库，如果每个程序都要有代码，则会极大浪费资源<br>  共享库就是为了解决静态库的这两个问题设计的，在Linux系统中通常会用.so后缀来表示，Windows系统上它们被称为DLL。<br>  共享库具有以下特点：<br>1. 在给定的文件系统中一个库只有一个文件，所有引用该库的可执行目标文件都共享这个文件，它不会被复制到引用它的可执行文件中；<br><br>2. 在内存中，一个共享库的.text节（已编译程序的机器代码）的一个副本可以被不同的正在运行的进程共享。</p>  </li></ul></li></ul><hr><h2 id="131、源代码-gt-预处理-gt-编译-gt-优化-gt-汇编-gt-链接-gt-可执行文件"><a href="#131、源代码-gt-预处理-gt-编译-gt-优化-gt-汇编-gt-链接-gt-可执行文件" class="headerlink" title="131、源代码 -&gt; 预处理 -&gt; 编译 -&gt; 优化 -&gt; 汇编 -&gt; 链接 -&gt; 可执行文件"></a>131、源代码 -&gt; 预处理 -&gt; 编译 -&gt; 优化 -&gt; 汇编 -&gt; 链接 -&gt; 可执行文件</h2><ol><li><p>预处理<br>读取C源程序，对其中的伪指令（以#开头的指令）和特殊符号进行处理。<br>包括宏定义替换、条件编译指令、头文件包含指令、特殊符号。<br>预编译程序所完成的基本上是对源程序的“替代”工作。<br>经过此种替代，生成一个没有宏定义、没有条件编译指令、没有特殊符号的输出文件。<br>.i预处理后的c文件，.ii预处理后的C++文件。</p></li><li><p>编译阶段<br>编译程序所要作的工作就是通过词法分析和语法分析，在确认所有的指令都符合语法规则后，将其翻译成等价的中间代码表示或汇编代码.s文件。</p></li><li><p>汇编过程<br>汇编过程实际上指把汇编语言代码翻译成目标机器指令的过程。<br>对于被翻译系统处理的每一个C语言源程序，都将最终经过这一处理而得到相应的目标文件。<br>目标文件中所存放的也就是与源程序等效的目标的机器语言代码.o文件</p></li><li><p>链接阶段<br>链接程序的主要工作就是将有关的目标文件彼此相连接，也即将在一个文件中引用的符号同该符号在另外一个文件中的定义链接起来。<br>使得所有的这些目标文件称为一个能够被操作系统装入执行的统一整体。</p></li></ol><hr><h2 id="132、经典的锁"><a href="#132、经典的锁" class="headerlink" title="132、经典的锁"></a>132、经典的锁</h2><ol><li>读写锁</li></ol><ul><li><p>多个读者可以同时进行读</p></li><li><p>写者必须互斥（只允许一个写者写，不能读者写者同时进行）</p></li><li><p>写者优先于读者（一旦有写者，则后续读者必须等待，唤醒时优先考虑写者）</p></li></ul><ol start="2"><li>互斥锁<br>  一次只能一个线程拥有互斥锁，其他线程只有等待</li></ol><p>  互斥锁是在抢所失败的情况下主动放弃CPU进入睡眠状态，直到锁的状态改变时再唤醒，操作系统负责线程调度<br>  为了实现锁的状态发生改变时唤醒阻塞的线程或者进程，需要把锁交给操作系统管理，所以互斥锁在加锁操作时涉及上下文切换。<br>  互斥锁实际的效率还是可以让人接受的，加锁时间大概100ns左右，实际上互斥锁的一种可能实现是自旋一段时间，当自旋的时间超过阈值后将线程投入睡眠，<br>  因此在并发运算中使用互斥锁（每次占用锁的时间很短）的效果可能不亚于使用自旋锁。</p><ol start="3"><li>条件变量<br>  互斥锁一个明显的缺点是他只有两种状态：锁定和非锁定。<br>  条件变量通过允许线程阻塞和等待另一个线程发送信号的方法弥补了互斥锁的不足，他常和互斥锁一起使用，以免出现竞态条件。</li></ol><p>  当条件不满足时，线程往往解开相应的互斥锁并阻塞线程然后等待条件发生变化。<br>  一旦其他的某个线程改变了条件变量，他将通知相应的条件变量唤醒一个或多个正被此条件变量阻塞的线程。</p><p>  总的来说互斥锁是线程间<code>互斥机制</code>，条件变量是<code>同步机制</code>。</p><ol start="4"><li>自旋锁<br>  如果进线程无法取得锁，进线程不会立即放弃CPU时间片，而是一直循环尝试获取锁，知道获取为止。<br>  如果别的线程长时间占有锁，则自旋就是在浪费CPU做无用功，但是自旋锁一般应用于加锁时间很短的场景，这个时候效率较高。</li></ol><hr><h2 id="133、delete和delete-的区别？"><a href="#133、delete和delete-的区别？" class="headerlink" title="133、delete和delete[]的区别？"></a>133、delete和delete[]的区别？</h2><ul><li><p>delete只会调用一次析构函数</p></li><li><p>delete[]会调用数组中每个元素的析构函数</p></li></ul><hr><h2 id="134、为什么不能把所有的函数写成内联？"><a href="#134、为什么不能把所有的函数写成内联？" class="headerlink" title="134、为什么不能把所有的函数写成内联？"></a>134、为什么不能把所有的函数写成内联？</h2><p>内联函数以代码复杂为代价，省去函数调用的开销提高执行效率。</p><p>一方面如果内联函数体内代码执行时间相比函数调用开销较大，则没有太大意义；<br>另一方面，每一处内联函数的调用都要复制代码，消耗更多的内存空间，因此以下情况不适合内联函数：</p><ol><li><p>函数体内代码较长，将导致内存消耗代价</p></li><li><p>函数体内有循环，函数执行时间要比函数调用开销大</p></li></ol><hr><h2 id="135、为什么C-没有垃圾回收机制？"><a href="#135、为什么C-没有垃圾回收机制？" class="headerlink" title="135、为什么C++没有垃圾回收机制？"></a>135、为什么C++没有垃圾回收机制？</h2><p>首先，实现一个垃圾回收器会带来额外的空间和时间开销。需要开辟一定的空间保存指针的引用计数和对他们进行标记mark。然后需要单独开辟一个线程在空闲时间进行free</p><p>垃圾回收会使得C++不适合进行很多很底层的操作</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>courseraWED</title>
      <link href="/2022/03/01/courseraWED/"/>
      <url>/2022/03/01/courseraWED/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Introduction"><a href="#一、Introduction" class="headerlink" title="一、Introduction"></a>一、Introduction</h1><p>size<code>x</code> -&gt; neuron -&gt; price<code>y</code></p><h2 id="What-does-the-simplest-neural-network-do"><a href="#What-does-the-simplest-neural-network-do" class="headerlink" title="- What does the simplest neural network do?"></a>- What does the simplest neural network do?</h2><p>It inputs the , computes the linear function, take max of zero【最小值为0】, and then outputs the estimated price.</p><img src="/2022/03/01/courseraWED/SimpleNeuralNetwork.png" class=""><p>This middle layer densely connected to the input layer, the network itself decides what the middle neuron refers to.<br>What you need to do is trying to take an input a X and map it some output Y.</p><h2 id="ReLU-function-——-A-kind-of-activation-function"><a href="#ReLU-function-——-A-kind-of-activation-function" class="headerlink" title="- ReLU function —— A kind of activation function"></a>- ReLU function —— A kind of activation function</h2><p>Rectified Linear Unit 【线性修正单元】<br>The function is a straight line which taking a max of zero.<br>Rectify just means taking a max of zero.</p><img src="/2022/03/01/courseraWED/ReLU.png" class=""><h2 id="Supervised-learning"><a href="#Supervised-learning" class="headerlink" title="- Supervised learning"></a>- Supervised learning</h2><ol><li>Real Estate&#x2F;Online Advertising: Standard NN</li><li>Image application: Convolutional Neural Network【abbreviated: CNN】</li><li>Sequence Data(One-dimensional)【Audio&#x2F;language】: Recurrent Neural Network【abbreviated: RNN】</li><li>Complex Application【autonomous driving】: Custom&#x2F;Hybrid【混合】<img src="/2022/03/01/courseraWED/DifferentNN.png" class=""></li></ol><h2 id="Unstructured-x2F-Structured-Data"><a href="#Unstructured-x2F-Structured-Data" class="headerlink" title="- Unstructured&#x2F;Structured Data"></a>- Unstructured&#x2F;Structured Data</h2><ol><li>Structured data: Each of the features have the well defined meaning.【Just like database】</li><li>Unstructured data: Like audio&#x2F;images&#x2F;text<img src="/2022/03/01/courseraWED/StructuredOrUn.png" class=""></li></ol><h2 id="Scale-drives-deep-learning-progress"><a href="#Scale-drives-deep-learning-progress" class="headerlink" title="- Scale drives deep learning progress"></a>- Scale drives deep learning progress</h2><ol><li>Size of the NN. A NN with a lot of hidden units&#x2F;parameters&#x2F;connections</li><li>Large amount of the 【labeled】 data.</li></ol><p>  m, denote the size of training sets.</p><blockquote><p>NOTICE: If using smaller training sets, the relative ordering of the algorithms is not well defined so.</p></blockquote><blockquote><p>Switching the sigmoid function to the ReLU function has made the algorithm called gradient descent work much faster.<br>The impact of the algorithmic innovation was it really help compution.</p></blockquote><h1 id="二、Basics-of-Neural-Network-Programming"><a href="#二、Basics-of-Neural-Network-Programming" class="headerlink" title="二、Basics of Neural Network Programming"></a>二、Basics of Neural Network Programming</h1><h2 id="Binary-Classification"><a href="#Binary-Classification" class="headerlink" title="- Binary Classification"></a>- Binary Classification</h2><blockquote><p>Notations<br>(x, y) —— x:R<sup>n<sub>x</sub></sup> —  y:{0, 1}<br>m【Training example】 —— {(x<sup>(1)</sup>, y<sup>(1)</sup>) …… (x<sup>(m)</sup>, y<sup>(m)</sup>)}<br>m<sub>train</sub> &#x3D; m —— m<sub>test</sub> &#x3D; #test_examples<br>X —— R<sup>n<sub>x<em>m</sub></sup>（matrix）—— X.shape &#x3D; (n<sub>x</sub> * m)<br>Y —— R<sup>1</em>m</sup> —— Y.shape &#x3D; (1, m)</p></blockquote><h2 id="Logistic-Regression"><a href="#Logistic-Regression" class="headerlink" title="- Logistic Regression"></a>- Logistic Regression</h2><blockquote><p>Given <code>x</code>, want <code>y_hat = P(y=1|x)</code><br>x &#x3D; R<sup>n<sub>x</sub></sup><br>Parameters: w &#x3D; R<sup>n<sub>x</sub></sup>, b &#x3D; R<br>Output【Just a try】: <code>y_hat</code> &#x3D; Sigmoid(w<sup>T</sup> * x + b)【The result may not in the range of 0 to 1】</p></blockquote><img src="/2022/03/01/courseraWED/Logistic.png" class=""><img src="/2022/03/01/courseraWED/LogisticMath.png" class=""><h2 id="Logistic-Regression-Lost-Function"><a href="#Logistic-Regression-Lost-Function" class="headerlink" title="- Logistic Regression Lost Function"></a>- Logistic Regression Lost Function</h2><blockquote><p>Notice the Optimization Problem that is convex【Prevent Local Optimum And Try to converge(close) to the Global Optimum】</p></blockquote><img src="/2022/03/01/courseraWED/LossFunction.png" class="" title="CrossEntropy"><p>Loss Function: A single training example. —— Measure how well the network is doing.<br>Cost Function: Entire training example. —— Cost of the parameters.【minimize it】</p><img src="/2022/03/01/courseraWED/CostFunction.png" class="" title="CostFunction"><h2 id="Gradient-Descent"><a href="#Gradient-Descent" class="headerlink" title="- Gradient Descent"></a>- Gradient Descent</h2><p>Want to find (w, b) that minimize J(w, b)【The cost function】</p><img src="/2022/03/01/courseraWED/LossFunctionGraph.png" class="" title="Convex-Function"><p>The formula of Gradient Descent is as follow:</p><img src="/2022/03/01/courseraWED/GradientDescent.png" class="" title="formula"><h2 id="Computation-Graph"><a href="#Computation-Graph" class="headerlink" title="- Computation Graph"></a>- Computation Graph</h2><p>The computation graph organizes a computation with blue arrow left to right computation.</p><img src="/2022/03/01/courseraWED/ComputationGraph.png" class="" title="ComputationGraph"><p>We should handle the red arrow right to left computation of the derivatives.</p><p>Cross Entropy: -(ylog(a) + (1-y)log(1-a)) where y is the ground_truth and a is the output of the network</p><h2 id="logistic-regression"><a href="#logistic-regression" class="headerlink" title="- logistic regression"></a>- logistic regression</h2><p>The goal is to modify the parameter <code>w,b</code> and to reduce the loss <code>L(a, y)</code><br>Using Computation Graph, and from output to the parameters, calculate the derivative of the loss function【Cross Entropy】</p><p>logistic regression on m examples<br>Notice the right part means the gradient descent, w1 :&#x3D; w1 - α * dw1, where α is the learning rate and dw1 is the derivative</p><img src="/2022/03/01/courseraWED/mExamplesOfLogisticRegression.png" class=""><p>In order to getting rid of <code>for</code> loops, it’s perferable to use vectorization</p><h2 id="vectorization"><a href="#vectorization" class="headerlink" title="- vectorization"></a>- vectorization</h2><p>For example, in Python with numpy<br>np.dot(w, b)【dot即点乘】</p><p>Using vectorization can significantly speed up the code rather than using for loop.</p><blockquote><p>Avoid using explicit for loops</p></blockquote><h2 id="More-examples-of-vectorization"><a href="#More-examples-of-vectorization" class="headerlink" title="- More examples of vectorization"></a>- More examples of vectorization</h2><img src="/2022/03/01/courseraWED/UsingVectorization1.png" class="" title="向量化例子1"><img src="/2022/03/01/courseraWED/UsingVectorization2.png" class="" title="向量化例子2"><h2 id="Regression-of-logistic"><a href="#Regression-of-logistic" class="headerlink" title="- Regression of logistic"></a>- Regression of logistic</h2><blockquote><p>recap：the forward propagation step is to compute the predictions.<br>       the backward propagation step is using the result of prediction to modify the parameters.</p></blockquote><img src="/2022/03/01/courseraWED/LogisticForwardPropagation.png" class="" title="Logistic前向传播"><p>A vectorization implementation of the forward propagation for all M training examples at the same time.</p><p>Actually, we can use vectorization to calculate the backward propagation to compute the gradients.</p><h2 id="Vectorizing-Logistic-Regression"><a href="#Vectorizing-Logistic-Regression" class="headerlink" title="- Vectorizing Logistic Regression"></a>- Vectorizing Logistic Regression</h2><img src="/2022/03/01/courseraWED/VectorizingLogisticRegression.png" class=""><img src="/2022/03/01/courseraWED/VectorizingLogisticRegression2.png" class=""><h2 id="Broadcasting-in-Python"><a href="#Broadcasting-in-Python" class="headerlink" title="- Broadcasting in Python"></a>- Broadcasting in Python</h2><p>cal &#x3D; A.sum(axis &#x3D; 0) 【0 means sum vertically, where horizontal axis is 1】<br>percentage &#x3D; 100 * A &#x2F; cal.reshape(1, 4)【(3, 4) &#x2F; (1, 4)】</p><img src="/2022/03/01/courseraWED/BroadcastingExamples.png" class=""><img src="/2022/03/01/courseraWED/BroadcastingGeneralPrinciple.png" class=""><h2 id="Tips-in-Python"><a href="#Tips-in-Python" class="headerlink" title="- Tips in Python"></a>- Tips in Python</h2><ul><li><p>rank 1 array  —— Don’t use<br>a &#x3D; np.random.randn(5)<br>a.shape &#x3D; (5, )</p><blockquote><p>Using reshape can transfer the rank_1 array to the vector</p></blockquote></li><li><p>column&#x2F;row vector<br>a &#x3D; np.random.randn(5, 1) —— a.shape &#x3D; (5, 1) —— column vector<br>a &#x3D; np.random.randn(1, 5) —— a.shape &#x3D; (1, 5) —— row vector</p></li><li><p>assertion<br>assert(a.shape &#x3D;&#x3D; (5, 1))</p></li></ul><h2 id="Cost-on-m-Examples"><a href="#Cost-on-m-Examples" class="headerlink" title="- Cost on m Examples"></a>- Cost on m Examples</h2><p>Using the principle of maximum likelihood estimation</p><p>The log function is strict monotonically increasing function<br>So maximum log(p) give the similar result that optimizing p.</p><img src="/2022/03/01/courseraWED/LogisticFunctionLog.png" class=""><img src="/2022/03/01/courseraWED/LogisticLikelihood.png" class=""><h2 id="Neural-network-represents"><a href="#Neural-network-represents" class="headerlink" title="- Neural network represents"></a>- Neural network represents</h2><img src="/2022/03/01/courseraWED/NeuralNetworkRepresent.png" class=""><h2 id="Vectorizing-across-multiple-examples"><a href="#Vectorizing-across-multiple-examples" class="headerlink" title="- Vectorizing across multiple examples"></a>- Vectorizing across multiple examples</h2><p>The horizontal, the matrix A goes over different training examples<br>Vertically, the different indices in the matrix.【Different input features or Different hidden units】</p><h2 id="Activation-functions"><a href="#Activation-functions" class="headerlink" title="- Activation functions"></a>- Activation functions</h2><p>tanh function is always do better than sigmoid function</p><p>The result of tanh function is in the range of [-1, 1]</p><p>Though the output is in the range of [0, 1], so sigmoid function is better for the output layer.</p><p>The general setback of tanh&#x2F;sigmoid function is that when <code>z</code> is either very large or very small, the gradient of the derivative or the slope of this function becomes small.<br>In this way, the result will slow down the gradient descent.</p><p>A popular function is ReLU, Rectified Linear Unit. <code>ReLU = max(0, z)</code><br>The derivative of ReLU is 1 so long as z is positive, the slope is 0 when z is negative</p><p>The odds you get exactly z equals to 0 is very small.【The derivative in the point of zero is not defined】</p><p>Also we can try Leaky ReLU —— <code>Leaky ReLU = max(0.01z, z)</code></p><h2 id="Why-using-the-activation-function"><a href="#Why-using-the-activation-function" class="headerlink" title="- Why using the activation function"></a>- Why using the activation function</h2><p>If using linear activation functions or identity activation functions<br>then the neural network is just outputting a <b>linear function</b> of the input</p><p>If we do not use the activation function, what we do is just computing a linear activation function.<br>In that case…Why not delete all the hidden layers?</p><p>The linear hidden units is so long as not use them, they are less or more useless.</p><p>The only place we can use linear function is the output layer【house pricing prediction】【Why not ReLU?】</p><h2 id="Sigmoid-activation-function"><a href="#Sigmoid-activation-function" class="headerlink" title="- Sigmoid activation function"></a>- Sigmoid activation function</h2><img src="/2022/03/01/courseraWED/ProveOfSigmoid.png" class=""><h2 id="Tanh-activation-function"><a href="#Tanh-activation-function" class="headerlink" title="- Tanh activation function"></a>- Tanh activation function</h2><img src="/2022/03/01/courseraWED/ProveOfTanh.png" class=""><h2 id="ReLU-and-Leaky-ReLU-activation-function"><a href="#ReLU-and-Leaky-ReLU-activation-function" class="headerlink" title="- ReLU and Leaky ReLU activation function"></a>- ReLU and Leaky ReLU activation function</h2><img src="/2022/03/01/courseraWED/ProveOfReLU.png" class=""><p>We can define the derivative of point 0 by ourselves.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统</title>
      <link href="/2022/02/28/OperatingSystem/"/>
      <url>/2022/02/28/OperatingSystem/</url>
      
        <content type="html"><![CDATA[<h1 id="一、进程-线程-协程"><a href="#一、进程-线程-协程" class="headerlink" title="一、进程-线程-协程"></a>一、进程-线程-协程</h1><h2 id="1、进程、线程和协程的区别和联系"><a href="#1、进程、线程和协程的区别和联系" class="headerlink" title="1、进程、线程和协程的区别和联系"></a>1、进程、线程和协程的区别和联系</h2><table><thead><tr><th align="left"></th><th align="left">进程</th><th align="left">线程</th><th align="left">协程</th></tr></thead><tbody><tr><td align="left">定义</td><td align="left">资源分配和拥有的基本单位</td><td align="left">程序执行的基本单位</td><td align="left">用户态的轻量级线程，线程内部调度的基本单位</td></tr><tr><td align="left">切换情况</td><td align="left">进程CPU环境（栈、寄存器、页表和文件句柄等）的保存以及新调度CPU环境设置</td><td align="left">保存和设置程序计数器、少量寄存器和栈的内容</td><td align="left">先将寄存器上下文和栈保存，等切换回来时进行恢复</td></tr><tr><td align="left">切换者</td><td align="left">操作系统</td><td align="left">操作系统</td><td align="left">用户</td></tr><tr><td align="left">切换过程</td><td align="left">用户-&gt;内核-&gt;用户</td><td align="left">用户-&gt;内核-&gt;用户</td><td align="left">用户（不陷入内核态）</td></tr><tr><td align="left">调用栈</td><td align="left">内核栈</td><td align="left">内核栈</td><td align="left">用户栈</td></tr><tr><td align="left">拥有资源</td><td align="left">CPU资源、内存、文件、句柄等</td><td align="left">PC、寄存器、栈和状态字</td><td align="left">自己的寄存器上下文和栈</td></tr><tr><td align="left">并发性</td><td align="left">不同进程之间切换实现并发，各自占有CPU实现并行</td><td align="left">一个进程内部多个线程并发执行</td><td align="left">同一时间只能运行一个协程，而其他协程处于休眠状态，适合对任务进行分时处理</td></tr><tr><td align="left">系统开销</td><td align="left">切换虚拟地址空间，切换内核栈和硬件上下文，CPU高速缓存失效、页表切换，开销很大</td><td align="left">切换时只需保存和设置少量寄存器内容，开销很小</td><td align="left">直接操作栈，则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快</td></tr><tr><td align="left">通信方面</td><td align="left">进程间通信需要借助操作系统</td><td align="left">线程间可以直接读写进程数据段（如全局变量）来进行通信</td><td align="left">共享内存、消息队列</td></tr></tbody></table><ol><li>进程是资源调度的基本单位，运行一个可执行程序会创建一个或多个进程，进程就是运行起来的可执行程序【动态和静态】</li><li>线程是程序执行的基本单位，是轻量级的进程。每个进程都有唯一的主线程，且只能有一个，主线程和进程是相互依存的关系，主线程结束进程也会结束。</li><li>协程是用户态的轻量级线程，线程内部调度的基本单位</li></ol><h2 id="2、线程和新城的比较"><a href="#2、线程和新城的比较" class="headerlink" title="2、线程和新城的比较"></a>2、线程和新城的比较</h2><ol><li>线程启动速度快，轻量级</li><li>线程的系统开销小</li><li>线程使用有一定难度，需要处理数据一致性问题【需要用到线程通信】</li><li>同一线程共享的有堆、全局变量、静态变量、指针，引用、文件等，<b>而独自占有栈</b></li></ol><h2 id="3、一个进程可以创建出多少线程，和什么有关？"><a href="#3、一个进程可以创建出多少线程，和什么有关？" class="headerlink" title="3、一个进程可以创建出多少线程，和什么有关？"></a>3、一个进程可以创建出多少线程，和什么有关？</h2><p>理论上，一个进程可用虚拟空间是 2G，默认情况下，线程栈大小是1MB，理论上可以创建2048个线程，如果要多余2048，则必须修改编译器设置。<br>因此，一个进程可以创建的线程数由<b>可用虚拟空间和线程栈大小</b>共同决定，只要虚拟空间足够，则新线程的建立就会成功。<br>按照上述限制，如果要创建超过2K个线程，减少线程栈即可。</p><blockquote><p>过多的线程会导致大量时间浪费在线程切换上，给程序运行效率带来负面影响。</p></blockquote><h2 id="4、外中断和异常区别"><a href="#4、外中断和异常区别" class="headerlink" title="4、外中断和异常区别"></a>4、外中断和异常区别</h2><p><code>外中断</code>：由CPU执行指令以外的事件引起，如I&#x2F;O完成中断、时钟中断、控制台中断等。（I&#x2F;O完成意味着处理器可以进行别的I&#x2F;O操作）<br><code>异常</code>：由CPU执行指令时的一些事件引起，如非法操作码、除0、地址越界、算术溢出、缺页等。</p><h2 id="5、进程线程模型"><a href="#5、进程线程模型" class="headerlink" title="5、进程线程模型"></a>5、进程线程模型</h2><p>核心意义不仅仅是“线程是调度基本单位，进程资源分配基本单位”那么简单</p><ul><li><p>多线程<br>讨论用户态的多线程模型，同一个进程内部有多个线程，所有线程共享同一个进程的内存空间<br>进程中定义的全局变量会被所有线程共享，例如全局变量int i &#x3D; 10，这一进程中所有并发运行的线程都可以读取和修改这个 i 的值<br>而多个线程被CPU调度的顺序又是不可控的，所以对临界资源的访问尤其要注意安全。</p><p>我们必须知道，<b>做一次简单的i &#x3D; i + 1在计算机中并不是原子操作，涉及内存取数，计算和写入内存几个环节</b><br>线程的切换有可能发生在上述任何一个环节中间，所以不同的操作顺序很有可能带来意想不到的结果</p><p>但是，虽然线程在安全性方面会引入很多新挑战，但是线程也带来了许多好处</p><ol><li><p>原先顺序执行的程序（暂时不考虑多进程）可以被拆分成几个独立的逻辑流，这些逻辑流可以独立完成一些任务（任务最好不相关）<br>比如QQ可以一个线程处理聊天；一个线程处理上传文件，两个线程互不干扰</p><p>对于线程需要了解：</p><ul><li><p>线程之间有无先后访问顺序（线程依赖关系）</p></li><li><p>多个线程共享访问同一变量（同步互斥关系）</p></li></ul></li><li><p>我们通常只会去说统一进程的多个线程共享进程的资源，但是每个线程特有的部分却很少提及<br>除了标识线程的tid，每个线程还有自己独立的栈空间，线程彼此之间是无法访问其他线程栈上内容的。</p><p>作为处理机调度的最小单位，线程调度只需要保存线程栈、寄存器数据和PC即可，相比进程切换开销要小很多。</p></li></ol><p>线程相关接口不少，主要需要了解各个参数意义和返回值意义</p><ol><li><p>线程创建和结束<br>* 背景知识：<br> 在一个文件内的多个函数通常都是按照main函数中出现的顺序来执行<br> 但是在分时系统下，我们可以让每个函数都作为一个逻辑流并发执行，最简单的方法就是采用多线程策略。</p><p> 在main函数中调用多线程接口创建线程，每个线程对应特定的函数（操作），这样就可以不按照main函数中各个函数出现的顺序来执行，避免了忙等</p></li></ol><pre><code>* 相关接口：  * 创建线程：int pthread_create(pthread_t tidp, const pthread_attr_t attr, void (*start_rtn)(void), void *arg);    创建一个新线程，pthread和start_routine不可或缺，分别用于标识线程和执行体入口，其他可以填NULL。    * pthread：用来返回线程的tid，*pthread即为tid，类型pthread_t == unsigned long int.    * attr：指向线程属性结构体的指针，用于改变所创建线程的属性，填NULL使用默认值    * start_routine：线程执行函数的首地址，传入函数指针    * arg：通过地址传递来传递函数参数，这里是无符号类型指针，可以转变为任意类型变量地址，在被传入函数中强制转换即可  * 获得线程ID：pthread_t pthread_self();    调用时，会打印线程ID  * 等待线程结束：int pthread_join(pthread_t tid, void** retval);    主线程调用，等待子线程退出并回收其资源，类似于进程中wait/waitpid回收僵尸进程，调用pthread_join的线程会被阻塞    * tid：创建线程时通过指针得到tid值    * retval：指向返回值的指针。  * 结束线程：pthread_exit(void *retval);    子线程执行，用来结束当前线程并通过retval传递返回值，该返回值可以通过pthread_join获得。  * 分离线程：int pthread_detach(pthread_t tid);    主线程、子线程均可调用。    主线程中pthread_detach(tid),子线程中pthread_detach(pthread_self()),调用后和主线程分离，子线程结束时自己立即回收资源。    * tid：同上</code></pre><ol start="2"><li>线程属性值修改<br>* 背景知识：<br> 线程属性对象类型为pthread_attr_t，结构体定义如下： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    <span class="type">int</span> etachstate; <span class="comment">// 线程分离的状态</span></span><br><span class="line">    <span class="type">int</span> schedpolicy;    <span class="comment">// 线程调度策略</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sched_param</span> schedparam;  <span class="comment">// 线程的调度参数</span></span><br><span class="line">    <span class="type">int</span> inheritsched;   <span class="comment">// 线程的继承性</span></span><br><span class="line">    <span class="type">int</span> scope;      <span class="comment">// 线程的作用域</span></span><br><span class="line">    <span class="comment">// 以下为线程栈的设置</span></span><br><span class="line">    <span class="type">size_t</span> guardsize;   <span class="comment">// 线程栈末尾警戒缓冲大小</span></span><br><span class="line">    <span class="type">int</span> stackaddr_set;  <span class="comment">// 线程的栈设置</span></span><br><span class="line">    <span class="type">void</span> * stackaddr;   <span class="comment">// 线程栈的位置</span></span><br><span class="line">    <span class="type">size_t</span> stacksize;   <span class="comment">// 线程栈的大小</span></span><br><span class="line">&#125;<span class="type">pthread_attr_t</span>;</span><br></pre></td></tr></table></figure></li></ol><pre><code>* 相关接口：  对上述结构体中各参数大多有：pthread_attr_get()和pthread_attr_set()系统调用函数来设置和获取。  不意义罗列。</code></pre></li></ul><ol start="2"><li><p>多进程<br>每一个进程是资源分配的基本单位。</p><p>进程结构由一下几个部分组成：代码段、堆栈段、数据段。</p><p>代码段是静态的二进制代码，多个程序可以共享。<br>实际上在父进程创建子进程之后，父、子进程除了pid以外，其他所有部分几乎一样。</p><p>父、子进程共享全部数据，但并不是说他们就是对同一块数据进行操作，<br>子进程在读写数据时会通过写时赋值机制将公共的数据重新拷贝一份，之后在拷贝出的数据上进行操作。</p><p>如果子进程想要运行自己的代码段，还可以通过调用execv()函数重新加载新的代码段，之后就和父进程独立开了。</p><p>我们在shell中执行程序就是通过shell进程先fork()一个子进程再通过execv()重新加载新的代码段的过程。</p><ol><li><p>进程创建与结束<br>* 背景知识：<br> 进程有两种创建方式：一种是操作系统创建；一种是父进程创建。</p><p> 从计算机启动到终端执行程序的过程为：<br>   0号进程 -&gt; 1号内核进程 -&gt; 1号用户进程(init进程) -&gt; getty进程 -&gt; shell进程 -&gt; 命令行执行进程。<br> 所以我们在命令行中通过 .&#x2F;program执行可执行文件时，所有创建的进程都是shell进程的子进程。</p><p> 这样就是为什么shell进程一关闭，在shell中执行的进程都自动被关闭的原因。<br> 从shell进程到创建其他子进程需要通过以下接口：</p></li></ol><pre><code>* 相关接口：  * 创建进程：pid_t fork(void);    返回值：出错返回 -1；父进程中返回 pid &gt; 0；子进程中pid == 0  * 结束进程：void exit(int status);    * status是退出状态，保存在全局变量中，通常0表示正常退出。  * 获得PID：pid_t getpid(void);    返回调用者pid  * 获得父进程PID：pid_t getppid(void);    返回父进程pid* 其他补充：  * 正常退出方式：exit()、_exit()、return（在main中）    exit()和_exit()区别：exit()是对_exit()的封装，都会终止进程并做相关收尾工作      最主要的区别是_exit()函数关闭全部描述符和清理函数后不会刷新流，但是exit()会在调用_exit()函数前刷新数据流。    return 和 exit()的区别：exit()是函数，但有参数，执行完之后控制权交给系统。      return若是在调用函数中，执行完之后控制权交给调用进程，若是在main函数中，控制权交给系统。  * 异常退出方式：abort()、终止信号。</code></pre><ol start="2"><li><p>Linux进程控制<br>* 进程地址空间（地址空间）<br> 虚拟存储器为每个进程提供了独占系统地址空间的假象</p><p> 尽管每个进程地址空间内容不尽相同，但是他们都有相似的结构。<br> X86中Linux进程的地址空间底部都是保留给用户进程的，包括文本、数据、堆、栈等<br> 其中文本区和数据区是通过存储器映射方式将磁盘中可执行文件的相应段映射至虚拟存储器地址空间中。</p><p> 有一些“敏感”的地址需要注意一下：<br>   对于32位进程来说，代码段从0x08048000开始。从0xC0000000开始到0xFFFFFFFF是内核地址空间<br>   通常情况下代码运行在用户态（使用0x00000000~0xBFFFFFFF的用户地址空间）<br>   当发生系统调用、进程切换等操作时，CPU寄存器设置模式位，进入内核模式<br>   在该状态（超级用户模式）下进程可以访问全部存储器位置和执行全部指令</p><p> 也就是说32位进程的地址空间都是4G，但用户态下只能访问低3G的地址空间，若要访问3~4G的地址空间则只有进入内核态才行。</p></li></ol><pre><code>* 进程控制块（处理机）【PCB数据结构】  进程的调度实际就是内核选择相应的进程控制块，被选择的进程控制块中包含了一个进程基本的信息。* 上下文切换  内核管理所有进程控制块，而进程控制块记录了进程全部状态信息。  每一次进程调度就是一次&lt;b&gt;上下文切换&lt;/b&gt;，所谓的上下文切换本质上就是当前运行状态  主要包括通用寄存器、浮点寄存器、状态寄存器、程序计数器、用户栈和内核数据结构（页表、进程表、文件表）等。  进程执行时刻，内核可以决定抢占当前进程并开始新的进程，这个过程由内核调度器完成  当调度器选择了某个进程时称为进程被调度，该过程通过上下文切换来改变当前状态。  一次完整的上下文切换通常是进程原先运行于用户态，之后因系统调用或时间片到而切换到内核态执行内核指令  完成上下文切换后回到用户态，此时已经切换到进程B。</code></pre></li></ol><hr><h2 id="6、进程调度算法？"><a href="#6、进程调度算法？" class="headerlink" title="6、进程调度算法？"></a>6、进程调度算法？</h2><ol><li>先来先服务（FCFS：First-Come First-Serverd）<br>  非抢占式的调度算法，按照请求的顺序进行调度。</li></ol><p>  有利于长作业，但不利于短作业，因为短作业必须一致等待前面的长作业执行完毕才能执行<br>  而长作业又要执行很长时间，造成了短作业等待时间过长。</p><ol start="2"><li>短作业优先（SJF：Shortest Job First）<br>  非抢占式的调度算法，按照估计运行时间最短的顺序进行调度。</li></ol><p>  长作业有可能会饿死，处于一直等待短作业执行完毕的状态。<br>  因为如果一直有短作业到来，那么长作业将永远得不到调度。</p><ol start="3"><li>最短剩余时间优先（SRTN：Shortest Remaining Time Next）<br>  最短作业优先的抢占式版本，按照剩余运行时间的顺序进行调度。<br>  当一个新的作业到达时，其整个运行时间与当前进程的剩余时间进行比较。</li></ol><p>  如果新的进程需要的时间更少，则挂起当前进程，运行新的进程。否则新的进程等待。</p><ol start="4"><li>时间片轮转<br>  将所有就绪进程按照FCFS的原则排程一个队列，每次调度时，把CPU时间分配给队首进程，该进程可以执行一个时间片。</li></ol><p>  当时间片用完时，由计时器发出时钟中断，调度程序便停止该进程的执行，并将它送往就绪队列的末尾，同时继续把CPU时间分配给队首的进程。</p><p>  时间片轮转算法的效率和时间片的大小很有关系：<br>    * 因为进程切换都要保存进程的信息并且载入新进程的信息，如果时间片太小，会导致进程切换得太频繁，在进程切换上就会花过多时间。<br>    * 如果时间片过长，则实时性就不能得到保证【无限大的话，退化成为FCFS】<br>  <img src="/2022/02/28/OperatingSystem/RoundTimeSchedule.png" class=""></p><ol start="5"><li>优先级调度<br>  为每个进程分配一个优先级，按照优先级进行调度。</li></ol><p>  为了防止低优先级的进程永远得不到调度，可以随着时间的推移增加等待进程的优先级【高响应比优先调度算法】<br>  否则，低优先级的进程会饿死</p><ol start="6"><li>多级反馈队列<br>  一个进程需要执行100个时间片，如果采用时间片轮转调度算法，那么需要交换100次</li></ol><p>  多级队列是为这种需要连续执行多个时间片的进程考虑，它设置了多个队列，每个队列时间片大小都不同，例如1,2,4,8…。<br>  进程在第一个队列没执行完，就会被移到下一个队列。</p><p>  这种方式下，之前的进程只需要交换7次。<br>  每个队列优先权也不同，最上面的优先权最高，因此只有上一个队列没有进程在排队，才能调度当前队列上的进程。</p><p>  可以将这种调度算法看成是时间片轮转调度算法和优先级调度算法的结合体。<br>  </p><hr><h2 id="7、Linux下进程间通信方式？"><a href="#7、Linux下进程间通信方式？" class="headerlink" title="7、Linux下进程间通信方式？"></a>7、Linux下进程间通信方式？</h2><ul><li><p>管道：</p><ul><li><p>无名管道（内存文件）：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程之间使用。<br>                进程的亲缘关系通常是指父子进程关系。</p></li><li><p>有名管道（FIFO文件，借助文件系统）：有名管段也是半双工的通信方式，但是允许在没有亲缘关系的进程之间使用，管道是先进先出的通信方式。</p></li></ul></li><li><p>共享内存：<br>共享内存就是映射一段能被其他进程所访问的内存，这段内存由一个进程创建，但可以供多个进程访问。</p><p>共享内存是最快的IPC方式，它是针对其他进程间通信方式运行效率低而专门设计的，<br>它往往与信号量配合使用来实现进程间的同步和通信。</p></li><li><p>消息队列：<br>消息队列是有消息的链表，存放在内核中并由消息队列标识符标识。<br>消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。</p></li><li><p>套接字：<br>适用于不同机器间进程通信，在本地也可作为两个进程通信的方式。</p></li><li><p>信号：<br>用于通知接收进程某个事件已经发生，比如按下Ctrl + C就是信号</p></li><li><p>信号量：<br>信号量是一个计数器，可以用来控制多个进程对共享资源的访问，它常作为一种锁机制，实现进程、线程对临界区的同步及互斥访问。</p></li></ul><hr><h2 id="8、Linux下同步机制？"><a href="#8、Linux下同步机制？" class="headerlink" title="8、Linux下同步机制？"></a>8、Linux下同步机制？</h2><ul><li><p>POSIX信号量：可用于进程同步，也可用于线程同步</p></li><li><p>POSIX互斥锁 + 条件变量：只能用于线程同步</p></li></ul><ol><li>线程和进程的区别</li></ol><ul><li><p>调度：线程是调度的基本单位（PC，状态码，通用寄存器，线程栈及栈指针）；<br> 进程是拥有资源的基本单位（打开文件，堆，静态区，代码段等）</p></li><li><p>并发性：一个进程内多个线程可以并发（最好和CPU核数相等）；多个进程可以并发</p></li><li><p>拥有资源：线程不拥有系统资源，但一个进程的多个线程可以共享隶属进程的资源；<br>     进程是拥有资源的独立单位。</p></li><li><p>系统开销：线程创建销毁只需要处理PC值，状态码，通用寄存器值，线程栈及栈指针即可；<br>     进程创建和销毁需要重新分配及销毁task_struct结构。</p></li></ul><hr><h2 id="9、如果系统中具有快表后，那么地址的转换过程变成什么样了？"><a href="#9、如果系统中具有快表后，那么地址的转换过程变成什么样了？" class="headerlink" title="9、如果系统中具有快表后，那么地址的转换过程变成什么样了？"></a>9、如果系统中具有快表后，那么地址的转换过程变成什么样了？</h2><blockquote><ol><li><p>CPU给出逻辑地址，由某个硬件算得页号、页内偏移量，将页号和快表中的所有页号进行比较</p></li><li><p>如果找到匹配的页号，说明要访问的页表项在快表中有副本，则直接从中取出该页对应的内存块号，再将内存块号与页内偏移量拼接形成物理地址<br>最后，访问该物理地址对应的内存单元。因此，若快表命中，则访问某个逻辑地址仅需一次访存即可。</p></li><li><p>如果没有找到匹配的页号，则需要访问内存中的页表，找到对应页表项，得到页面存放的内存块号，再将内存块号与页内偏移量拼接形成物理地址，<br>最后，访问该物理地址对应的内存单元。<br>因此，若快表未命中，则访问某个逻辑地址需要两次访存（注：在找到页表项后，应将其同时存入快表，以便后面可能的访问，注意替换策略）<br>【其实若页表也没命中，还需要执行缺页操作】</p></li></ol></blockquote><p>由于查询快表的速度比查询页表的速度快很多，因此只要快表命中，就可以节省很多时间。<br>因为局部性原理，一般来说快表的命中率可以达到90%以上。</p><p>例如：<br>某系统使用了基本分页存储管理，并采用了具有快表的地址变换机构，访问一次快表耗时1us，访问一次内存耗时100us。<br>若快表命中率为90%，那么访问一个逻辑地址的平均耗时为：(1 + 100) * 0.9 + (1 + 100 + 100) * 0.1 &#x3D; 111us<br>【注意逻辑地址转变物理地址还要去内存里面找数据】<br>有的系统支持快表和慢表同时查找，如果是这样，平均耗时应该是（1 + 100）* 0.9 + (100 + 100) * 0.1 &#x3D; 110.9us</p><h2 id="若未采用快表机制，则访问一个逻辑地址需要100-100-x3D-200us，显然，引入快表机制后，访问一个逻辑地址的速度快多了。"><a href="#若未采用快表机制，则访问一个逻辑地址需要100-100-x3D-200us，显然，引入快表机制后，访问一个逻辑地址的速度快多了。" class="headerlink" title="若未采用快表机制，则访问一个逻辑地址需要100+100&#x3D;200us，显然，引入快表机制后，访问一个逻辑地址的速度快多了。"></a>若未采用快表机制，则访问一个逻辑地址需要100+100&#x3D;200us，显然，引入快表机制后，访问一个逻辑地址的速度快多了。</h2><h2 id="10、内存交换和覆盖有什么区别？"><a href="#10、内存交换和覆盖有什么区别？" class="headerlink" title="10、内存交换和覆盖有什么区别？"></a>10、内存交换和覆盖有什么区别？</h2><p>交换技术主要是在不同进程（或作业）之间进行<br>覆盖则用于同一程序或进程中</p><hr><h2 id="11、动态分区分配算法有哪几种？分别说说？"><a href="#11、动态分区分配算法有哪几种？分别说说？" class="headerlink" title="11、动态分区分配算法有哪几种？分别说说？"></a>11、动态分区分配算法有哪几种？分别说说？</h2><ol><li><p>首次适应算法<br>  算法思想：每次都从低地址开始查找，找到第一个能满足大小的空闲分区。<br>  如何实现：空闲分区以<b>地址递增</b>的次序排列。<br>    每次分配内存时顺序查找空闲分区链（或空闲分区表），找到大小能满足要求的第一个空闲分区。<br>  <b>缺点</b>：每次都从链头开始查找，每次都需要检索低地址小分区，查询效率受影响<br>  <b>优点</b>：优先使用较小分区，高地址部分较大分区会被留下来</p></li><li><p>最佳适应算法<br>  算法思想：由于动态分区分配是一种连续分配方式，为各进程分配的空间必须是连续的一整片区域。<br>     因此为了保证当“大进程”到来时能有连续的大片空间，可以尽可能多地留下大片的空闲区，即：优先使用更小的空闲区。</p></li></ol><p>  如何实现：空闲分区按<b>容量递增</b>的次序链接。<br>           每次分配内存时顺序查找空闲分区链（或空闲分区表），找到大小能满足要求的第一个空闲分区。</p><p>  <b>缺点</b>：每次都使用最小的分区进行匹配，越来越多的难以利用的小内存会被保留下来，因此这种方法会产生很多外部碎片</p><ol start="3"><li>最坏适应算法（最大适应算法）<br>  算法思想：为了解决最佳适应算法的问题 —— 即留下太多难以利用的小碎片，<br>    可以在每次分配时优先使用最大的连续空闲区，这样分配后剩余的空闲区就不会太小，更方便使用。</li></ol><p>  如何实现：空闲分区按<b>容量递减</b>的次序链接。<br>           每次分配内存时顺序查找空闲分区链（或空闲分区表），找到大小能满足要求的第一个空闲分区。</p><p>  <b>缺点</b>：每次都选用最大的分区进行匹配，虽然可以让分配后留下的空闲区更大，可利用，<br>               但这种方式会导致较大的连续空闲区被迅速用完，如果之后有“大进程”到达，就没有内存可以利用了。</p><ol start="4"><li>邻近适应算法<br>  算法思想：首次适应算法每次都从链头开始查找。这可能会导致低地址部分出现很多小的空闲分区，而每次分配查找时，都要经过这些分区，因而增加查找开销。<br>    如果每次都从上次查找结束的位置开始搜索，就能解决上述问题。</li></ol><p>  如何实现：空闲分区以<b>地址递增</b>的顺序排列（可链接成一个循环链表）。<br>           每次分配内存时从上次结束查找的位置开始查找空闲分区链（或空闲分区表），找到大小能满足要求的第一个空闲分区。</p><p>  <b>缺点</b>：高地址、低地址都有相同的概率被使用，高地址部分的大分区被划分为小分区，最后导致无大分区可用。</p><ol start="5"><li>总结：<br>  首次适应不仅最简单，通常也是最好最快<br>  不过首次使用算法会使内存低地址部分出现很多小的空闲分区，而每次查找都要经过这些分区，因此增加了查找的开销。<br>  临近算法试图解决这个问题，但实际上，它常常会导致在内存的末尾分配空间分裂成小的碎片，它通常比首次适应算法结果差。</li></ol><p>  最佳适应导致大量碎片，最坏适应导致没有大的空间。</p><p>  实验结果：首次适应比最佳适应好，但他们都比最坏适应好。</p><blockquote><p>综合考虑：四种算法中，首次适应算法的效果最佳。</p></blockquote><p>|算法|算法思想|分区排列顺序|优点|缺点|<br>|首次适应|从头到尾找到适合的分区|空闲分区以地址递增次序排列|综合性能最好。<b>算法开销小</b>回收分区一般不需要对空闲分区队列重新排序|低地址部分小空间遍历增加复杂度|<br>|最佳适应|优先使用更小的分区，以保留更多大分区|空闲分区以容量递增次序排列|会有更多大分区被保留下来，更能满足大进程需求|会产生很多太小的、难以利用的碎片；<b>算法开销大</b>回收分区后可能要对空闲分区队列重新排序|<br>|最坏适应|优先使用更大的分区，以防止产生太小的不可用的碎片|空间分区以递减次序排列|可以减少难以利用的小碎片|大分区容易用完，不利于后续大进程，<b>算法开销大</b>，（需要排序）|</p><h2 id="邻近适应-由首次适应演变而来，每次从上次查找结束位置开始查找-空闲分区以地址递增次序排列（可循环链表）-不用每次都从低地址的小分区开始检索。算法开销小，不需要排序-会使高地址空间大分区被用完"><a href="#邻近适应-由首次适应演变而来，每次从上次查找结束位置开始查找-空闲分区以地址递增次序排列（可循环链表）-不用每次都从低地址的小分区开始检索。算法开销小，不需要排序-会使高地址空间大分区被用完" class="headerlink" title="|邻近适应|由首次适应演变而来，每次从上次查找结束位置开始查找|空闲分区以地址递增次序排列（可循环链表）|不用每次都从低地址的小分区开始检索。算法开销小，不需要排序|会使高地址空间大分区被用完|"></a>|邻近适应|由首次适应演变而来，每次从上次查找结束位置开始查找|空闲分区以地址递增次序排列（可循环链表）|不用每次都从低地址的小分区开始检索。<b>算法开销小</b>，不需要排序|会使高地址空间大分区被用完|</h2><h2 id="12、虚拟技术？"><a href="#12、虚拟技术？" class="headerlink" title="12、虚拟技术？"></a>12、虚拟技术？</h2><p>虚拟技术把一个物理实体转换成多个逻辑实体</p><p>主要有两个虚拟技术：<br>  时分复用技术（时间）；空分复用技术（空间）</p><p>多进程与多线程：<br>  多个进程能在同一个处理器上并发执行使用了时分复用技术，让每个进程轮流占用处理器，每次只执行一小个时间片并快速切换。</p><p>虚拟内存：<br>  使用了空分复用技术，它将物理内存抽象为地址空间，每个进程都有各自的地址空间。<br>  地址空间的页被映射到物理内存，地址空间的页并不需要全部在物理内存中，当使用到一个没有在物理内存中的页时，执行页面置换算法，将该页置换到内存中。</p><hr><h2 id="13、进程状态的切换？"><a href="#13、进程状态的切换？" class="headerlink" title="13、进程状态的切换？"></a>13、进程状态的切换？</h2><img src="/2022/02/28/OperatingSystem/ProcessState.png" class=""><ul><li><p>就绪状态(ready)：等待被调度</p></li><li><p>运行状态(running)</p></li><li><p>阻塞状态(waiting)：等待资源</p></li></ul><p>应该注意以下内容：</p><ul><li><p>只有就绪态和运行态可以相互转换，其他的都是单向转换。<br>就绪状态和进程通过调度算法从而获得CPU时间，转为运行状态；<br>而运行状态的进程，在分配给它的CPU时间片用完之后就会转为就绪状态，等待下一次调度。</p></li><li><p>阻塞状态是缺少需要的资源从而由运行状态转换而来，但是该资源不包括CPU时间<br>缺少CPU时间就会从运行态转换为就绪态。</p></li></ul><hr><h2 id="14、一个程序从开始运行到结束的完整过程？"><a href="#14、一个程序从开始运行到结束的完整过程？" class="headerlink" title="14、一个程序从开始运行到结束的完整过程？"></a>14、一个程序从开始运行到结束的完整过程？</h2><p>四个过程：</p><ol><li><p>预编译<br>  主要处理源代码文件中的以”#”开头的预编译指令。处理规则如下：</p></li><li><p>删除所有的#define，展开所有的宏定义。</p></li><li><p>处理所有的条件预编译指令，如”#if”、”#endif”、”#ifdef”、”#elif”和”#else”</p></li><li><p>处理”#include”预编译指令，将文件内容替换到它的位置，这个过程是递归进行的，文件中包含其他文件。</p></li><li><p>删除所有的注释，”&#x2F;&#x2F;“和”&#x2F;**&#x2F;“</p></li><li><p>保留所有的#pragma编译器指令，编译器需要用到他们<br>例如：#pragma once是为了防止有文件被重复引用</p></li><li><p>添加行号和文件标识，以便编译时编译器产生调试用的行号信息，和编译时产生编译错误或警告时能产生行号。</p></li><li><p>编译<br>  把预编译之后生成的xxx.i或xxx.ii文件，进行一系列词法分析、语法分析、语义分析及优化后，生成相应的汇编代码文件。</p></li><li><p>词法分析：利用类似于“有限状态机”的算法，将源代码程序输入到扫描机中，将其中的字符序列分割成一系列的序号</p></li><li><p>词法分析：语法分析器对由扫描器产生的记号，进行语法分析，产生语法树。<br>     由语法分析器输出的语法树是一种以表达式为结点的树</p></li><li><p>语义分析：语法分析器只是完成了对表达式语法层面的分析，语义分析器则对表达式是否有意义进行判断，<br>     其分析的语义是静态语义 —— 在编译器能分期的语义，想对应的动态语义是在运行期才能确定的语义。</p></li><li><p>优化：源代码级别的一个优化过程</p></li><li><p>目标代码生成：由代码生成器将中间代码转换为目标机器代码，生成一系列的代码序列 —— 汇编语言表示。</p></li><li><p>目标代码优化：目标代码优化器对上述的机器代码进行优化：<br>         寻找合适的寻址方式、使用移位来代替乘法运算、删除多余指令等。</p></li><li><p>汇编<br>  将汇编代码转变成机器可执行的指令（机器码文件）<br>  汇编器的汇编过程相对于编译器来说更简单，没有复杂的语法和语义、更不用做指令优化<br>  只是根据汇编指令和机器指令的对照表一一翻译过来，汇编过程有汇编器完成。</p></li></ol><p>  经汇编之后，产生目标文件（与可执行文件格式就一样）xxx.o（Linux下）、xxx.obj（Windows下）</p><ol start="4"><li>链接<br>  将不同的源文件产生的目标文件进行链接，从而形成一个可执行的程序。链接分为静态链接和动态链接：<ol><li><p>静态链接：<br>函数和数据被编译进一个二进制文件。在使用静态库的情况下，在编译连接可执行文件时，链接器从库中复制这些函数和数据并把他们和应用程序的其他模块组合起来创建最终的可执行文件。<br>缺点：</p><ul><li>空间浪费：因为每个可执行程序中对所有需要的目标文件都有一份副本，所以如果多个程序对同一个目标文件都有依赖，会出现同一个目标文件都在内存中存在多个副本；</li><li>更新困难：每当库函数的代码修改了，这个时候就要重新编译链接形成可执行程序。</li></ul><p>优点：</p><ul><li>运行速度快：静态链接的优点是，在可执行程序中已经具备了所有执行程序所需的任何东西，执行时候速度快。</li></ul></li><li><p>动态链接：<br>动态链接的基本思想是把程序按照魔铠拆分成各个相对独立部分，在程序运行时才将它们链接在一起形成一个完整的程序，而不是像静态链接一样把所有程序模块都链接成一个单独的可执行文件。</p><ul><li><p>特点：</p><ul><li>共享库：就是即使需要每个程序都依赖同一个库，但是该库不会像静态链接那样在内存中存在多份副本，而是多个程序在执行时共享同一个副本；</li></ul></li><li><p>优点：</p><ul><li>更新方便：更新时只需要替换原来的目标文件，而无需将所有的程序再重新链接一遍。当程序下一次运行时，新版本的目标文件会被自动加载到内存并且链接起来，程序就完成了升级的目标</li></ul></li><li><p>缺点：</p><ul><li>性能损耗：因为把链接推迟到了程序运行时，所以每次执行程序都需要进行链接，所以性能会有一定损失。</li></ul></li></ul></li></ol></li></ol><hr><h2 id="15、通过例子讲解逻辑地址转换为物理地址的基本过程"><a href="#15、通过例子讲解逻辑地址转换为物理地址的基本过程" class="headerlink" title="15、通过例子讲解逻辑地址转换为物理地址的基本过程"></a>15、通过例子讲解逻辑地址转换为物理地址的基本过程</h2><p>可以借助进程的页表将逻辑地址转换为物理地址</p><p>通常会在系统中设置一个页表寄存器（PTR），存放页表在内存中的起始地址F和页表长度M。<br>程序未进行时，页表的起始地址和页表长度放在进程控制块（PCB）中，当进程被调度时，操作系统内核会把他们放到页表寄存器中。</p><p>注意：页面的大小是2的整数次幂，设页面大小为L，逻辑地址A到物理地址E的变换过程如下：</p><img src="/2022/02/28/OperatingSystem/LA2PA.png" class=""><p>例：<br>若页面大小L为1K字节，页号2对应的是内存块号b&#x3D;8，将逻辑地址A&#x3D;2500转换为物理地址E。</p><p>某系统按字节寻址，逻辑地址结构中，页内偏移量占10位（说明一个页面的大小为2^10B &#x3D; 1KB）<br>页号2对应的内存块号b &#x3D; 8，将逻辑地址A &#x3D; 2500转换为物理地址E。</p><blockquote><ol><li><p>计算页号、页内偏移量：页号P &#x3D; A &#x2F; L &#x3D; 2500 &#x2F; 1024 &#x3D; 2; 页内偏移量W &#x3D; A % L &#x3D; 2500 % 1024 &#x3D; 452</p></li><li><p>根据题中条件可知，页号2没有越界，其存放的内存块号b &#x3D; 8;</p></li><li><p>物理地址E &#x3D; b * L + W &#x3D; 8 * 1024 + 425 &#x3D; 8644;</p></li></ol><p>在分页存储管理（页式管理）的系统中，只要确定了每个页面的大小，逻辑地址结构就确定了<br>因此，页式管理中的地址是一位的，即只要给出一个逻辑地址，系统就可以自动算出页号、页内偏移量<br>并不需要显式告诉系统这个逻辑地址中，页内偏移量占多少位</p></blockquote><hr><h2 id="16、进程同步的四种方法？"><a href="#16、进程同步的四种方法？" class="headerlink" title="16、进程同步的四种方法？"></a>16、进程同步的四种方法？</h2><ol><li>临界区<br>  对临界资源进行访问的那段代码称为临界区。</li></ol><p>  为了互斥访问临界资源，每个进程在进入临界区之前都需要进行检查<br>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// entry section</span><br><span class="line">// critical section</span><br><span class="line">// exit section</span><br></pre></td></tr></table></figure></p><ol start="2"><li>同步与互斥</li></ol><ul><li>同步：多个进程因为合作产生的直接制约关系，使得进程有一定的先后执行关系</li><li>互斥：多个进程在同一时刻只能有一个进程进入临界区。</li></ul><ol start="3"><li>信号量<br>  信号量（Semaphore）是一个整型变量，可以对其执行down和up操作，也就是常见的P和V操作。</li></ol><ul><li><p>down：如果信号量大于0，执行-1操作；如果信号量等于 0，则进程等待，等到信号量大于0</p></li><li><p>up：对信号量执行+1操作，唤醒等待的进程让其完成down操作</p></li></ul><p>  down和up操作需要被设计成为原语，不可分割，通常的做法是在执行这些操作的时候屏蔽中断。</p><p>  如果信号量的取值只能为0或1，则成为了<b>互斥量（Mutex）</b>，0表示临界区已经加锁，1表示临界区解锁。<br>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> semaphore;</span><br><span class="line"></span><br><span class="line">semaphore mutex = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">P1</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">down</span>(&amp;mutex);</span><br><span class="line">  <span class="comment">// 临界区</span></span><br><span class="line">  <span class="built_in">up</span>(&amp;mutex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">P2</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">down</span>(&amp;mutex);</span><br><span class="line">  <span class="comment">// 临界区</span></span><br><span class="line">  <span class="built_in">up</span>(&amp;mutex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><b>使用信号量实现生产者-消费者问题</b><br>问题描述：用一个缓冲区保存物品，只要缓冲区没有满，生产者才可以放入物品；只有缓冲区不为空，消费者才可以拿走物品。</p><p>因为缓冲区属于临界资源，因此需要使用一个互斥量Mutex来控制对缓冲区的互斥访问。<br>为了同步生产者和消费者的行为，需要记录缓冲区中物品的数量。数量可以使用信号量来进行统计，这里要使用两个信号量：<br>empty —— 记录空缓冲区的数量<br>full  —— 记录满缓冲区的数量</p><p>其中，<br>empty信号量是在生产者进程中使用，当empty不为0时候，生产者才可以放入物品；<br>full信号量是在消费者进程中使用，当full不为0的时候，消费者才可以取走物品。</p><p>注意：<br>不能先对缓冲区进行加锁，再测试信号量。<br>也就是说，不能先执行down(&amp;mutex)再执行down(&amp;empty)</p><p>注意如下情况：生产者对缓冲区加锁后，执行down(empty)操作，发现empty &#x3D; 0，此时生产者阻塞。<br>与此同时，由于缓冲区加锁，消费者无法执行up(empty)操作，empty永远都为0，导致死锁。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> N 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> semaphore;</span><br><span class="line">semaphore mutex = <span class="number">1</span>;  <span class="comment">// 实现缓冲区互斥</span></span><br><span class="line">semaphore empty = N;  <span class="comment">// 实现生产者消费者同步</span></span><br><span class="line">semaphore full = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">producer</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="type">int</span> item = <span class="built_in">produce_item</span>();</span><br><span class="line">    <span class="built_in">down</span>(&amp;empty);</span><br><span class="line">    <span class="built_in">down</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">insert_item</span>(item);</span><br><span class="line">    <span class="built_in">up</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">up</span>(&amp;full);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">consumer</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="built_in">down</span>(&amp;full);</span><br><span class="line">    <span class="built_in">down</span>(&amp;mutex);</span><br><span class="line">    <span class="type">int</span> item = <span class="built_in">remove_item</span>();</span><br><span class="line">    <span class="built_in">consume_item</span>(item);</span><br><span class="line">    <span class="built_in">up</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">up</span>(&amp;empty);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>管程<br>使用信号量机制实现的生产者-消费者问题需要客户端代码进行很多控制，而管程把用于控制的代码独立出来，不仅不容易出错，也使得客户端代码调用更容易。</li></ol><p>c 语言不支持管程，下面的示例代码使用了类 Pascal 语言来描述管程。<br>示例代码的管程提供了 insert() 和 remove() 方法，客户端代码通过调用这两个方法来解决生产者-消费者问题。</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">monitor ProducerConsumer</span><br><span class="line">  integer i;</span><br><span class="line">  condition c;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">procedure</span> <span class="title">insert</span><span class="params">()</span>;</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">procedure</span> <span class="title">remove</span><span class="params">()</span>;</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span> monitor;</span><br></pre></td></tr></table></figure><p>管程有一个重要特性：在一个时刻只能有一个进程使用管程。<br>进程在无法继续执行的时候不能一直占用管程，否则其他进程永远不能使用管程。</p><p>管程引入了<b>条件变量</b>以及相关的操作：wait() 和 signal() 来实现同步操作。<br>对条件变量执行 wait() 操作会导致调用进程阻塞，把管程让出来给另一个进程持有；<br>signal() 操作用于唤醒被阻塞的进程。</p><p><b>使用管程实现生产者-消费者问题</b></p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 管程</span></span><br><span class="line">monitor ProducerComsumer</span><br><span class="line">  condition full, empty;</span><br><span class="line">  integer count := <span class="number">0</span>;</span><br><span class="line">  condition c;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">procedure</span> <span class="title">insert</span><span class="params">(item: integer)</span>;</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span> count = N <span class="keyword">then</span> wait(full);</span><br><span class="line">    insert_item(item);</span><br><span class="line">    count := count + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> count = <span class="number">1</span> <span class="keyword">then</span> signal(empty);</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">remove</span>:</span> integer;</span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span> count = <span class="number">0</span> <span class="keyword">then</span> wait(empty);</span><br><span class="line">    remove = remove_item;</span><br><span class="line">    count := count - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> count = N - <span class="number">1</span> <span class="keyword">then</span> signal(full);</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span> monitor;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产者客户端</span></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">producer</span></span></span><br><span class="line"><span class="function"><span class="title">begin</span></span></span><br><span class="line"><span class="function">  <span class="title">while</span> <span class="title">true</span> <span class="title">do</span></span></span><br><span class="line"><span class="function">  <span class="title">begin</span></span></span><br><span class="line"><span class="function">    <span class="title">item</span> = <span class="title">produce_item</span>;</span></span><br><span class="line">    ProducerConsumer.insert(item);</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费者客户端</span></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">consumer</span></span></span><br><span class="line"><span class="function"><span class="title">begin</span></span></span><br><span class="line"><span class="function">  <span class="title">while</span> <span class="title">true</span> <span class="title">do</span></span></span><br><span class="line"><span class="function">  <span class="title">begin</span></span></span><br><span class="line"><span class="function">    <span class="title">item</span> = <span class="title">ProducerConsumer</span>.<span class="title">remove</span>;</span></span><br><span class="line">    consume_item(item);</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="17、操作系统在对内存进行管理的时候需要做些什么？"><a href="#17、操作系统在对内存进行管理的时候需要做些什么？" class="headerlink" title="17、操作系统在对内存进行管理的时候需要做些什么？"></a>17、操作系统在对内存进行管理的时候需要做些什么？</h2><ul><li><p>操作系统负责内存空间的分配与回收。</p></li><li><p>操作系统需要提供某种技术从逻辑上对内存空间进行扩充。</p></li><li><p>操作系统需要提供地址转换功能，负责程序的逻辑地址和物理地址转换。</p></li><li><p>操作系统需要提供内存保护功能，保证各进程在各自存储空间内运行，互不干扰。</p></li></ul><hr><h2 id="18、进程通信方法（Linux和Windows下），线程通信方法（Linux和Windows下）"><a href="#18、进程通信方法（Linux和Windows下），线程通信方法（Linux和Windows下）" class="headerlink" title="18、进程通信方法（Linux和Windows下），线程通信方法（Linux和Windows下）"></a>18、进程通信方法（Linux和Windows下），线程通信方法（Linux和Windows下）</h2><ul><li><p>进程通信方法</p><img src="/2022/02/28/OperatingSystem/ProcessCommunicate.png" class=""><ul><li>名称及方式<br>|管道(pipe)|允许一个进程和另一个与它有共同祖先的进程之间相互通信|<br>|命名管道(FIFO)|类似于管道，但是它可以用于任何两个进程之间的通信，命名管道在文件系统中有对应的文件名。命名管道通过命令mkfifo或系统调用mkfifo创建|<br>|消息队列(MQ)|消息队列是消息的连接表，包括POSIX消息队列和System V消息队列。有足够权限的进程可以向队列中添加消息，被赋予读权限的进程则可以读走队列中的消息。消息队列克服了信号承载信息量少，管道只能成该无格式字节流即缓冲区大小受限等缺点|<br>|信号量(semaphore)|信号量主要作为进程间以及同进程不同线程之间的同步手段|<br>|共享内存(shared memory)|它使得多个进程可以访问同一块内存空间，<b>是最快的可用IPC形式</b>这是针对其他通信机制运行效率较低而设计的。它往往与其他通信机制，例如信号量结合使用，以达到进程间的同步及互斥|<br>|信号量(signal)|信号是比较复杂的通信方式，用于通知接收进程有某种事情发生，除了用于进程间通信外，进程还可以发送信号给进程本身|<br>|内存映射(mapped memory)|内存映射允许多个进程间通信，每一个使用该机制的进程通过把一个共享的文件映射到自己的进程地址空间来实现它|<br>|Socket|它是更为通用的进程间通信机制，可用于不同机器之间的进程间通信|</li></ul></li><li><p>线程通信方法</p><img src="/2022/02/28/OperatingSystem/ThreadCommunicate.png" class=""><ul><li>名称及含义<br>|Linux||<br>|信号|类似进程间的信号处理|<br>|锁机制|互斥锁、读写锁和自旋锁|<br>|条件变量|使用通知的方式解锁，与互斥锁配合使用|<br>|信号量|包括无名线程信号量和命名线程信号量|<br>|Windows||<br>|全局变量|需要有多个线程来访问一个全局变量时，通常我们会在这个全局变量前加上volatile声明，以防止编译器对此变量进行优化|<br>|Message消息机制|常用的Message通信的接口主要有两个：PostMessage和PostThreadMessage，PostMessage为进程向主窗口发送消息；PostThreadMessage是任意两个线程之间的通信接口|<br>|CEvent对象|CEvent为MFC中的一个对象，可以通过CEvent的触发状态进行改变，从而实现线程间的通信和同步，这个主要是实现线程直接同步的一种方法。|</li></ul></li></ul><hr><h2 id="19、进程间通信有哪几种形式？"><a href="#19、进程间通信有哪几种形式？" class="headerlink" title="19、进程间通信有哪几种形式？"></a>19、进程间通信有哪几种形式？</h2><p>Linux几乎支持全部Unix进程间通信方法<br>包括：管道（有名管道和无名管道）、消息队列、共享内存、信号量、套接字等。</p><p>其中前四个属于同一台机器下进程间的通信，套接字则是用于网络通信。</p><ol><li>管道</li></ol><ul><li><p>无名管道</p><ul><li>无名管道特点<ul><li><p>无名管道是一种特殊的文件，这种文件只存在于内存中</p></li><li><p>无名管道只能用于父子进程或兄弟进程之间，必须用于具有亲缘关系的进程间通信</p></li><li><p>无名管道只能由一端向另一端发送数据，是半双工方式，如果双方需要同时收发数据则需要两个管道</p></li></ul></li><li>相关接口<ul><li>int pipe(int fd[2 ]);<ul><li>fd[2 ]:管道两端用fd[0 ]和fd[1 ]来描述，读的一段用f[0 ]表示，写的一端用fd[1 ]表示。<br>通信双方的进程中写数据的一方要把fd[0 ]先close掉，读的一方要先把fd[1 ]给close掉。</li></ul></li></ul></li></ul></li><li><p>有名管道：</p><ul><li>有名管道特点：<ul><li><p>有名管道是FIFO文件，存在于文件系统中，可以通过文件路径名来指出。</p></li><li><p>有名管道可以在不具有亲缘关系的进程间通信</p></li></ul></li><li>相关接口：<ul><li>int mkfifo(const char* pathname, mode_t mode);<ul><li><p>pathname：即将创建的FIFO文件路径，如果文件存在需要先删除。</p></li><li><p>mode：和open()中的参数相同。</p></li></ul></li></ul></li></ul></li></ul><ol start="2"><li><p>消息队列<br>  相比于FIFO，消息队列具有以下优点：</p><ul><li><p>消息队列可以独立于读写进程存在，从而避免了FIFO中同步管道打开和关闭时可能产生的困难</p></li><li><p>避免了FIFO的同步阻塞问题，不需要进程自己提供同步方法。</p></li><li><p>读进程可以根据消息类型有选择地接收消息，而不像FIFO那样只能默认地接收。</p></li></ul></li><li><p>共享内存<br>  进程可以将同一段共享内存连接到他们自己的地址空间，所有进程都可以访问共享内存中的地址<br>  如果某个进程向共享内存内写入数据，所做的改动将立即影响到可以访问该共享内存的其他所有进程。</p></li></ol><ul><li><p>相关接口：</p><ul><li><p>创建共享内存：int shmget(key_t key, int size, int flag);<br>成功时返回一个和key相关的共享内存标识符，失败返回-1</p><ul><li>key：为共享内存段命名，多个共享同一片内存的进程使用同一个key</li><li>size：共享内存容量</li><li>flag：权限标志位，和open的mode参数一样</li></ul></li><li><p>连接到共享内存地址空间：void* shmat(int shmid, void *addr, int flag);<br>返回值即共享内存实际地址</p><ul><li>shmid：shmget()返回的标识。</li><li>addr：决定以什么方式连接地址。</li><li>flag：访问模式</li></ul></li><li><p>从共享内存分离：int shmdt(const void *shmaddr);<br>调用成功返回0，失败返回-1</p><ul><li>shmaddr：是shmat()返回的地址指针。</li></ul></li></ul></li><li><p>其他补充<br>共享内存方式像极了多线程中线程对全局变量的访问，大家都对等地有权去修改这块内存的值，<br>这就导致了在多进程并发下，最终结果是不可预测的，所以对这块临界区的访问需要通过信号量进行进程同步。</p><p>但共享内存的优势也很明显，首先可以通过共享内存进行通信的进程不需要像无名管道一样需要通信的进程间有亲缘关系<br>其次，共享内存的速度也比较快，不存在读取文件、消息传递等过程，只需要到相应映射的内存地址直接读写数据即可。</p></li></ul><ol start="5"><li>信号量<br>  在提到共享内存方式时也提到，进程共享内存和多线程共享全局变量非常相似。<br>  所以在使用内存共享的方式是也需要通过信号量来完成进程间同步。</li></ol><p>  多线程同步的信号量是POSIX信号量，而在进程里使用SYSTEM V信号量。</p><ul><li>相关接口：<ul><li><p>创建信号量：int semget(key_t key, int nsems, int semflag);<br>创建成功返回信号量标识符，失败返回-1</p><ul><li><p>key：进程pid</p></li><li><p>nsems：创建信号量的个数</p></li><li><p>semflag：指定信号量读写权限</p></li></ul></li><li><p>改变信号量值：int semop(int semid, struct sembuf *sops, unsigned npos);<br>我们所需要做的主要工作就是将创建sembuf变量设置其值，然后调用semop，把设置好的sembuf变量传递进去。</p><p>struct sembuf结构体定义如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">sembuf</span>&#123;</span><br><span class="line">  <span class="type">short</span> sem_num;</span><br><span class="line">  <span class="type">short</span> sem_op;</span><br><span class="line">  <span class="type">short</span> sem_flg;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>成功返回信号量标识符，失败返回-1</p><ul><li><p>semid：信号量标识符，由semget()函数返回</p></li><li><p>sops：指向struct sembuf结构的指针，先设置好sembuf值再通过指针传递。</p></li><li><p>nsops：进行操作信号量的个数，即sops结构变量的个数，需要大于或等于1。最常见设置此值等于1，只完成对一个信号量的操作。</p></li></ul></li><li><p>直接控制信号量信息：int semctl(int semid, int semnum, int cmd, union semun arg);</p><ul><li><p>semid：信号量集标识符</p></li><li><p>semnum：信号量集数组上的下标，表示某一个信号量。</p></li><li><p>arg：union semun类型</p></li></ul></li></ul></li></ul><ol start="6"><li><p>辅助命令<br>  ipcs命令用于报告共享内存、信号量和消息队列信息。</p><ul><li><p>ipcs -a：列出共享内存、信号量和消息队列信息</p></li><li><p>ipcs -l：列出系统限额</p></li><li><p>ipcs -u：列出当前使用情况</p></li></ul></li><li><p>套接字<br>  与其他通信机制不同的是，它可以用于不同机器间的进程通信</p></li></ol><hr><h2 id="20、虚拟内存的目的？"><a href="#20、虚拟内存的目的？" class="headerlink" title="20、虚拟内存的目的？"></a>20、虚拟内存的目的？</h2><p>虚拟内存的目的是为了让物理内存扩充成为更大的逻辑内存，从而让程序获得更多的可用内存</p><p>为了更好的管理内存，操作系统将内存抽象成地址空间。每个程序拥有自己的地址空间，这个地址空间被分割成多个块，每一块成为一页。</p><p>这些页被映射到物理内存，但不需要映射到连续的物理内存，也不需要所有也都必须在物理内存中。<br>当程序引用到不在物理内存中的页时，由硬件执行必要的映射，将缺失的部分装入物理内存并重新执行失败的指令。【缺页】</p><p>从上面的描述中可以看出，虚拟内存允许程序不用讲地址空间中的每一页都映射到物理内存，也就是说一个程序不需要完全调入内存中就可以运行<br>这使得有限内存运行大程序成为可能。</p><p>例如有一台计算机可以产生16位地址，那么一个程序的地址空间范围是0~64K【2^16】<br>该计算机只有32KB的物理内存，虚拟内存技术允许该计算机运行一个64K大小的程序。</p><img src="/2022/02/28/OperatingSystem/VMemory.png" class=""><hr><h2 id="21、说一下理解中的内存，有什么用？"><a href="#21、说一下理解中的内存，有什么用？" class="headerlink" title="21、说一下理解中的内存，有什么用？"></a>21、说一下理解中的内存，有什么用？</h2><img src="/2022/02/28/OperatingSystem/Memory.png" class=""><ol><li><p>程序执行前需要先放到内存中才能被CPU处理</p></li><li><p>存储单元、编址方式【按字节编址、按字编址，不同字不同位，一般为8的倍数】</p></li></ol><hr><h2 id="22、操作系统经典问题-哲学家进餐"><a href="#22、操作系统经典问题-哲学家进餐" class="headerlink" title="22、操作系统经典问题 - 哲学家进餐"></a>22、操作系统经典问题 - 哲学家进餐</h2><p>五个哲学家围着一张圆桌，每个哲学家面前放着食物。<br>哲学家的生活有两种交替活动：吃饭和思考。<br>当一个哲学家吃饭时，需要先拿起自己左右两边的筷子，并且一次只能拿起一根筷子。</p><ol><li>错误解法：所有哲学家先拿起左边的筷子，则可能出现所有哲学家在等其他哲学家放下筷子，从而导致死锁</li></ol><p>为了防止死锁的发生，可以设置两个条件：</p><ul><li><p>必须同时拿起左右两根筷子</p></li><li><p>只有在两个邻居都没有进餐的情况下才允许进餐</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> N 5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LEFT (i + N - 1) % N  <span class="comment">// 左邻居</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RIGHT (i + 1) % N     <span class="comment">// 右邻居</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> THINKING 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HUNGRY 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EATING 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> semaphore;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> state[N]; <span class="comment">// 跟踪每个哲学家的状态</span></span><br><span class="line"></span><br><span class="line">semaphore mutex = <span class="number">1</span>;  <span class="comment">// 临界区的互斥，临界区是state数组，对其修改需要互斥</span></span><br><span class="line">semaphore s[N];       <span class="comment">// 每个哲学家一个信号量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">philosopher</span><span class="params">(<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(TRUE)&#123;</span><br><span class="line">    <span class="built_in">think</span>(i);</span><br><span class="line">    <span class="built_in">take_two</span>(i);</span><br><span class="line">    <span class="built_in">eat</span>(i);</span><br><span class="line">    <span class="built_in">put_two</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">take_two</span><span class="params">(i)</span></span>&#123;</span><br><span class="line">  <span class="built_in">down</span>(&amp;mutex);</span><br><span class="line">  state[i] = HUNGRY;</span><br><span class="line">  <span class="built_in">check</span>(i);</span><br><span class="line">  <span class="built_in">up</span>(&amp;mutex);</span><br><span class="line">  <span class="built_in">down</span>(&amp;s[i]);  <span class="comment">// 只有收到通知之后才可以开始吃，否则会一直等下去</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">put_two</span><span class="params">(i)</span></span>&#123;</span><br><span class="line">  <span class="built_in">down</span>(&amp;mutex);</span><br><span class="line">  state[i] = THINKING;</span><br><span class="line">  <span class="built_in">check</span>(LEFT);  <span class="comment">// 尝试通知左右邻居，自己已经吃完了，你们可以开始吃了</span></span><br><span class="line">  <span class="built_in">check</span>(RIGHT);</span><br><span class="line">  <span class="built_in">up</span>(&amp;mutex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">eat</span><span class="params">(<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">  <span class="built_in">down</span>(&amp;mutex);</span><br><span class="line">  state[i] = EATING;</span><br><span class="line">  <span class="built_in">up</span>(&amp;mutex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查两个邻居是否都没有用餐，如果是的话，就up(&amp;s[i])，使得down(&amp;s[i])能够得到通知并继续执行</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">check</span><span class="params">(i)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(state[i] == HUNGRY &amp;&amp; state[LEFT] != EATING &amp;&amp; state[RIGHT] != EATING)&#123;</span><br><span class="line">    state[i] = EATING;</span><br><span class="line">    <span class="built_in">up</span>(&amp;s[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="23、操作系统经典问题-读者写者问题"><a href="#23、操作系统经典问题-读者写者问题" class="headerlink" title="23、操作系统经典问题 - 读者写者问题"></a>23、操作系统经典问题 - 读者写者问题</h2><p>允许多个进程同时对数据进行操作，但是不允许读和写以及写和写操作同时发生。</p><p>一个整型变量count记录在对数据进行读操作的进程数量<br>一个互斥类count_mutex用于对count加锁<br>一个互斥量data_mutex用于对读写的数据加锁。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> semaphore;</span><br><span class="line"></span><br><span class="line">semaphore count_mutex = <span class="number">1</span>;</span><br><span class="line">semaphore data_mutex = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reader</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(TRUE)&#123;</span><br><span class="line">    <span class="built_in">down</span>(&amp;count_mutex);</span><br><span class="line">    count ++;</span><br><span class="line">    <span class="keyword">if</span>(count == <span class="number">1</span>)  <span class="built_in">down</span>(&amp;data_mutex);  <span class="comment">// 第一个读者需要对数据进行加锁，防止写进程访问</span></span><br><span class="line">    <span class="built_in">up</span>(&amp;count_mutex);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">down</span>(&amp;count_mutex);</span><br><span class="line">    count--;</span><br><span class="line">    <span class="keyword">if</span>(count == <span class="number">0</span>)  <span class="built_in">up</span>(&amp;data_mutex);  <span class="comment">// 最后一个读者要对数据进行解锁，防止写进程无法访问</span></span><br><span class="line">    <span class="built_in">up</span>(&amp;count_mutex);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writer</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(TRUE)&#123;</span><br><span class="line">    <span class="built_in">down</span>(&amp;data_mutex);</span><br><span class="line">    <span class="built_in">write</span>();</span><br><span class="line">    <span class="built_in">up</span>(&amp;data_mutex);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="24、介绍一下几种典型的锁？"><a href="#24、介绍一下几种典型的锁？" class="headerlink" title="24、介绍一下几种典型的锁？"></a>24、介绍一下几种典型的锁？</h2><ol><li>读写锁</li></ol><ul><li><p>多个读者可以同时进行读</p></li><li><p>写者必须互斥（只允许一个写者写，也不能读者写者同时进行）</p></li><li><p>写者优先于读者（一旦有写者，则后续读者必须瞪大，唤醒时优先考虑写者）</p></li></ul><ol start="2"><li>互斥锁【想象成互斥信号量】<br>  一次只能一个线程拥有互斥锁，其他线程只能等待</li></ol><p>  互斥锁是在抢锁失败的情况下主动放弃CPU进入睡眠状态直到锁的状态改变时再唤醒<br>  而操作系统负责线程调度，为了实现锁的状态发生改变时唤醒阻塞的进程或线程，需要把所交给操作系统管理，所以互斥锁在加锁操作时涉及上下文切换。<br>  【上下文切换是指，当得不到互斥变量时，需要移交CPU使用权】</p><p>  互斥锁实际的效率还是可以让人接受的，加锁的时间大概100ns左右，而实际上互斥锁的一种可能实现是先自旋一段时间，【说不好瞬间可以使用了】<br>  当自旋的时间超过阈值之后再将线程投入睡眠中，因此在并发运算中使用互斥锁（每次占用锁的时间很短）的效果可能不亚于使用自旋锁。</p><ol start="3"><li>条件变量<br>  互斥锁一个明显的缺点是他只有两种状态：锁定和非锁定。</li></ol><p>  而条件变量通过允许线程阻塞和等待另一个线程发送信号的方法弥补了互斥锁的不足，他常和互斥锁一起使用，以免出现竞态条件。【锁住同步信号量】<br>  当条件不满足时，线程往往解开相应的互斥锁并阻塞线程然后等待条件发生变化。<br>  一旦其他的某个线程改变了条件变量，他讲通知相应的条件变量唤醒一个或多个正被此条件变量阻塞的线程。</p><p>  总的来说，<b>互斥锁是线程间互斥的机制，条件变量则是同步的机制</b></p><ol start="4"><li>自旋锁<br>  如果进线程无法取得锁，进线程不会立即放弃CPU时间片，而是一直循环尝试获取锁，直到获取位置。</li></ol><p>  如果别的线程长时间占有锁，那么自旋锁就是在浪费CPU做无用功，但是自旋锁一般应用于加锁时间很短的场景，这个时候效率比较高</p><hr><h2 id="24-1、哪几种线程锁"><a href="#24-1、哪几种线程锁" class="headerlink" title="24-1、哪几种线程锁"></a>24-1、哪几种线程锁</h2><ol><li>互斥锁（mutex）<br>  互斥锁属于 sleep-waiting 类型的锁，<br>  例如在一个双核的机器上有两个线程A和B，他们分别运行在 core 0 和 core 1 上。<br>  假设线程 A 想要通过pthread_mutex_lock操作去得到一个临界区的锁，而此时这个锁正在被线程 B 所持有</li></ol><p>  那么线程 A 就会被阻塞，此时会通过上下文切换将线程 A 置于等待队列中，此时 core 0 就可以运行其他的任务（如线程C）</p><ol start="2"><li><p>条件变量（cond）</p></li><li><p>自旋锁（spin）</p></li></ol><ul><li><p>自旋锁属于busy-waiting类型的锁，如果线程A是使用pthread_spin_lock操作去请求锁，如果自旋锁已经被线程B持有，<br>那么线程A就会一直在core 0上进行忙等并不停进行锁请求，检查该自旋锁是否已经被B释放，直到得到这个锁为止。</p><p>因为自旋锁不会引起调用者睡眠，所以自旋锁的效率远高于互斥锁。【不会引发上下文切换】</p></li><li><p>虽然效率比互斥锁高，但也有不足之处</p><ul><li><p>自旋锁一直占用CPU，在未获得锁的情况下，一直进行自旋，所以占用着CPU<br>如果不能在很短的时间内获得锁，无疑会使CPU效率降低。</p></li><li><p>在用自旋锁时有可能造成死锁，当递归调用时可能造成死锁。</p></li></ul></li><li><p>自旋锁只有在内核可抢占式或 SMP（对称多处理） 的情况下才真正需要<br>在单CPU且不可抢占式的内核下，自旋锁的操作为空操作。<br>自旋锁适用于锁使用者保持锁时间比较短的情况下。</p></li></ul><hr><h2 id="25、逻辑地址-VS-物理地址"><a href="#25、逻辑地址-VS-物理地址" class="headerlink" title="25、逻辑地址 VS 物理地址"></a>25、逻辑地址 VS 物理地址</h2><p>编译时只需确定变量x存放的相对地址是100（也就是说对于进程在内存中的起始地址而言的地址）<br>CPU想要找到x在内存中的实际存放位置，只需要用进程的起始地址 + 100即可。</p><h2 id="相对地址又称逻辑地址，绝对地址又称物理地址。"><a href="#相对地址又称逻辑地址，绝对地址又称物理地址。" class="headerlink" title="相对地址又称逻辑地址，绝对地址又称物理地址。"></a>相对地址又称逻辑地址，绝对地址又称物理地址。</h2><h2 id="26、怎么回收线程？有哪几种方法？"><a href="#26、怎么回收线程？有哪几种方法？" class="headerlink" title="26、怎么回收线程？有哪几种方法？"></a>26、怎么回收线程？有哪几种方法？</h2><ul><li><p>等待线程结束：int pthread_join(pthread_t tid, void** retval);<br>主线程调用，等待子线程退出并回收其资源，类似于进程中wait&#x2F;waitpid回收僵尸进程，调用pthread_join的线程会被阻塞</p><ul><li><p>tid：创建线程时通过指针得到的tid值</p></li><li><p>retval：指向返回值的指针</p></li></ul></li><li><p>结束线程：pthread_exit(void* retval);<br>子线程执行，用来结束当前线程并通过retval传递返回值，该返回值可以通过pthread_join获得。</p><ul><li>retval：同上</li></ul></li><li><p>分离线程：int pthread_detach(pthread_t tid);<br>主线程、子线程均可调用。<br>主线程中pthread_detach(tid)<br>子线程中pthread_detach(pthread_self())</p><p>调用后和主线程分离，子线程结束时自己立即回收资源。</p><ul><li>tid：同上。</li></ul></li></ul><hr><h2 id="27、内存的覆盖是什么？有什么特点？"><a href="#27、内存的覆盖是什么？有什么特点？" class="headerlink" title="27、内存的覆盖是什么？有什么特点？"></a>27、内存的覆盖是什么？有什么特点？</h2><p>由于程序运行时并非任何时候都要访问程序及数据的各个部分（尤其是大程序）<br>因此可以把用户空间分成一个固定区和若干个覆盖区。</p><p>将经常活跃的部分放在固定区，其余部分按照调用关系分段，首先将那些即将要访问的段放入覆盖区，其他段放在外存中<br>在需要调用前，系统将其调入覆盖区，替换覆盖区中原有的段。</p><p>覆盖技术的特点：<br>  打破了必须将一个进程的全部信息装入内存后才能运行的限制，但当同时运行程序的代码量大于主存时仍不能运行<br>  再而，大家要注意到，内存中能够更新的地方只有覆盖区的段，不在覆盖区的段会常驻内存。</p><blockquote><p>覆盖：<br>  针对一个程序而言，内存放不下完整的一个程序，则需要覆盖，将磁盘的覆盖区换入内存中</p></blockquote><hr><h2 id="28、内存交换是什么？有什么特点？"><a href="#28、内存交换是什么？有什么特点？" class="headerlink" title="28、内存交换是什么？有什么特点？"></a>28、内存交换是什么？有什么特点？</h2><p><b>交换（对换）技术的设计思想：</b><br>  内存空间紧张时，系统将内存中某些进程暂时换出外存，把内存中某些已具备运行条件的进程还如内存（进程在内存和磁盘间动态调度）</p><p>换入：<br>  把准备好竞争CPU运行的程序从辅存移到内存。</p><p>换出：<br>  把处于等待状态（或CPU调度原则下被剥夺运行权力）的程序从内存移到辅存，把内存空间腾出来。</p><blockquote><p>内存交换：<br>  多用于多道程序设计环境下</p></blockquote><hr><h2 id="29、什么时候会进行内存交换？"><a href="#29、什么时候会进行内存交换？" class="headerlink" title="29、什么时候会进行内存交换？"></a>29、什么时候会进行内存交换？</h2><p>内存交换通常在许多进程运行且内存吃紧时进行，而系统负荷降低就暂停。</p><p>例如：<br>  在发现许多进程运行时经常发生缺页，就说明内存紧张，此时可以换出一些进程；<br>  如果缺页率明显下降，就可以暂停换出。</p><hr><h2 id="30、终端退出，终端运行的进程会怎样？"><a href="#30、终端退出，终端运行的进程会怎样？" class="headerlink" title="30、终端退出，终端运行的进程会怎样？"></a>30、终端退出，终端运行的进程会怎样？</h2><p>终端在退出时会发送 SIGHUP 给对应的bash进程，bash进程收到这个信号后首先将它发给session下面的进程，<br>如果程序没有对 SIGHUP 信号作特殊处理，那么进程就会随着终端关闭而退出</p><hr><h2 id="31、如何让进程后台运行"><a href="#31、如何让进程后台运行" class="headerlink" title="31、如何让进程后台运行"></a>31、如何让进程后台运行</h2><ol><li><p>命令后面加上&amp;即可，实际上，这样是将命令放入到一个作业队列中了</p></li><li><p>ctrl + z 挂起进程，使用jobs查看序号，在使用 bg % 序号后台运行进程</p></li><li><p>nohup + &amp;，将标准输出和标准错误缺省会被重定向到 nohup.out 文件中，忽略所有挂断（SIGHUP）信号</p></li><li><p>运行指令前面 + setsid，使其父进程变成 init 进程，不受 HUP 信号影响</p></li><li><p>将 命令+&amp; 放在()括号中，也可以使进程不受HUP信号的影响</p></li></ol><hr><h2 id="32、什么是快表，知道多少关于快表的知识？"><a href="#32、什么是快表，知道多少关于快表的知识？" class="headerlink" title="32、什么是快表，知道多少关于快表的知识？"></a>32、什么是快表，知道多少关于快表的知识？</h2><p>快表，又称联想寄存器（TLB），是一种访问速度比内存快很多的高速缓冲存储器<br>用来存放当前访问的若干页表项，以加速地址变换的过程。与此对应，内存中的页表常称为慢表。</p><img src="/2022/02/28/OperatingSystem/TLB.png" class=""><hr><h2 id="33、地址变换中，有快表和没快表有什么区别？"><a href="#33、地址变换中，有快表和没快表有什么区别？" class="headerlink" title="33、地址变换中，有快表和没快表有什么区别？"></a>33、地址变换中，有快表和没快表有什么区别？</h2><p>||地址变换过程|访问一个逻辑地址的访存次数|<br>|基本地址变换机构|1、算页号、页内偏移量；2、检查页号合法性；3、查页表，找到页面存放的内存块号；4、根据内存块号和页内偏移得到物理地址；5、访问目标内存单元|两次访存|</p><h2 id="具有快表的地址变换机构-1、算页号、页内偏移量；2、检查页号合法性；3、查快表，若命中，即可知道页面存放的内存块号，可直接进行5、若未命中则进行4；4、查页表，找到页面存放的内存块号，并且将页表项复制到快表中；5、根据内存块号和页内偏移量得到物理地址；6、访问目标内存单元-快表命中则需要一次访存；快表未命中则需要两次访存"><a href="#具有快表的地址变换机构-1、算页号、页内偏移量；2、检查页号合法性；3、查快表，若命中，即可知道页面存放的内存块号，可直接进行5、若未命中则进行4；4、查页表，找到页面存放的内存块号，并且将页表项复制到快表中；5、根据内存块号和页内偏移量得到物理地址；6、访问目标内存单元-快表命中则需要一次访存；快表未命中则需要两次访存" class="headerlink" title="|具有快表的地址变换机构|1、算页号、页内偏移量；2、检查页号合法性；3、查快表，若命中，即可知道页面存放的内存块号，可直接进行5、若未命中则进行4；4、查页表，找到页面存放的内存块号，并且将页表项复制到快表中；5、根据内存块号和页内偏移量得到物理地址；6、访问目标内存单元|快表命中则需要一次访存；快表未命中则需要两次访存|"></a>|具有快表的地址变换机构|1、算页号、页内偏移量；2、检查页号合法性；3、查快表，若命中，即可知道页面存放的内存块号，可直接进行5、若未命中则进行4；4、查页表，找到页面存放的内存块号，并且将页表项复制到快表中；5、根据内存块号和页内偏移量得到物理地址；6、访问目标内存单元|快表命中则需要一次访存；快表未命中则需要两次访存|</h2><h2 id="34、在执行malloc申请内存的时候，操作系统是怎么做的？"><a href="#34、在执行malloc申请内存的时候，操作系统是怎么做的？" class="headerlink" title="34、在执行malloc申请内存的时候，操作系统是怎么做的？"></a>34、在执行malloc申请内存的时候，操作系统是怎么做的？</h2><p>从操作系统层面上看，malloc是通过两个系统调用来实现的：brk和mmap</p><ul><li><p>brk：将进程数据段(.data)的最高地址指针向高处移动，这一步可以扩大进程在运行时的堆大小</p></li><li><p>mmap：在进程的虚拟地址空间中寻找一块空闲的虚拟内存，这一步可以获得一块可以操作的堆内存。</p></li></ul><p>通常，分配的内存小于128k时，使用brk调用来获得虚拟内存；大于128k时就使用mmap来获得虚拟内存。</p><p>进程先通过这两个系统调用获取或者扩大进程的虚拟内存，获得相应的虚拟地址<br>在访问这些虚拟地址的时候，通过缺页中断，让内核分配相应的物理内存，这样内存分配才算完成。</p><hr><h2 id="35、守护进程、僵尸进程和孤儿进程"><a href="#35、守护进程、僵尸进程和孤儿进程" class="headerlink" title="35、守护进程、僵尸进程和孤儿进程"></a>35、守护进程、僵尸进程和孤儿进程</h2><ul><li><p>守护进程<br>指在后台运行的，没有控制终端与之相连的进程。它独立与控制终端，周期性地执行某种任务。<br>Linux的大多数服务器就是用守护进程的方式实现的，如web服务器进程http等。</p><p>创建守护进程要点：</p><ol><li><p>让程序在后台执行，方法是调用fork()产生一个子进程，然后使父进程退出。</p></li><li><p>调用setsid() 创建一个新对话器。控制中断、登录会话和进程组通常是从父进程继承下来的<br>守护进程要摆脱他们，不受他们的影响，方法是调用setsid()使进程成为一个会话组长。<br>setsid() 调用成功后，进程成为新的会话组长和进程组长，并与原来的登录会话、进程组和控制终端脱离。</p></li><li><p>禁止进程重新打开控制终端。经过以上步骤，进程已经成为一个无终端的会话组长，但是它可以重新申请打开一个终端。<br>为了避免这种情况发生，可以通过使进程不再是会话组长来实现。<br>再一次通过fork()创建新的子进程，使调用fork的进程退出。</p></li><li><p>关闭不再需要的文件描述符。子进程从父进程继承打开的文件描述符。<br>如不关闭，则会浪费系统资源，造成进程所在的文件系统无法卸下以及引起无法预料的错误<br>首先获得最高文件描述符值，然后用一个循环程序，关闭0到最高文件描述符值的所有文件描述符</p></li><li><p>将当前目录更改为根目录。</p></li><li><p>子进程从父进程继承的文件创建屏蔽字可能会拒绝某些许可权。为了防止这一点，使用unmask(0)将屏蔽字清零。</p></li><li><p>处理 SIGCHLD 信号。对于服务器进程，在请求到来时往往生成子进程处理请求。<br>如果子进程等待父进程捕获状态，则子进程将成为僵尸进程(zombie)，从而占用系统资源。<br>如果父进程等待子进程结束，将增加父进程的负担，影响服务器进程的并发性能。<br>在Linux下可以简单地将 SIGCHLD 信号的操作设为 SIG_IGN。这样子进程结束时不会产生僵尸进程。</p></li></ol></li><li><p>孤儿进程<br>如果父进程先退出，子进程还没退出，那么子进程的父进程将变为init进程。<br>（注意：任何一个进程都必须有父进程）</p><p>一个父进程退出，而它的一个或多个子进程还在运行，那么那些子进程将成为孤儿进程。<br>孤儿进程将被init进程（进程号为1）收养，并由init进程对它们完成状态收集工作。</p></li><li><p>僵尸进程<br>如果子进程先退出，父进程还没退出，那么子进程必须等到父进程捕获到了子进程的退出状态才真正结束，否则此时子进程就变成了僵尸进程。</p><p>设置<b>僵尸进程</b>的目的是维护子进程的信息，以便父进程在以后某个时候获取。<br>这些信息至少包括进程ID，进程的终止状态，以及该进程使用的CPU时间</p><p>所以当终止子进程的父进程调用wait或waitpid时就可以得到这些信息。</p><p>如果一个进程终止，而该进程有子进程处于僵尸状态，那么它的所有僵尸子进程的父进程ID将被重置为1（init进程）<br>继承这些子进程的init进程将清理他们（也就是说init进程将wait它们，从而去除他们的僵尸状态）</p></li></ul><hr><h2 id="36、如何避免僵尸进程？"><a href="#36、如何避免僵尸进程？" class="headerlink" title="36、如何避免僵尸进程？"></a>36、如何避免僵尸进程？</h2><ul><li><p>通过signal(SIGCHLD, SIG_IGN)通知内核对子进程的结束不关心，由内核收回。<br>如果不想让父进程挂起，可以在父进程中加入一条语句:signal(SIGCHLD, SIG_IGN);<br>表示父进程忽略SIGCHLD信号，该信号是子进程退出的时候向父进程发送的。</p></li><li><p>父进程调用wait&#x2F;waitpid等函数等待子进程结束，如果尚无子进程退出，wait会导致父进程阻塞，waitpid可以通过传递WNOHANG使父进程不阻塞立即返回。</p></li><li><p>如果父进程很慢可以使用signal注册信号处理函数，在信号处理函数调用wait&#x2F;waitpid等待子进程退出。</p></li><li><p>通过两次调用fork。父进程首先调用fork创建一个子进程然后waitpid等待子进程退出，子进程再fork一个孙进程后退出。<br>这样子进程退出后会被父进程等待回收，然而对于孙子进程，其父进程已经退出，使得孙进程变成一个孤儿进程。<br>孤儿进程由init进程接管，孙进程结束后，init会等待回收。</p></li></ul><p>第一种方法忽略SIGCHLD信号，这常用于并发服务器的性能的一个技巧。<br>因为并发服务器通常fork许多子进程，子进程结束之后需要服务器进程去wait清理资源。</p><h2 id="如果将此信号的处理方式设为忽略，可以让内核把僵尸子进程转交给init进程去处理，省去了大量僵尸进程占用系统资源。"><a href="#如果将此信号的处理方式设为忽略，可以让内核把僵尸子进程转交给init进程去处理，省去了大量僵尸进程占用系统资源。" class="headerlink" title="如果将此信号的处理方式设为忽略，可以让内核把僵尸子进程转交给init进程去处理，省去了大量僵尸进程占用系统资源。"></a>如果将此信号的处理方式设为忽略，可以让内核把僵尸子进程转交给init进程去处理，省去了大量僵尸进程占用系统资源。</h2><h2 id="37、局部性原理？主要有哪两大局部性原理？是什么？"><a href="#37、局部性原理？主要有哪两大局部性原理？是什么？" class="headerlink" title="37、局部性原理？主要有哪两大局部性原理？是什么？"></a>37、局部性原理？主要有哪两大局部性原理？是什么？</h2><p>主要分为<b>时间局部性</b>和<b>空间局部性</b></p><ul><li><p>时间局部性：<br>如果执行了程序中的某条指令，那么不久后这条指令很有可能再次执行；<br>如果某个数据被访问过，不久之后该数据很有可能再次被访问。（因为程序中存在大量循环）</p></li><li><p>空间局部性：<br>一旦程序访问了某个内存单元，在不就之后，其附近的存储单元也很有可能被访问<br>（因为很多数据在内存中都是连续存放的，并且程序的指令也是顺序地在内存中存放的）</p></li></ul><img src="/2022/02/28/OperatingSystem/Local.png" class=""><hr><h2 id="38、父进程、子进程、进程组、作业和会话"><a href="#38、父进程、子进程、进程组、作业和会话" class="headerlink" title="38、父进程、子进程、进程组、作业和会话"></a>38、父进程、子进程、进程组、作业和会话</h2><ul><li><p>父进程<br>已创建一个或者多个子进程的进程</p></li><li><p>子进程<br>由fork创建的新进程被称为子进程（child process）<br>该函数被调用一次，但返回两次。两次返回的区别是，子进程的返回值是0，而父进程的返回值则是新进程（子进程）的进程id。</p><p>将子进程id返回给父进程的理由是：<br>  因为一个进程的子进程可以多于一个，没有一个函数使一个进程可以获得其所有子进程的进程id。</p><p>对于子进程来说：<br>  之所以fork返回0给它，是因为它随时可以调用getpid()来获取自己的pid;<br>  也可以调用getppid()来获取其父进程的id。<br>  (进程id 0 总是由交换进程使用，所以一个子进程的进程id不可能为0)</p><p>fork之后，操作系统会复制一个与父进程完全相同的子进程，虽说是父子关系，但是在OS看来，他们更像是兄弟关系。<br>这2个进程共享代码空间，但是数据空间是相互独立的，子进程数据空间中的内容是父进程的完整拷贝，指令指针也完全相同，<br>子进程拥有父进程当前运行到的位置（两个进程的程序计数器PC值相同，也就是说，子进程是从fork返回处开始执行的）</p><p>但有一点不同，如果fork成功，子进程中fork的返回值是0，父进程中fork返回值是子进程的进程号，如果fork不成功，父进程会返回错误。</p><p>子进程从父进程继承的有：</p><ol><li><p>进程的资格（真实(real)&#x2F;有效(effective)&#x2F;已保存(saved)&#x2F;用户号(UIDs)&#x2F;组号(GIDs))</p></li><li><p>环境(environment)</p></li><li><p>堆栈</p></li><li><p>内存</p></li><li><p>进程组号</p></li></ol><p>独有：</p><ol><li><p>进程号</p></li><li><p>不同的父进程号（即：子进程的父进程号与父进程的父进程号不同，父进程号可以由getppid函数获得）</p></li><li><p>资源使用(resource utilizations)设定为0</p></li></ol></li><li><p>进程组<br>进程组就是多个进程的集合，其中肯定有一个组长，其进程PID等于进程组的PGID。<br>只要在某个进程组中一个进程存在，该进程组就存在，这与其组长进程是否终止无关。</p></li><li><p>作业<br>shell分前后台来控制的不是进程而是作业(job) 或者 进程组(Process Group)</p><p>一个前台作业可以由多个进程组成，一个后台作业也可以由多个进程组成。<br>shell可以运行一个前台作业和任意多个后台作业，这称为作业控制。</p><p><b>为什么只能运行一个前台作业？</b><br>  答：当我们在前台新起了一个作业，shell就被提到了后台，因此shell就没有办法再继续接受我们的指令并且解析运行了。<br>  但是如果前台进程退出了，shell就会有被提到前台来，就可以继续接受我们的命令并且解析运行。<br>  作业和进程组的区别：<br>如果作业中的某个进程有创建了子进程，则该子进程是不属于该作业的。<br><br>一旦作业运行结束，shell就把自己提到前台（子进程还在，但是子进程不属于作业）<br>如果原来的前台进程还存在（这个子进程还没有终止），他将自动变为后台进程组。</p></li><li><p>会话<br>会话（Session）是一个或多个进程组的集合。<br>一个会话可以有一个控制终端，在xshell或者WinSCP中打开一个窗口就是新建一个会话。</p></li></ul><hr><h2 id="39-进程终止的集中方式"><a href="#39-进程终止的集中方式" class="headerlink" title="39.进程终止的集中方式"></a>39.进程终止的集中方式</h2><ol><li><p>main函数的自然返回， <code>return</code></p></li><li><p>调用<code>exit()</code>函数， 属于c的函数库</p></li><li><p>调用<code>_exit()</code>函数，属于系统调用</p></li><li><p>调用<code>abort()</code>函数，程序异常终止，同时发送SIGABRT信号给调用进程。</p></li><li><p>接收能导致进程终止的信号：<code>ctrl + C(^C)</code>、<code>SIGINT(SIGINT中断进程)</code></p></li></ol><img src="/2022/02/28/OperatingSystem/exitAND_exit.png" class=""><hr><h2 id="40、Linux中异常和中断的区别"><a href="#40、Linux中异常和中断的区别" class="headerlink" title="40、Linux中异常和中断的区别"></a>40、Linux中异常和中断的区别</h2><ul><li><p>中断（外中断）<br>大家都知道，当我们在敲击键盘的同时就会产生中断，当硬盘读写完数据之后也会产生中断。</p><p>所以，我们需要知道：中断是由硬件设备产生的，而他们从物理上说就是电信号，之后，他们通过中断控制器发送给CPU<br>接着CPU判断收到的中断来自于哪个硬件设备（这定义在内核中），最后，由CPU发送给内核，有内核处理中断。</p><p>中断处理流程：</p><img src="/2022/02/28/OperatingSystem/Interrupt.png" class=""></li><li><p>异常（内中断）<br>我们在学习《计算机组成原理》时会知道两个概念，CPU处理程序时一旦程序不在内存中，会产生缺页异常；<br>当运行除法程序时，当除数为0时，又会产生除0异常。<br>所以，需要记住的是：<b>异常是由CPU产生的，同时它会发送给内核，要求内核处理这些异常</b></p><p>下面这张图显示了异常处理的流程：</p><img src="/2022/02/28/OperatingSystem/exception.png" class=""></li><li><p>相同点：</p><ul><li><p>最后都是由 CPU 发送给内核，由内核去处理</p></li><li><p>处理程序的流程设计上是相似的</p></li></ul></li><li><p>不同点：</p><ul><li><p>产生源不相同，异常是由CPU产生的，而中断是由硬件设备产生的。</p></li><li><p>内核需要根据是异常还是中断，调用不同的处理程序。</p></li><li><p>中断不是时钟同步的，这意味着中断可能随时到来；<br>异常由于是CPU产生的，所以他是时钟同步的</p></li><li><p>当处理中断时，处于中断上下文中；<br>当处理异常时，处于进程上下文中</p></li></ul></li></ul><hr><h2 id="41、Windows-和-Linux-环境下内存分布情况"><a href="#41、Windows-和-Linux-环境下内存分布情况" class="headerlink" title="41、Windows 和 Linux 环境下内存分布情况"></a>41、Windows 和 Linux 环境下内存分布情况</h2><img src="/2022/02/28/OperatingSystem/WLMemory.png" class=""><p>通过这张图可以看到，用户空间内存，从<b>低到高</b>分别是7中不同的内存段</p><ul><li><p>程序文件段：包括二进制可执行代码；</p></li><li><p>已初始化数据段：包括静态常量；</p></li><li><p>未初始化数据段：包括未初始化的静态变量；</p></li><li><p>堆段：包括动态分配的内存，从低地址开始向上增长；</p></li><li><p>文件映射段：包括动态库、共享内存等，从低地址开始向上增长（跟硬件和内核版本有关）</p></li><li><p>栈段：包括局部变量和函数调用的上下文等，栈的大小是固定的，一般是<code>8MB</code>。当然系统也提供了参数，供自定义大小；</p></li></ul><hr><h2 id="42、一个由C-x2F-C-编译的程序占用的内存分为哪几个部分？"><a href="#42、一个由C-x2F-C-编译的程序占用的内存分为哪几个部分？" class="headerlink" title="42、一个由C&#x2F;C++编译的程序占用的内存分为哪几个部分？"></a>42、一个由C&#x2F;C++编译的程序占用的内存分为哪几个部分？</h2><ol><li><p>栈区（stack）：地址向下增长，由编译器自动分配释放，存放函数的参数值，局部变量的值等。<br>其操作方式类似于数据结构中的队列，先进后出。</p></li><li><p>堆区（heap）：地址向上增长，一般有程序员分配释放，若程序员不释放，程序结束时可能由OS回收。<br>注意，它与数据结构中的堆是两回事，分配方式类似链表。</p></li><li><p>全局区（静态区）(static)：全局变量和静态变量的存储是放在一块的<br>初始化的全局变量和静态变量在一块区域，未初始化的全局变量和未初始化的静态变量在相邻的另一块区域<br>程序结束后有系统释放</p></li><li><p>文字常量区：常量字符串就是放在这里的，<br>程序结束后由系统释放</p></li><li><p>程序代码区（text）：存放函数体的二进制代码</p></li></ol><hr><h2 id="43、一般情况下在Linux-x2F-Windows平台下栈空间的大小"><a href="#43、一般情况下在Linux-x2F-Windows平台下栈空间的大小" class="headerlink" title="43、一般情况下在Linux&#x2F;Windows平台下栈空间的大小"></a>43、一般情况下在Linux&#x2F;Windows平台下栈空间的大小</h2><p>Linux环境下有操作系统决定，一般是8MB，8192KB，通过ulimit命令查看以及修改</p><p>Windows环境下由编译器决定，VC++6.0一般是1MB；</p><ul><li><p>Linux<br>Linux下非编译器决定栈大小，而是由操作系统环境决定，默认是8192KB（8M）；<br>在Windows平台下栈的大小是被记录在可执行文件中的（由编译器来设置）<br>即：Windows下可以由编译器决定栈大小，而在Linux下是由系统环境变量来控制栈的大小的。</p><p>在Linux下通过如下命令可查看和设置栈的大小：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$ </span><span class="language-bash"><span class="built_in">ulimit</span> -a <span class="comment"># 显示当前栈的大小（ulimit为系统命令，非编译器命令）</span></span></span><br><span class="line"><span class="meta">$ </span><span class="language-bash"><span class="built_in">ulimit</span> -s 32768 <span class="comment"># 设置当前栈的大小为32MB</span></span></span><br></pre></td></tr></table></figure></li><li><p>Windows<br>Windows下程序栈空间的大小，VC++6.0默认的栈空间是1MB</p><p>VC6.0中修改堆栈大小的方法：</p><ul><li><p>选择”Project -&gt; Setting”</p></li><li><p>选择”Link”</p></li><li><p>选择”Category”中的”Output”</p></li><li><p>在”Stack allocations”中的”Reserve:”中输入栈的大小</p></li></ul></li></ul><hr><h2 id="44、程序从堆中动态分配内存时，虚拟内存上怎么操作的"><a href="#44、程序从堆中动态分配内存时，虚拟内存上怎么操作的" class="headerlink" title="44、程序从堆中动态分配内存时，虚拟内存上怎么操作的"></a>44、程序从堆中动态分配内存时，虚拟内存上怎么操作的</h2><p>页表：是一个存放在物理内存中的数据结构，它记录了虚拟页和物理页的映射关系</p><p>在进行动态内存分配时，例如malloc()函数或者其他高级语言中的new关键字，操作系统会在硬盘中创建或申请一段虚拟内存空间。<br>并更新到页表（分配一个页表条目（PTE），使该PTE指向硬盘上这个新创建的虚拟页），通过PTE建立虚拟页和物理页的映射关系。</p><hr><h2 id="45、几种常见的磁盘调度算法"><a href="#45、几种常见的磁盘调度算法" class="headerlink" title="45、几种常见的磁盘调度算法"></a>45、几种常见的磁盘调度算法</h2><p>读写一个磁盘块的时间的影响因素有：</p><ul><li>旋转时间（主轴旋转盘面，使得磁头移动到适当的扇区上）</li><li>寻道时间（制动手臂移动，使得磁头移动到适当的磁道上）</li><li>实际的数据传输时间</li></ul><p>其中，寻道时间最长（物理层面），因此，磁盘调度的主要目标是使磁盘的平均寻道时间最短。</p><ol><li>先来先服务（FCFS）<br>  按照磁盘请求的顺序进行调度</li></ol><p>  优点：<br>    公平和简单<br>  缺点：<br>    未对寻道做任何优化，使平均寻道时间可能较长</p><ol start="2"><li>最短寻道时间优先（SSTF）<br>  优先调度与当前磁头所在磁道距离最近的磁道</li></ol><p>  虽然平均寻道时间比较低，但是不够公平。<br>  如果新到达的磁道请求总是比一个在等待的磁道请求近，那么在等待的磁道请求会一直等待下去，也就是出现饥饿现象。</p><p>  具体来说：两端的磁道请求更容易出现饥饿现象。<br>  <img src="/2022/02/28/OperatingSystem/ShortPath.png" class=""></p><ol start="3"><li><p>电梯扫描算法<br>电梯总是保持一个方向运行，直到该方向没有请求为止，然后改变运行方向。</p><p>电梯算法（扫描算法）和电梯的运行过程类似，总是按照一个方向来进行磁盘调度，直到该方向上没有未完成的磁盘请求，然后改变方向。</p><p>因为考虑了移动方向，因此所有的磁盘请求都会被满足，解决了SSTF的饥饿问题</p><img src="/2022/02/28/OperatingSystem/Scan.png" class=""></li></ol><hr><h2 id="46、交换空间和虚拟内存的关系"><a href="#46、交换空间和虚拟内存的关系" class="headerlink" title="46、交换空间和虚拟内存的关系"></a>46、交换空间和虚拟内存的关系</h2><ul><li><p>交换空间<br>Linux中的交换空间（Swap space）在<b>物理内存（RAM）</b>被充满时使用。<br>如果系统需要更多的内存资源，而物理内存已经充满，内存中不活跃的页就会被移到交换空间去。</p><p>虽然交换空间可以为带有少量内存的机器提供帮助，但是这种方法不应该被当做是内存的取代。</p><p>交换空间位于硬盘驱动器上，它比进入物理内存要慢。<br>交换空间可以是一个专用的交换分区（推荐的方法），交换文件，或两者的组合。</p><p>交换空间的总大小应该相当于计算机内存的2倍和32MB两个值较大的一个，但是不能超过2048MB（2GB）</p></li><li><p>虚拟内存<br>虚拟内存是文件数据交叉链接的活动文件。<br>是Windows目录下的一个”WIN 386.SWP” 文件，这个文件会不断地扩大和自动缩小。</p><p>就速度方面而言，CPU的L1和L2缓存最快，内存次之，硬盘再次。</p><p>但是<b>虚拟内存使用的是硬盘的空间</b>，为什么我们要使用速度最慢的硬盘来做虚拟内存？<br>因为电脑中所有运行的程序都需要经过内存来执行，如果执行的程序很大或很多，就会导致我们只有少量内存消耗殆尽。</p><p>而硬盘空间动辄很多GB，为了解决这个问题，Windows中运用了虚拟内存技术，即拿出一部分硬盘空间来充当内存使用。</p></li></ul><hr><h2 id="47、抖动（颠簸）是什么？"><a href="#47、抖动（颠簸）是什么？" class="headerlink" title="47、抖动（颠簸）是什么？"></a>47、抖动（颠簸）是什么？</h2><p>刚刚换出的页面马上又要换入内存，刚刚换入的页面马上又要换出外存。</p><p>这种频繁的页面调度行为称为抖动，或称颠簸。<br>产生抖动的主要原因是进程频繁访问的页面数目高于可用的物理块数（分配给进程的物理块数不够）</p><p>为进程分配的物理块太少，会使进程发生抖动现象。<br>为进程分配的物理块太多，又会降低系统整体的并发度，从而降低了某些资源的利用率。</p><h2 id="为了研究应该为每个进程分配多少个物理块，Denning提出了进程工作集的概念"><a href="#为了研究应该为每个进程分配多少个物理块，Denning提出了进程工作集的概念" class="headerlink" title="为了研究应该为每个进程分配多少个物理块，Denning提出了进程工作集的概念"></a>为了研究应该为每个进程分配多少个物理块，Denning提出了<code>进程工作集</code>的概念</h2><h2 id="48、从堆和栈上建立对象哪个快？（考察堆和栈的分配效率比较）"><a href="#48、从堆和栈上建立对象哪个快？（考察堆和栈的分配效率比较）" class="headerlink" title="48、从堆和栈上建立对象哪个快？（考察堆和栈的分配效率比较）"></a>48、从堆和栈上建立对象哪个快？（考察堆和栈的分配效率比较）</h2><p>从两方面来考虑：</p><ul><li><p>分配和释放：<br>堆在分配和释放时都要调用函数（malloc, free），比如分配时会到堆空间中去寻找足够大小的空间（因为多次分配释放后会造成内存碎片）</p><p>这些都会花费一定的时间，具体可以看malloc和free的源代码，函数做了很多额外的工作。</p><p>然而，栈不需要这些操作</p></li><li><p>访问时间：<br>访问堆的一个具体单元，需要两次访问内存，第一次取得指针，第二次才是真正的数据；<br>访问栈的一个具体单元，只需要一次访存，因为栈顶已知，偏移量已知，直接可以算出来。</p><p>另外，堆的内容被操作系统交换到外存的概率比栈大，栈一般是不会被交换出去的。</p></li></ul><hr><h2 id="49、常见的内存分配方式有哪些？"><a href="#49、常见的内存分配方式有哪些？" class="headerlink" title="49、常见的内存分配方式有哪些？"></a>49、常见的内存分配方式有哪些？</h2><p>内存分配方式：</p><ol><li><p>从静态存储区域分配：内存在程序编译的时候就已经分配好，这块内存在程序的整个运行期间都存在，例如全局变量，static变量。</p></li><li><p>在栈上分配：在执行函数时，函数内局部变量的存储单元都可以在栈上创建，函数执行结束时这些存储单元自动被释放。<br>栈内存分配运算内置于处理器的指令集中，效率很高，但是分配的内存容量有限。</p></li><li><p>在堆上分配：也称动态内存分配。程序在运行的时候用malloc或new申请任意多少的内存，程序员自己负责何时使用free或delete释放内存。<br>动态内存的生存期由程序员决定，使用非常灵活，但问题最多。</p></li></ol><hr><h2 id="50、常见内存分配内存错误"><a href="#50、常见内存分配内存错误" class="headerlink" title="50、常见内存分配内存错误"></a>50、常见内存分配内存错误</h2><ol><li><p>内存分配未成功，却使用了它</p><p>编程新手常犯的错误，因为他们没有意识到内存分配会不成功。<br>常用解决办法：在使用内存之前检查指针是否为NULL，如果指针p是函数的参数，那么在函数的入口处用assert(p!&#x3D;NULL)进行检查</p><p>如果是用malloc或new来申请内存，应该用if(p &#x3D;&#x3D; NULL) 或 if(p !&#x3D; NULL) 进行防错处理</p></li><li><p>内存分配虽然成功，但是尚未初始化就引用它<br>犯这种错误主要有两个起因：</p><ol><li>是没有初始化的观念；</li><li>是误以为内存的缺省初值全为0，导致引用初值错误（例如数组）</li></ol><p>内存的缺省初值究竟是什么并没有统一的标准，尽管有些时候为零值，宁可信其无不可信其有。<br>所以无论用和种方式创建数组，都别忘记赋初值，即使是赋零值也不可省略，不要嫌麻烦。</p></li><li><p>内存分配成功并且已经初始化，但操作越过了内存的边界<br>例如在使用数组时经常发生下标“多1”或“少1”的情况。<br>特别是在for循环语句中，循环次数很容易搞错，导致数组操作越界。</p></li><li><p>忘记释放内存，造成内存泄漏<br>含有这种错误的函数每被调用一次就丢失一块内存。<br>刚开始时系统的内存充足，看不到有错误。</p><p>终有一次程序突然挂掉，系统出现提示：内存耗尽。</p><p>动态内存的申请和释放必须配对，程序中malloc和free的使用次数一定要相同，否则肯定有错误（new和delete同理）</p></li><li><p>释放了内存却继续使用，常见一下三种情况</p><ul><li><p>程序中的对象调用关系过于复杂，是在难以搞清楚某个对象究竟是否已经释放了内存<br>此时应该重新设计数据结构，从根本上解决对象管理的混乱局面。</p></li><li><p>函数的return语句写错了，注意不要返回指向“栈内存”的“指针”或“引用”<br>因为该内存在函数体结束时被自动销毁</p></li><li><p>使用free或delete释放了内存后，没有将指针设置为NULL，导致产生“野指针”。</p></li></ul></li></ol><hr><h2 id="51、内存交换中，被换出的进程保存在哪里？"><a href="#51、内存交换中，被换出的进程保存在哪里？" class="headerlink" title="51、内存交换中，被换出的进程保存在哪里？"></a>51、内存交换中，被换出的进程保存在哪里？</h2><p>保存在磁盘中，也就是外存中。<br>具有对换功能的操作系统中，通常把磁盘空间分为文件去和对换区两部分。</p><p>文件区主要用于存放文件，主要追求存储空间的利用率，因此对文件区空间的管理采用离散分配方式；<br>对换区空间只占磁盘空间的小部分，被换出的进程数据就存放在对换区。</p><p>由于对换的速度直接影响到系统的整体速度，因此对换区空间的管理主要追求换入换出速度。<br>因此通常对换区采用连续分配方式（学过文件管理章节可理解）</p><h2 id="总之，对换区的I-x2F-O速度比文件区更快。"><a href="#总之，对换区的I-x2F-O速度比文件区更快。" class="headerlink" title="总之，对换区的I&#x2F;O速度比文件区更快。"></a>总之，对换区的I&#x2F;O速度比文件区更快。</h2><h2 id="52、在发生内存交换时，有些进程是被优先考虑的？"><a href="#52、在发生内存交换时，有些进程是被优先考虑的？" class="headerlink" title="52、在发生内存交换时，有些进程是被优先考虑的？"></a>52、在发生内存交换时，有些进程是被优先考虑的？</h2><ol><li><p>可优先换出阻塞进程；</p></li><li><p>可换出优先级低进程</p></li><li><p>为了防止优先级低的进程在被调入内存后很快又被换出，有的系统还会考虑进程在内存的驻留时间（PCB常驻内存，不会被换出外存）</p></li></ol><hr><h2 id="53、ASCII、Unicode和UTF-8编码的区别？"><a href="#53、ASCII、Unicode和UTF-8编码的区别？" class="headerlink" title="53、ASCII、Unicode和UTF-8编码的区别？"></a>53、ASCII、Unicode和UTF-8编码的区别？</h2><ul><li><p>ASCII<br>ASCII 只有 127 个字符，表示英文字母大小写、数字和一些符号<br>但由于其他语言用ASCII编码表示字节不够<br>例如：常用中文需要两个字节，且不能和ASCII冲突，中国定制了GB2312编码格式，相同的，其他国家的语言也有属于自己的编码格式。</p></li><li><p>Unicode<br>由于每个国家的语言都有属于自己的编码格式，在多语言编辑文本中会出现乱码，Unicode应运而生。<br>Unicode就是将这些语言统一到一套编码格式中，通常两个字节表示一个字符，ASCII是一个字节表示一个字符。</p><p>这样如果编译的文本是纯英文的，用Unicode编码比ASCII编码要多一倍的存储空间，在存储和传输上十分不划算。</p></li><li><p>UTF-8<br>为了解决上述问题，又出现了把Unicode编码转化为<b>“可变长编码”</b> UTF-8编码<br>UTF-8编码将Unicode字符按数字大小编码为1-6个字节，英文字母被编码成一个字节，常用汉字被编码为三个字节。</p><p>如果编译的文本是纯英文的，那么用UTF-8就会非常节省空间，并且ASCII码也是UTF-8的一部分。</p></li><li><p>三者之间的练习<br>搞清楚了 ASCII、Unicode和UTF-8的关系，我们就可以总结一下现在计算机系统通用的字符编码工作方式：</p><ol><li><p>在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或需要传输时，转换为UTF-8编码。<br>【Unicode编码不乱码，保存的东西多，存储时需要存储为多个国家共用的语言】</p></li><li><p>用记事本编辑的时候，从文件读取的UTF-8字符被转换成Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件。</p><img src="/2022/02/28/OperatingSystem/ToFile.png" class=""></li><li><p>浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器：</p><img src="/2022/02/28/OperatingSystem/ToBrowser.png" class=""></li></ol></li></ul><hr><h2 id="54、原子操作是如何实现的？"><a href="#54、原子操作是如何实现的？" class="headerlink" title="54、原子操作是如何实现的？"></a>54、原子操作是如何实现的？</h2><p><b>处理器使用基于对缓存加锁或总线加锁的方式来实现多处理器之间的原子操作</b></p><p>首先处理器会自动保证基本的内存操作的原子性。<br>处理器保证从系统内存中读取或写入一个字节是原子的，意思就是当一个处理器读取一个字节时，其他处理器不能访问该字节的内存地址。</p><p>Pentium 6和最新的处理器能自动保证单处理器对同一个缓存里进行16&#x2F;32&#x2F;64位的操作是原子的。<br>但是复杂的内存操作处理器是不能自动保证其原子性的，比如跨总线宽度、跨多个缓存行和跨页表访问。</p><p>但是，处理器提供总线锁定和缓存锁定两个机制来保证复杂内存操作的原子性。</p><ol><li>使用总线锁保证原子性：<br>  第一个机制是通过总线锁保证原子性。<br>  如果多个处理器同时对共享变量进行读改写操作（i++就是经典的读改写操作）<br>  那么共享变量就会被多个处理器同时进行操作，这样读改写操作就不是原子的，操作完之后共享变量的值会和期望的不一致。</li></ol><p>  举例：i &#x3D; 1，进行两次 i ++ 操作，我们期望的结果是3，但有可能是2<br>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CPU1 CPU2</span><br><span class="line">i=<span class="number">1</span>  i=<span class="number">1</span></span><br><span class="line">i+<span class="number">1</span>  i+<span class="number">1</span></span><br><span class="line">i=<span class="number">2</span>  i=<span class="number">2</span></span><br></pre></td></tr></table></figure><br>  原因可能是多个处理器同时从各自的缓存中读取变量i，分别进行+1操作，然后分别写入系统内存中。<br>  那么想要保证读改写共享变量的操作是原子的，就必须保证CPU1读改写共享变量的时候，CPU2不能操作缓存了该共享变量内存地址的缓存。</p><p>  处理器使用总线锁就是来解决这个问题的。<br>  <b>所谓总线锁就是使用处理器提供一个LOCK#信号，当一个处理器在总线上输出此信号时，其他处理器的请求将被阻塞住，则该处理器可以独占共享内存</b></p><ol start="2"><li>使用缓存锁保证原子性：<br>  第二个机制是使用缓存锁来保证原子性。<br>  在同一个时刻，我们只需保证对某个内存地址的操作是原子性即可，但<b>总线锁定把CPU和内存之间的通信锁住了</b></li></ol><p>  这使得锁定期间，其他处理器不能操作其他内存地址的数据，所以总线锁定的开销比较大<br>  目前处理器在某些场合下使用缓存锁定代替总线锁定来优化。</p><p>  频繁使用的内存会缓存在处理器的L1&#x2F;L2和L3高速缓存里；<br>  那么原子操作就可以直接在处理器内部缓存中进行，并不需要声明总线锁。</p><p>  在Pentium 6 和目前的处理器中可以使用“缓存锁定”的方式来实现复杂的原子性</p><p>  所谓“缓存锁定”是指内存区域如果被缓存在处理器的缓存行中，并且在Lock操作期间被锁定，那么当它执行锁操作回写到内存时，<br>  处理器不在总线上声明LOCK#信号，而是修改内部的内存地址，并允许他的缓存一致性机制来保证操作的原子性。</p><p>  因为<b>缓存一致性机制会阻止同时修改由两个以上处理器缓存的内存区域数据，当其他处理器回写已经被锁定的缓存行的数据时，会使缓存行无效，<br>  在上图所示例子中，当CPU1修改缓存行中的i时使用了缓存锁定，那么CPU2就不能同时使用缓存i的缓存行。</b></p><p>  但是有两种情况下处理器不会使用缓存锁定：<br>    1. 操作的数据不能被缓存在处理器内部，或操作的数据跨越多个缓存行（cache line）时，处理器会调用总线锁定。</p><pre><code>2. 有些处理器不支持缓存锁定，对于Intel 486 和 Pentium处理器，就算锁定的内存区域在处理器的缓存行中也会调用总线锁定。</code></pre><hr><h2 id="56、系统并发和并行？"><a href="#56、系统并发和并行？" class="headerlink" title="56、系统并发和并行？"></a>56、系统并发和并行？</h2><ul><li><p>并发<br>并发是指宏观上在一段时间内能同时运行多个程序，但是同一时刻只能运行一条指令</p><p>操作系统通过进入进程和线程，使程序能并发运行。</p></li><li><p>并行<br>同一时刻能运行多个指令</p><p>需要硬件支持：如多流水线、多核处理器或者分布式计算系统</p></li></ul><hr><h2 id="57、页面置换算法总结"><a href="#57、页面置换算法总结" class="headerlink" title="57、页面置换算法总结"></a>57、页面置换算法总结</h2><ol><li>最佳置换算法（OPT）<br>  最佳置换算法（OPT，Optimal）：<br> 每次选择淘汰的页面将是以后永不使用，或在最长时间内不再被访问的页面，这样可以保证最低的缺页率</li></ol>  <img src="/2022/02/28/OperatingSystem/Optimal.png" class=""><p>  最佳置换算法可以保证最低的缺页率，但实际上，只有在进程执行的过程中才能知道接下来会访问到哪个页面。<br>  操作系统无法提前预判页面访问序列；<br>  因此，<b>最佳置换算法是无法实现的</b></p><ol start="2"><li>先进先出置换算法（FIFO）<br>  先进先出置换算法（FIFO）：<br> 每次选择淘汰的页面是最早进入内存的页面。</li></ol><p>  实现方法：<br>    把调入内存的页面根据调入的先后顺序排成一个队列，需要换出页面时选择队头页面队列的最大长度取决于系统为进程分配了多少个内存块。</p>  <img src="/2022/02/28/OperatingSystem/FIFO_3.png" class="">  <img src="/2022/02/28/OperatingSystem/FIFO_4.png" class=""><p>  Belady异常：当为进程分配的物理块数增大的时候，缺页次数不减反增的异常现象。</p><p>  只有FIFO算法会产生Belady异常，而LRU和OPT算法永远不会出现Belady异常。<br>  另外FIFO算法虽然实现简单，但是该算法与进程实际运行时候的规律不适应，因此先进入的页面也有可能最经常被访问。<br>  因此，算法性能差。</p><p>  FIFO的性能较差，因为较早调入的页面往往是最经常被访问的页，这些页在FIFO算法下被反复调入和调出，并且有Belady异常现象。</p><p>  Belady异常现象：采用FIFO算法时，如果对一个进程未分配它所要求的全部页面，有时就会出现分配页面数增多但缺页率反而提高的异常现象。</p><ol start="3"><li>最近最久未使用置换算法（LRU）<br>  最近最久未使用置换算法（LRU，least recently used）：<br> 每次淘汰的页面是最近最久未使用的页面。</li></ol><p>  实现方法：<br>    赋予每个页面对应的页表项中，用访问字段记录该页面，从上次被访问以来所经历的时间t（该算法的实现需要专门硬件支持，虽然性能好，但实现困难，开销大）。当需要淘汰一个页面时，选择现有页面中t值最大的，即最近最久未使用的页面。</p><p>  LRU性能较好，但需要寄存器和栈的硬件支持。<br>  LRU是堆栈类算法，理论上可以证明，堆栈类算法不可能出现Belady异常。</p>  <img src="/2022/02/28/OperatingSystem/LRU.png" class=""><p>  在手动做题时，若需要淘汰页面，可以逆向检查此时在内存中的几个页面号。<br>  在逆向扫描过程中最后出现的页号就是要淘汰的页面。</p><ol start="4"><li>时钟置换算法（CLOCK）<br>  最佳置换算法（OPT）性能最好，但无法实现；<br>  先进先出算法（FIFO）实现简单，但算法性能差；<br>  最近最久未使用算法（LRU）性能好，是最接近OPT算法性能的，但是实现起来需要专门的硬件支持，算法开销大。</li></ol><p>  所以 OS 的设计者尝试了很多算法，试图用比较小的开销接近LRU的性能，这类算法都是CLOCK算法的变体。<br>  因为算法要循环扫描缓冲区像时钟一样转动，所以叫做CLOCK算法。</p><p>  时钟置换算法是一种性能和开销较均衡的算法，又称CLOCK算法，或最近未用算法（NRU，Not Recently User）</p><p>  简单的CLOCK算法实现方法：<br>    为每个页面设置一个访问位，再将内存中的页面都通过链接指针链接成一个循环队列。<br>    当某页被访问时，其访问位置为1；<br>    当需要淘汰一个页面时，只需检查页的访问位，若是0，就选择该页换出；若是1，则将它置0，暂不换出，继续检查下一个页面。</p><pre><code>若第一轮扫描中所有页面都是1，则将这些页面的访问位依次置为0后，在进行第二轮扫描（第二轮扫描中一定会有访问为为0的页面，因此简单的CLOCK算法选择一个淘汰页面最多需要经过两轮扫描）</code></pre>  <img src="/2022/02/28/OperatingSystem/CLOCK.png" class=""><ol start="5"><li>改进的时钟置换算法<br>  简单的时钟置换算法仅考虑到一个页面最近是否被访问过。<br>  事实上，如果被淘汰页面没有被修改过，就不需要执行I&#x2F;O操作写回外存。只有被淘汰的页面被修改过时，才需要写回外存。</li></ol><p>  因此，除了考虑一个页面最近有没有被访问过之外，操作系统还应该考虑页面是否被修改过。<br>  在其他条件都相同时，应优先淘汰没有修改过的页面，避免I&#x2F;O操作。<br>  这就是改进型的时钟置换算法思想。<br>  修改位 &#x3D; 0，说明页面最近没有被修改过；修改位 &#x3D; 1，说明页面最近被修改过。</p><p>  为了方便讨论，用（访问位，修改位）的形式表示各页面状态。<br>  例如：（1,1）表示最近一个页面最近被访问过，且被修改过。</p><p>  改进型的CLOCK算法需要综合考虑某一内存页面的访问位和修改位来判断是否置换该页面。<br>  在实际编写算法过程中，同样可以用一个等长的整型数组来标识每个内存块的修改状态。</p><p>  访问位A和修改位M可以组成以下四种类型的页面</p><p>  算法规则：将所有可能被置换的页面排成一个循环队列。</p><blockquote><p>第一轮：<br>  从当前位置开始扫描到第一个（A&#x3D;0，M&#x3D;0）的帧用于替换。表明该页面最近既没有被访问，也没有被修改，是最佳淘汰页<br>第二轮：<br>  若第一轮扫描失败，则重新扫描，查找第一个（A&#x3D;0，M&#x3D;1）的帧用于替换。<br>  本轮将所有扫描过的帧访问位设置为0。表明该页面最近未被访问，但已被修改，并不是很好的淘汰页。<br>第三轮：<br>  若第二轮扫描失败，则重新扫描，查找第一个（A&#x3D;1，M&#x3D;0）的帧用于替换。<br>  本轮扫描不修改任何标志位。表明该页面最近已被访问，但未被修改。<br>第四轮：<br>  若第三轮扫描失败，则重新扫描，查找第一个（A&#x3D;1，M&#x3D;1）的帧用于替换。<br>  表明该页面最近已被访问也被修改，该页可能再被访问。</p></blockquote><p>由于第二轮已将所有帧的访问位置为0，因此经过第三轮、第四轮扫描一定会有一个帧选中<br>因此改进型CLOCK置换算法选择一个淘汰页，最多会进行四轮扫描。</p>  <img src="/2022/02/28/OperatingSystem/CLOCK_pro.png" class=""><blockquote><p>算法规则：将所有可能被置换的页面排成一个循环队列<br>第一轮：<br>  从当前位置开始扫描第一个（0，0）的帧用于替换。本轮扫描不修改任何标志位（第一优先级：最近未访问、最近未修改的页面）<br>第二轮：<br>  若第一轮扫描失败，则重新扫描，查找第一个（0，1）的帧用于替换。本轮将所有扫描过的帧访问位设为0（第二优先级：最近没访问，但修改过的页面）<br>第三轮：<br>  若第二轮扫描失败，则重新扫描，查找第一个（0，0）的帧用于替换。本轮不修改任何标志位（第三优先级：最近被访问，但没修改过的页面）<br>第四轮：<br>  若第三轮扫描失败，则重新扫描，查找第一个（0，1）的帧用于替换。（第四优先级：最近访问过，且修改过的页面）<br>由于<code>第二轮已将所有帧的访问位置为0</code>，因此经过第三轮、第四轮扫描一定会有一个帧被选中，因此改进型CLOCK置换算法选择一个淘汰页面最多四轮扫描。</p></blockquote><ol start="6"><li>总结<br>||算法规则|优缺点|<br>|OPT|优先淘汰最长时间内不会被访问的页面|缺页率最小，性能最好，但无法实现|<br>|FIFO|优先淘汰最先进入内存的页面|实现简单；性能很差，可能出现Belady异常|<br>|LRU|优先淘汰最近最近没访问的页面|性能最好；但是需要硬件支持，算法开销大|<br>|CLOCK（NRU）|循环扫描各页面，第一轮淘汰访问位&#x3D;0的，并将扫描过的页面访问位改为1，若第一轮没选中，则进行第二轮扫描|实现简单，算法开销小；但未考虑页面是否被修改|<br>|改进型CLOCK（改进型NRU）|若用（访问位，修改位）的形式表示，则第一轮淘汰（0,0）；第二轮（0,1），并将扫描过的页面全部置为0；第三轮：（0,0）；第四轮：（0,1）|算法开销小，性能也不错；同时减少了磁盘IO|</li></ol><hr><h2 id="58-共享是什么？"><a href="#58-共享是什么？" class="headerlink" title="58.共享是什么？"></a>58.共享是什么？</h2><p>共享是指系统中的资源可以被多个并发进程共同使用。</p><p>有两种共享方式：互斥共享和同时共享</p><h2 id="互斥共享的资源称为临界资源，例如打印机等，在同一时刻只允许一个进程访问，需要用同步机制来实现互斥访问。"><a href="#互斥共享的资源称为临界资源，例如打印机等，在同一时刻只允许一个进程访问，需要用同步机制来实现互斥访问。" class="headerlink" title="互斥共享的资源称为临界资源，例如打印机等，在同一时刻只允许一个进程访问，需要用同步机制来实现互斥访问。"></a>互斥共享的资源称为临界资源，例如打印机等，在同一时刻只允许一个进程访问，需要用同步机制来实现互斥访问。</h2><h2 id="59、死锁相关问题总结"><a href="#59、死锁相关问题总结" class="headerlink" title="59、死锁相关问题总结"></a>59、死锁相关问题总结</h2><p><b>死锁是指两个（多个）线程相互等待对方数据的过程，死锁的产生会导致程序卡死，不解锁程序将永远无法进行下去</b></p><ol><li><p>死锁产生原因<br>  举例：<br> 两个线程A和B，两个数据1和2。<br> 线程A在执行过程中，首先对资源1加锁，然后在去给资源2加锁，但是由于线程的切换，导致线程A没能给资源2加锁；<br> 切换到线程B之，线程B首先对资源2加锁，然后再去给资源1加锁，由于资源1已被线程A加锁，因此线程B无法加锁成功；</p><p> 当线程切换回A时，A也无法成功对资源2加锁，因此就造成了线程AB双方互相对一个已加锁的资源的等待，死锁产生</p></li></ol><p>  理论上死锁的四个必要条件，缺一不可：<br>    1. 互斥条件：进程对所需求的资源具有排他性，若有其他进程请求该资源，请求进程只能等待。</p><pre><code>2. 不剥夺条件：进程在所获得的资源未释放前，不能被其他进程强行夺走，只能自己释放。3. 请求和保持条件：进程当前所拥有的资源在进程请求其他新资源时，由该进程继续占有。4. 循环等待条件：存在一种进程资源循环等待链，链中每个进程已获得的资源同时被链中下一个进程所请求。【循环等待】</code></pre><ol start="2"><li>死锁演示<br>  通过代码的形式进行演示，需要两个线程和两个互斥量。</li></ol>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span>    <span class="comment">// 引入互斥量头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">// 插入消息，模拟消息不断产生</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">insertMsg</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; ++i)&#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;插入一条消息：&quot;</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">      my_mutex1.<span class="built_in">lock</span>(); <span class="comment">// 语句1</span></span><br><span class="line">      my_mutex2.<span class="built_in">lock</span>(); <span class="comment">// 语句2</span></span><br><span class="line">      Msg.<span class="built_in">push_back</span>(i);</span><br><span class="line">      my_mutex2.<span class="built_in">unlock</span>(); </span><br><span class="line">      my_mutex1.<span class="built_in">unlock</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 读取消息</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">readMsg</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> MsgCom;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; ++i)&#123;</span><br><span class="line">      MsgCom = <span class="built_in">MsgLULProc</span>(i);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">MsgLULProc</span>(MsgCom))&#123;</span><br><span class="line">        <span class="comment">// 读出消息了</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;消息已读出&quot;</span> &lt;&lt; MsgCom &lt;&lt; endl;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 消息暂时为空</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;消息为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加解锁代码</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">MsgLULProc</span><span class="params">(<span class="type">int</span> &amp;command)</span></span>&#123;</span><br><span class="line">      <span class="type">int</span> curMsg;</span><br><span class="line">      my_mutex2.<span class="built_in">lock</span>(); <span class="comment">// 语句3</span></span><br><span class="line">      my_mutex1.<span class="built_in">lock</span>(); <span class="comment">// 语句4</span></span><br><span class="line">      <span class="keyword">if</span>(!Msg.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="comment">// 读取消息，读完删除</span></span><br><span class="line">        command = Msg.<span class="built_in">front</span>();</span><br><span class="line">        Msg.<span class="built_in">pop_front</span>();</span><br><span class="line"></span><br><span class="line">        my_mutex1.<span class="built_in">unlock</span>();</span><br><span class="line">        my_mutex2.<span class="built_in">unlock</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      my_mutex1.<span class="built_in">unlock</span>();</span><br><span class="line">      my_mutex2.<span class="built_in">unlock</span>();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  std::list&lt;<span class="type">int</span>&gt; Msg; <span class="comment">// 消息变量</span></span><br><span class="line">  std::mutex my_mutex1; <span class="comment">// 互斥量对象1</span></span><br><span class="line">  std::mutex mu_mutex2; <span class="comment">// 互斥量对象2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  A a;</span><br><span class="line">  <span class="comment">// 创建一个插入消息进程</span></span><br><span class="line">  <span class="function">std::thread <span class="title">insertTd</span><span class="params">(&amp;A::insertMsg, &amp;a)</span></span>;  <span class="comment">// 这里要传入引用保证是同一个对象</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建一个读取消息进程</span></span><br><span class="line">  <span class="function">std::thread <span class="title">readTd</span><span class="params">(&amp;A::readMsg, &amp;a)</span></span>;  <span class="comment">// 这里要传入引用保证是同一个对象</span></span><br><span class="line"></span><br><span class="line">  insertTd.<span class="built_in">join</span>();</span><br><span class="line">  readTd.<span class="built_in">join</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  语句1和语句2表示线程A先锁资源1，再锁资源2；语句3和语句4表示线程B先锁资源2再锁资源1，具备死锁产生的条件。</p><ol start="3"><li>死锁的解决方案</li></ol><p>  保证上锁的顺序一致。</p><ol start="4"><li>死锁必要条件</li></ol><ul><li><p>互斥条件：进程对所需求的资源具有排他性，若有其他进程请求该资源，请求进程只能等待。</p></li><li><p>不剥夺条件：进程在所获得的资源未释放前，不能被其他进程强行夺走，只能自己释放。</p></li><li><p>请求和保持条件：进程当前所拥有的资源在进程请求其他新资源的时候，由该进程继续占有。</p></li><li><p>循环等待条件：存在一种进程资源循环等待链，链中每个进程已获得的资源同时被链中下一个进程所请求。</p></li></ul><ol start="5"><li><p>处理方法：<br>  主要有一下四种方法：</p><ul><li><p>鸵鸟策略</p></li><li><p>死锁检测和死锁恢复</p></li><li><p>死锁预防</p></li><li><p>死锁避免</p></li></ul></li><li><p>鸵鸟策略<br>假装根本没有发生问题。</p></li></ol><pre><code>因为解决死锁问题的代价很高，因此鸵鸟策略这种不采取任何措施的方案会获得更高的性能。当发生死锁时不会对用户造成多大的影响，或发生死锁的概率很低，可以采用鸵鸟策略。大多数操作系统，包括Unix、Linux和Windows，处理死锁问题的办法仅仅是忽略它。</code></pre><ol start="2"><li>死锁检测和死锁恢复<br>不试图阻止死锁，而是当检测到死锁发生时，采取措施进行恢复。</li></ol><pre><code>1. 每种类型一个资源的死锁检测&#123;% asset_img DLdetect.png %&#125; 上图为资源分配图，其中方框表示资源，圆圈表示进程。资源指向进程表示该资源已经分配给该进程，进程指向资源表示进程请求获取该资源。图A中可以抽取出环，如图B，它满足了链式等待条件，因此会发生死锁。每种类型一个资源的死锁检测算法是通过检测有向边是否存在环来实现，从一个节点出发进行深度优先搜索，对访问过的节点进行标记，如果访问了已经标记的节点，就表示有向图存在环，也就是检测到死锁的发生。</code></pre><ol start="2"><li>每种类型多个资源的死锁检测<br><img src="/2022/02/28/OperatingSystem/DLdetect2.png" class=""></li></ol><pre><code>上图中，有三个进程四种资源，每个数据代表的含义如下：  * E向量：资源总量  * A向量：资源剩余量  * C矩阵：每个进程所拥有的资源数量，每一行都表示一个进程拥有资源的数量  * R矩阵：每个进程请求的资源数量进程P_1和P_2所请求的资源都得不到满足，只有进程P_3可以，让P_3执行，之后释放P_3拥有的资源，此时A = (2 2 2 0)P_2可以执行，执行后释放P_2拥有的资源，此时A = (4, 2, 2, 1)，P_1也可以执行，所有进程都可以顺利执行。没有死锁算法总结如下：  每个进程最开始时都不被标记，执行过程中有可能被标记。  当算法结束时，任何没有被标记的进程都是死锁进程。  1. 寻找一个没有标记的进程P_i，它所请求的资源小于等于A。    2. 如果找到了这样一个进程，那么C矩阵的第i行向量加到A中，标记该进程，并转回1。【相当于把资源释放了】  3. 如果没有这样一个进程，算法终止。3. 死锁恢复  * 利用抢占恢复  * 利用回滚恢复  * 通过杀死进程恢复</code></pre><ol start="3"><li>死锁预防<br>在程序运行之前预防发生死锁。<br>1. 破坏互斥条件。<br> 例如：假脱机技术SPOOLing，允许若干个进程同时输出，唯一真正请求物理打印机的进程是打印机守护进程。</li></ol><pre><code>2. 破坏请求和保持条件  一种实现方式是规定所有进程在开始执行前请求所需要的全部资源。3. 破坏不剥夺条件  允许抢占资源4. 破坏循环等待条件  给资源统一编号，进程只能按照编号顺序来请求资源。</code></pre><ol start="4"><li>死锁避免<br>在程序运行时避免发生死锁。</li></ol><pre><code>1. 安全状态&#123;% asset_img avoidDL.png %&#125;图a的第二列Has表示已经拥有的资源数，第三列Max表示总共需要的资源数，Free表示还可以使用的资源数【此处是单个资源】从图a开始出发，先让B拥有所需的所有资源（图b），运行结束后释放B，此时Free变为5（图c）；接着以同样的方式运行C和A，使得所有进程都能成功运行，因此可以称图A所示的状态是安全的。定义：如果没有死锁发生，并且即使所有进程突然请求对资源的最大需求，也仍然存在某种调度顺序使得每一个进程运行完毕，则称该状态是安全的。安全状态的检测和死锁的检测类似，因为安全状态必须要求不能发生死锁。下面的银行家算法和死锁检测算法非常类似，可以结合参考对比2. 单个资源的银行家算法  一个小城镇的银行家，向一群客户分别承诺了一定的带宽额度，算法要做的是判断该请求的满足是否会进入不安全状态，如果是，则拒绝请求；否则分配。  &#123;% asset_img BankerSingle.png %&#125;  上图c为不安全状态，因此算法会拒绝之前的请求，从而避免进入图c的状态。3. 多个资源的银行家算法  &#123;% asset_img BankerMulti.png %&#125;  上图中有五个进程，四个资源。  左边的图表表示已经分配的资源，右边的图标表示还需要分配的资源。  最右边的E/P以及A分别表示：总资源、已分配资源和可用资源；注意三者为向量，不是具体数值  例如A=（1020），表示四个资源分别剩下1/0/2/04. 检查一个状态是否安全的算法：  * 查找右边的矩阵是否存在一行小于等于向量A，如果不存在这样的行，那么系统就会发生死锁，状态是不安全的。  * 假若找到这样一行，就将该进程标记为终止，并将其已分配资源添加到A中【当前可用资源】  * 重复以上两步，直到所有进程都标记为终止，则状态是安全的。  如果一个状态不是安全的，需要拒绝进入这个状态。</code></pre><h2 id="60、为什么分段式存储管理有外部碎片而无内部碎片？为什么固定分区分配有内部碎片不会有外部碎片？"><a href="#60、为什么分段式存储管理有外部碎片而无内部碎片？为什么固定分区分配有内部碎片不会有外部碎片？" class="headerlink" title="60、为什么分段式存储管理有外部碎片而无内部碎片？为什么固定分区分配有内部碎片不会有外部碎片？"></a>60、为什么分段式存储管理有外部碎片而无内部碎片？为什么固定分区分配有内部碎片不会有外部碎片？</h2><p>  分段式分配是按需分配；<br>  固定分配是固定分配的方式；</p><h2 id="61、内部碎片与外部碎片"><a href="#61、内部碎片与外部碎片" class="headerlink" title="61、内部碎片与外部碎片"></a>61、内部碎片与外部碎片</h2><ul><li><p>内部碎片：<br>分配给某些进程的内存区域中有部分没用上，常见于固定分配方式。</p><p>内存总量相同，100M；</p><ul><li><p>固定分配：将100M分割成10块，每块10M，一个程序需要45M，那么需要分配5块，第五块用了5M，剩下的5M就是内部碎片。</p></li><li><p>分段式分配：按需分配，一个程序需要45M，就给分配45M，剩下的55M供其他进程使用，不存在内部碎片。</p></li></ul></li><li><p>外部碎片：<br>内存中某些空闲区因为比较小，而难利用上，一般出现在内存动态分配方式中</p><ul><li>分段式分配：<br>内存总量相同，100M，例如：内存依次分配5M、15M、50M、25M，程序运行一段内时间之后，5M、15M的程序运行完毕，释放内存，其他程序还在运行<br>再次分配一个10M的内存供其他程序使用，只能从头开始分配，这样，就会存在10M + 5M的外部碎片</li></ul></li></ul><h2 id="62、如何消除碎片文件"><a href="#62、如何消除碎片文件" class="headerlink" title="62、如何消除碎片文件"></a>62、如何消除碎片文件</h2><ul><li><p>对于外部碎片：<br>通过<b>紧凑技术</b>消除，就是操作系统不时地对进程进行移动和整理。<br>但是这需要动态重定位寄存器地支持，且相对费时。<br>紧凑地过程实际上类似于Windows系统中磁盘整理程序，只不过后者是对外存空间的紧凑。</p></li><li><p>对于外部内存碎片的问题：<br>内存交换</p></li></ul><p>  可以把音乐程序占用的那256M内存写到硬盘上，然后再从硬盘上读回到内存里。<br>  不过再读回的时候，不能装载到原来的位置，而是紧紧跟着那已经被占用的512MB内存后面。<br>  这样就能空缺处连续256MB空间，于是新的200MB程序就可以装载进来。</p><p>  回收内存时要尽可能地将相邻的空闲空间合并。</p><h2 id="63、冯诺依曼结构有哪几个模块？分别对应现代计算机的哪几个部分？（百度安全一面）"><a href="#63、冯诺依曼结构有哪几个模块？分别对应现代计算机的哪几个部分？（百度安全一面）" class="headerlink" title="63、冯诺依曼结构有哪几个模块？分别对应现代计算机的哪几个部分？（百度安全一面）"></a>63、冯诺依曼结构有哪几个模块？分别对应现代计算机的哪几个部分？（百度安全一面）</h2><ul><li><p>存储器：内存</p></li><li><p>控制器：南桥北桥</p></li><li><p>运算器：CPU</p></li><li><p>输入设备：键盘等</p></li><li><p>输出设备：显示器、网卡等</p></li></ul><h2 id="64、多进程和多线程的区别是什么？换句话说，什么时候该用多线程，什么时候该用多进程？"><a href="#64、多进程和多线程的区别是什么？换句话说，什么时候该用多线程，什么时候该用多进程？" class="headerlink" title="64、多进程和多线程的区别是什么？换句话说，什么时候该用多线程，什么时候该用多进程？"></a>64、多进程和多线程的区别是什么？换句话说，什么时候该用多线程，什么时候该用多进程？</h2><ul><li><p>频繁修改：需要频繁创建和销毁的优先使用<b>多线程</b></p></li><li><p>计算量：需要大量计算的优先使用<b>多线程</b>，因为需要消耗大量CPU资源且切换频繁，所以多线程好一点</p></li><li><p>相关性：任务间相关性比较强的用<b>多线程</b>，相关性较弱的用<b>多进程</b>。因为线程之间的数据共享和同步比较简单。</p></li><li><p>多分布：可能要扩展到多机分布的用<b>多进程</b>，多核分布的用<b>多线程</b></p></li></ul><p>实际中常见的是进程+线程的方式，不是非此即彼的。</p><h2 id="65、服务器高并发的解决方案？"><a href="#65、服务器高并发的解决方案？" class="headerlink" title="65、服务器高并发的解决方案？"></a>65、服务器高并发的解决方案？</h2><ul><li><p>应用数据和静态资源分离：<br>将静态资源（图片，视频，js，CSS等）单独保存到专门的静态资源服务器中<br>在客户端访问的时候从静态资源服务器中返回静态资源，主服务器返回应用数据。</p></li><li><p>客户端缓存：<br>效率最高，消耗资源最小的就是纯静态的html页面，所以可以把网站上的页面尽可能用静态来实现，在页面过期或有数据更新后再将页面重新缓存。<br>或者先生成静态页面，然后用ajax异步请求获取动态数据。</p></li><li><p>集群和分布式：<br>集群：所有服务器都有相同的功能，请求哪台都可以，主要起分流作用<br>分布式：不同的业务放到不同的服务器中，处理一个请求可能用到多台服务器，起到加快请求处理的速度。</p><p>可以使用服务器集群和分布式架构，使得原本属于一个服务器的计算压力分散到多个服务器上。<br>同时加快请求处理的速度。</p></li><li><p>反向代理：<br>在访问服务器的时候，服务器通过别的服务器获取资源或结果返回给客户端。</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode-Tips</title>
      <link href="/2022/02/26/LeetCode-Tips/"/>
      <url>/2022/02/26/LeetCode-Tips/</url>
      
        <content type="html"><![CDATA[<h1 id="一、数据结构小Tips"><a href="#一、数据结构小Tips" class="headerlink" title="一、数据结构小Tips"></a>一、数据结构小Tips</h1><ol><li><p>使用虚拟头指针Dummy</p></li><li><p>优先队列排序O(nlogn)，快速得到最小节点，LeetCode-P23</p><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>优先队列排序——大根堆</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从大到小排序</span></span><br><span class="line">priority_queue&lt;<span class="type">int</span>&gt; q1;</span><br><span class="line">priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, less&lt;<span class="type">int</span>&gt; &gt;q2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义 从大到小排序</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">info</span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span> &lt; (info x, info y)&#123;</span><br><span class="line">        <span class="keyword">return</span> x.a &lt; y.a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;info&gt; q3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">info</span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> info&amp; x) <span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a &lt; x.a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;info&gt; q4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp1</span>&#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a &lt; b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, cmp&gt; q5;</span><br></pre></td></tr></table></figure>     </div></div>    </div></li><li><p>可以将一个大问题分为若干个小问题逐个解决，例如：翻转链表（递归写法）<br>然而，递归一般而言复杂度不必迭代好。</p></li><li><p>本质上，链表也有前序遍历和后序遍历，参考判断回文链表<br>事实上，二叉树又称为二叉链表，因此就有前序遍历和后序遍历类似的说法<br>逆序打印链表：递归写法，后续遍历链表即可。</p></li><li><p>二叉树题目的递归解法：遍历一遍二叉树【回溯算法】、分解问题计算出答案【动态规划】<br>例如：二叉树高度的动态规划解法：要算出二叉树的高度，要先计算出<b>左右子树</b>的高度，将最大高度+1即可<br>换言之，如果题目要求子树的信息，则一般需要使用后续遍历算法。</p></li><li><p>二叉树的核心代码也就，前、中、后序遍历，不要把问题想的太复杂，而且二叉树也不一定对称。<br>细化二叉树问题，例如连接节点问题：<b>将每一层二叉树节点连接起来</b>细化为：<b>将每两个相邻节点连接起来</b></p></li><li><p>实际上，二叉树的递归也可以使用栈改写【递归的实现本质上是栈的实现过程】</p></li><li><p>如果当前节点会对下面的子节点有整体影响，可以通过辅助函数增长参数列表，借助参数传递信息。</p></li><li><p>BST代码框架</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">BST</span><span class="params">(TreeNode* root, <span class="type">int</span> target)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root-&gt;val == target) <span class="comment">// do something...</span></span><br><span class="line">    <span class="keyword">if</span>(root-&gt;val &gt; target)  <span class="built_in">BST</span>(root-&gt;left, target);</span><br><span class="line">    <span class="keyword">if</span>(root-&gt;val &lt; target)  <span class="built_in">BST</span>(root-&gt;right, target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>BST增删改查可以试着套用模板</p></li></ol><h1 id="二、DP小Tips"><a href="#二、DP小Tips" class="headerlink" title="二、DP小Tips"></a>二、DP小Tips</h1><ol><li><p>【重叠子问题】、【最优子结构】、【状态转移方程】<br>  其中：最优子结构的子问题必须独立。</p></li><li><p>题目套路：</p></li><li><p>明确 base case</p></li><li><p>明确【状态】</p></li><li><p>明确【选择】</p></li><li><p>定义 dp 数组&#x2F;函数的含义</p></li><li><p>自顶向下递归求解f(20)-&gt;f(1)、自底向上递推求解f(1)-&gt;f(20)【常见】。</p></li><li><p>动态规划的关键：写出状态转移方程。【即暴力解】<br>因此，写出暴力解，优化方法只有备忘录、DP Table。</p></li><li><p>例如，想求amount &#x3D; 11的最优解，只需要求出 amount &#x3D; 10的最优解 +1 即可</p></li><li><p>动态规划的核心思想是第一类数学归纳法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;nums.<span class="built_in">length</span>(); ++i)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;i; ++j)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] &gt; nums[j])</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>能求最值的大部分有最优子结构特性，但最优子结构作为DP的必要条件，一定是要求最值的<br>  反过来说，恶心人的最值题，往DP想<br>  从Base Case向后推导，从前往后链式推导以满足性质。</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>dp</title>
      <link href="/2022/02/25/dp/"/>
      <url>/2022/02/25/dp/</url>
      
        <content type="html"><![CDATA[<h1 id="1、洛谷P1434-滑雪"><a href="#1、洛谷P1434-滑雪" class="headerlink" title="1、洛谷P1434-滑雪"></a>1、洛谷P1434-滑雪</h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="- 题目大意"></a>- 题目大意</h2><blockquote><p>只能从高滑到低，想知道一个最长的滑坡</p></blockquote><h2 id="示例"><a href="#示例" class="headerlink" title="- 示例"></a>- 示例</h2><blockquote><p>5 5<br>1 2 3 4 5<br>16 17 18 19 6<br>15 24 25 20 7<br>14 23 22 21 8<br>13 12 11 10 9</p><p>output : 25</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="- 代码"></a>- 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">105</span>][<span class="number">105</span>], visit[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> tr, <span class="type">int</span> tc, <span class="type">int</span> row, <span class="type">int</span> col)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(visit[row][col])</span><br><span class="line">        <span class="keyword">return</span> visit[row][col];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)&#123;</span><br><span class="line">        <span class="type">int</span> Drow = row + dir[i][<span class="number">0</span>], Dcol = col + dir[i][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(Drow &gt;= <span class="number">0</span> &amp;&amp; Drow &lt; tr &amp;&amp; Dcol &gt;= <span class="number">0</span> &amp;&amp; Dcol &lt; tc &amp;&amp; a[Drow][Dcol] &lt; a[row][col])&#123;</span><br><span class="line">            visit[row][col] = <span class="built_in">max</span>(visit[row][col], <span class="built_in">dfs</span>(tr, tc, Drow, Dcol) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> visit[row][col];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">int</span> r, c, ans = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; r &gt;&gt; c;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; r; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; c; ++j)&#123;</span><br><span class="line">            cin &gt;&gt; a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; r; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; c; ++j)&#123;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, <span class="built_in">dfs</span>(r, c, i, j) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="- 注意事项"></a>- 注意事项</h2><ol><li>注意边界条件</li><li>dfs + dp</li></ol><h1 id="2、洛谷P2196-挖地雷"><a href="#2、洛谷P2196-挖地雷" class="headerlink" title="2、洛谷P2196-挖地雷"></a>2、洛谷P2196-挖地雷</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="- 题目描述"></a>- 题目描述</h2><blockquote><p>从任一处开始挖地雷，只能选择一条路径往下挖<br>n个地点，之后n-1行是是否连通</p></blockquote><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="- 示例"></a>- 示例</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">10 8 4 7 6</span><br><span class="line">1 1 1 0</span><br><span class="line">0 0 0</span><br><span class="line">1 1</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="- 代码"></a>- 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> sum, mineAns;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100</span>], map[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; ans, temp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> layer, <span class="type">int</span> mines)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(mines &gt; mineAns)&#123;</span><br><span class="line">        mineAns = mines;</span><br><span class="line">        ans = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=layer + <span class="number">1</span>; i&lt;sum; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(map[layer][i])&#123;</span><br><span class="line">            temp.<span class="built_in">push_back</span>(i + <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">dfs</span>(i, mines + a[i]);</span><br><span class="line">            temp.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; sum;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;sum; ++i)    cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;sum - <span class="number">1</span>; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>; j&lt;sum; ++j)&#123;</span><br><span class="line">            cin &gt;&gt; map[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;sum; ++i)&#123;</span><br><span class="line">        temp.<span class="built_in">push_back</span>(i + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">dfs</span>(i, a[i]);</span><br><span class="line">        temp.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it = ans.<span class="built_in">begin</span>(); it != ans.<span class="built_in">end</span>(); ++it)&#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; mineAns &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="- 注意事项"></a>- 注意事项</h2><h1 id="3、力扣P95-不同的二叉搜索树"><a href="#3、力扣P95-不同的二叉搜索树" class="headerlink" title="3、力扣P95-不同的二叉搜索树"></a>3、力扣P95-不同的二叉搜索树</h1><h2 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="- 题目大意"></a>- 题目大意</h2><blockquote><p>给一个整数，求恰由n个节点且结点值从1-n互不相同的二叉搜索树有多少种？</p></blockquote><h2 id="示例-2"><a href="#示例-2" class="headerlink" title="- 示例"></a>- 示例</h2><img src="/2022/02/25/dp/UniqueBST.jpg" class=""><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="- 代码"></a>- 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numTrees</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>; i&lt;=n; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;i; ++j)&#123;</span><br><span class="line">                dp[i] += dp[j] * dp[i - j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="- 注意事项"></a>- 注意事项</h2><p>一个结点的左右子树都可以继续再分，所以可以推出状态转移方程。</p><h1 id="4、力扣P96-不同的二叉搜索树（二）"><a href="#4、力扣P96-不同的二叉搜索树（二）" class="headerlink" title="4、力扣P96-不同的二叉搜索树（二）"></a>4、力扣P96-不同的二叉搜索树（二）</h1><h2 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="- 题目大意"></a>- 题目大意</h2><blockquote><p>给出一个整数 n，生成并返回结点值从 1-n 的二叉搜索树</p></blockquote><h2 id="示例-3"><a href="#示例-3" class="headerlink" title="- 示例"></a>- 示例</h2><img src="/2022/02/25/dp/UniqueBST.jpg" class=""><h2 id="代码-3"><a href="#代码-3" class="headerlink" title="- 代码"></a>- 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function">vector&lt;TreeNode*&gt; <span class="title">buildTree</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left &gt; right)    <span class="keyword">return</span> &#123;<span class="literal">nullptr</span>&#125;;</span><br><span class="line">        vector&lt;TreeNode*&gt; ans;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=left; i&lt;= right; ++i)&#123;</span><br><span class="line">            vector&lt;TreeNode*&gt; leftTree = <span class="built_in">buildTree</span>(left, i<span class="number">-1</span>);</span><br><span class="line">            vector&lt;TreeNode*&gt; rightTree = <span class="built_in">buildTree</span>(i+<span class="number">1</span>, right);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; itLeft: leftTree)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; itRight: rightTree)&#123;</span><br><span class="line">                    TreeNode* curNode = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(i);</span><br><span class="line">                    curNode-&gt;left = itLeft, curNode-&gt;right = itRight;</span><br><span class="line">                    ans.<span class="built_in">push_back</span>(curNode);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;TreeNode*&gt; <span class="title">generateTrees</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">buildTree</span>(<span class="number">1</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="- 注意事项"></a>- 注意事项</h2><p>可以细分左右子树，注意 nullptr 的使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/2022/02/25/network/"/>
      <url>/2022/02/25/network/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h2 id="1、OSI七层模型、功能"><a href="#1、OSI七层模型、功能" class="headerlink" title="1、OSI七层模型、功能"></a>1、OSI七层模型、功能</h2><ul><li><p>物理层：物理标准【比特】</p></li><li><p>数据链路层：定义数据的基本格式，如何传输，如何标识【帧】</p></li><li><p>网络层：IP、分组转发【包】</p></li><li><p>传输层：TCP、UDP，端到端传输【数据段】</p></li><li><p>会话层：控制应用程序之间会话</p></li><li><p>表示层：数据格式标识</p></li><li><p>应用层：各种应用软件</p></li></ul><hr><h2 id="2、完整的HTTP请求："><a href="#2、完整的HTTP请求：" class="headerlink" title="2、完整的HTTP请求："></a>2、完整的HTTP请求：</h2><ol><li><p>域名解析；</p></li><li><p>TCP的3次握手</p></li><li><p>建立TCP后的http请求</p></li><li><p>服务器响应http请求，浏览器得到html代码</p></li><li><p>浏览器解析html代码，并请求html代码中的资源</p></li><li><p>浏览器进行渲染</p></li></ol><hr><h2 id="3、DNS【域名系统】"><a href="#3、DNS【域名系统】" class="headerlink" title="3、DNS【域名系统】"></a>3、DNS【域名系统】</h2><h2 id="域名和IP映射，不必记住目标地址的IP，而是可以记助记符"><a href="#域名和IP映射，不必记住目标地址的IP，而是可以记助记符" class="headerlink" title="域名和IP映射，不必记住目标地址的IP，而是可以记助记符"></a>域名和IP映射，不必记住目标地址的IP，而是可以记助记符</h2><h2 id="4、DNS工作原理"><a href="#4、DNS工作原理" class="headerlink" title="4、DNS工作原理"></a>4、DNS工作原理</h2><p>主机转换为IP地址，<code>应用层协议</code>，UDP传输</p><p>过程：</p><ol><li><p>当用户输入域名时，浏览器先检查自己的缓存是否有这个域名映射的IP地址，有则解析结束</p></li><li><p>若未命中，则检查操作系统缓存有无解析过的过程（hosts），有则解析结束</p></li><li><p>若未命中，则请求本地域名服务器解析（LDNS - local DNS）</p></li><li><p>若未命中，则跳到根域名服务器请求解析。根域名服务器返回给LDNS一个主域名服务器地址</p></li><li><p>LDNS发送请求给上一步返回的gTLD（通用顶级域），接受请求的gTLD查找并返回这个域名对应的Name Server地址</p></li><li><p>Name Server根据映射关系表找到目标ip，返回给LDNS</p></li><li><p>LDNS缓存这个域名和对应的IP，把解析的结果返回给用户，用户根据TTL值缓存到本地系统缓存中，过程结束</p></li></ol><blockquote><p>总结：浏览器缓存、系统缓存、路由器缓存、ISP服务器缓存、根域名服务器缓存、顶级域名服务器缓存、主域名服务器缓存<br>主机向本地域名服务器的查询一般都是<code>递归查询</code><br>本地域名服务器向根域名服务器的查询一般<code>迭代查询</code></p></blockquote><hr><h2 id="5、为什么域名解析用UDP"><a href="#5、为什么域名解析用UDP" class="headerlink" title="5、为什么域名解析用UDP"></a>5、为什么域名解析用UDP</h2><p>因为若基于TCP的话，需要三次握手，发送数据以及应答，四次挥手。<br>UDP相比而言快很多，一个请求、应答即可，同时UDP传输内容不超过512字节，一般DNS请求内容也不会太大。</p><hr><h2 id="6、区域传送使用TCP协议？"><a href="#6、区域传送使用TCP协议？" class="headerlink" title="6、区域传送使用TCP协议？"></a>6、区域传送使用TCP协议？</h2><p>TCP协议可靠性好，能够保证数据按序到达和无差错（包括下面几层的功劳）<br>同时TCP能够传输大于512字节的内容，不同于UDP</p><hr><h2 id="7、HTTP长连接和短连接的区别"><a href="#7、HTTP长连接和短连接的区别" class="headerlink" title="7、HTTP长连接和短连接的区别"></a>7、HTTP长连接和短连接的区别</h2><p>在HTTP&#x2F;1.0中默认使用短连接。即客户端和服务器每进行一次HTTP操作，就建立一次连接，<code>任务结束就中断连接</code>。</p><h2 id="从HTTP-x2F-1-1起，默认使用长连接，用以保持连接特性。"><a href="#从HTTP-x2F-1-1起，默认使用长连接，用以保持连接特性。" class="headerlink" title="从HTTP&#x2F;1.1起，默认使用长连接，用以保持连接特性。"></a>从HTTP&#x2F;1.1起，默认使用长连接，用以<code>保持连接</code>特性。</h2><h2 id="8、TCP粘包-x2F-拆包？发生原因？"><a href="#8、TCP粘包-x2F-拆包？发生原因？" class="headerlink" title="8、TCP粘包&#x2F;拆包？发生原因？"></a>8、TCP粘包&#x2F;拆包？发生原因？</h2><p>一个完整的业务可能会被TCP拆分成多个包进行发送，也有可能把多个小的包封装成一个大的数据报发送，这个就是TCP的拆包和粘包问题。<br>【应用层从TCP缓冲区读取数据无法确定发生方的发送边界】</p><p>原因：</p><ol><li><p>应用程序写入数据的字节大小大于套接字发送缓存区的大小</p></li><li><p>进行MSS大小的TCP分段。（MSS &#x3D; TCP报文段长度 - TCP首部长度）</p></li><li><p>以太网的payload大于MTU进行IP分片（MTU：最大传输单元）</p></li></ol><p>解决方案：【解决分界问题】</p><ol><li><p>消息定长</p></li><li><p>在包尾部增加回车或者空格等特殊字符进行分割</p></li><li><p>将消息分为消息头和消息尾</p></li><li><p>使用其他复杂的协议，如RTMP协议。</p></li></ol><hr><h2 id="9、为什么服务器会缓存功能？如何实现？"><a href="#9、为什么服务器会缓存功能？如何实现？" class="headerlink" title="9、为什么服务器会缓存功能？如何实现？"></a>9、为什么服务器会缓存功能？如何实现？</h2><p>原因：</p><ol><li>缓解服务器压力</li><li>降低客户端获得资源的延迟：缓存通常位于内存中，读取缓存的速度更快。<br>  缓存服务器在地理位置可能比原服务器更近，例如Browser Cache</li></ol><p>实现方法：</p><ol><li>让代理服务器进行缓存</li><li>让客户端浏览器进行缓存</li></ol><hr><h2 id="10、HTTP请求方法？"><a href="#10、HTTP请求方法？" class="headerlink" title="10、HTTP请求方法？"></a>10、HTTP请求方法？</h2><p>客户端发送的<code>请求报文</code>第一行为请求行，包含了方法字段</p><p>根据HTTP标准，HTTP请求可以使用多种方法</p><p>HTTP1.0 定义了三种请求方法：GET，POST和HEAD方法。<br>HTTP1.1 新增了六种请求方法：OPTIONS、PUTS、PATCH、DELETE、TRACE和CONNECT方法。</p><table><thead><tr><th align="left">序号</th><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">GET</td><td align="left">请求指定的页面信息，并返回实体主体</td></tr><tr><td align="left">2</td><td align="left">HEAD</td><td align="left">类似于GET请求，不过返回的响应中没有具体内容，用于获取报头</td></tr><tr><td align="left">3</td><td align="left">POST</td><td align="left">向指定资源提交数据进行处理请求（例如提交表单或上传文件）。数据被包含在请求体中，POST请求可能会导致新资源建立&#x2F;已有资源修改</td></tr><tr><td align="left">4</td><td align="left">PUT</td><td align="left">从客户端向服务器传送的数据取代指定的文档的内容</td></tr><tr><td align="left">5</td><td align="left">DELETE</td><td align="left">请求服务器删除指定的页面</td></tr><tr><td align="left">6</td><td align="left">CONNECT</td><td align="left">HTTP&#x2F;1.1协议中预留给能将连接改为管道方式的代理服务器</td></tr><tr><td align="left">7</td><td align="left">OPTIONS</td><td align="left">允许客户端查看服务器性能</td></tr><tr><td align="left">8</td><td align="left">TRACE</td><td align="left">回显服务器收到的请求，主要用于测试或诊断</td></tr><tr><td align="left">9</td><td align="left">PATCH</td><td align="left">是对PUT方法的补充，用来对已知资源进行局部更新</td></tr></tbody></table><hr><h2 id="11、GET和POST的请求"><a href="#11、GET和POST的请求" class="headerlink" title="11、GET和POST的请求"></a>11、GET和POST的请求</h2><ol><li><p>get是获取数据<br>post是修改数据</p></li><li><p>get把请求的数据放在url上，以<code>?</code>分割URL和传输，参数之间以&amp;相连，因此get不安全。<br>post把数据放在HTTP的包体内（request body）</p></li><li><p>get提交的数据最大是2k（限制实际上取决于浏览器）<br>post理论上无限制</p></li><li><p>get产生一个TCP数据包，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）<br>post产生两个TCP数据包，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应 200 ok（返回数据）</p></li><li><p>get请求会被浏览器主动缓存<br>post不会，除非手动设置</p></li><li><p>get是幂等的<br>post不是幂等的（本质区别）</p></li></ol><blockquote><p>幂等性：一次和多次请求某一个资源应该具有同样的副作用，简单说意味着同一URL的多个请求返回同样结果。</p></blockquote><p>因为上述区别：<br>不应该也<b>不能用get请求做数据的增删改这些有副作用的操作</b>。<br>由于get请求是幂等的，<b>在网络不好的隧道中会尝试重试</b>。<br>如果用get请求增数据，会有<code>重复操作</code>的风险，这种重复操作可能会导致副作用。<br>（浏览器和操作系统不知道你用get请求增操作）</p><hr><h2 id="12、一个TCP连接可以对应几个HTTP请求？"><a href="#12、一个TCP连接可以对应几个HTTP请求？" class="headerlink" title="12、一个TCP连接可以对应几个HTTP请求？"></a>12、一个TCP连接可以对应几个HTTP请求？</h2><h2 id="如果长连接，一个TCP连接是可以对应多个HTTP请求的。"><a href="#如果长连接，一个TCP连接是可以对应多个HTTP请求的。" class="headerlink" title="如果长连接，一个TCP连接是可以对应多个HTTP请求的。"></a>如果长连接，一个TCP连接是可以对应多个HTTP请求的。</h2><h2 id="13、一个TCP连接中HTTP请求发送可以一起发送吗（如一起发送三个请求，在一起接受）？"><a href="#13、一个TCP连接中HTTP请求发送可以一起发送吗（如一起发送三个请求，在一起接受）？" class="headerlink" title="13、一个TCP连接中HTTP请求发送可以一起发送吗（如一起发送三个请求，在一起接受）？"></a>13、一个TCP连接中HTTP请求发送可以一起发送吗（如一起发送三个请求，在一起接受）？</h2><p>HTTP&#x2F;1.1存在一个问题，单个TCP连接在同一时刻只能处理一个请求<br>即：两个请求的生命周期不能重叠，任意两个HTTP请求从开始到结束的时间在同一个TCP连接里不能重叠</p><p>在HTTP&#x2F;1.1存在Pipelining技术可以完成多个请求同时发送，但浏览器默认关闭，所以认为不可行。<br>HTTP2中由于Multiplexing特点的存在，多个HTTP请求可以在同一个TCP连接中并行进行。</p><blockquote><p>HTTP&#x2F;1.1中默认不行，实际可以开启<br>HTTP&#x2F;2中可以</p></blockquote><p>则在HTTP&#x2F;1.1时代，如何提高页面加载效率？</p><ol><li><p>维持和服务器已经建立的TCP连接，在同一连接上顺序处理多个请求。</p></li><li><p>和服务器建立多个TCP连接</p></li></ol><hr><h2 id="14、浏览器对同一-Host-建立TCP连接到的数量有没有限制？"><a href="#14、浏览器对同一-Host-建立TCP连接到的数量有没有限制？" class="headerlink" title="14、浏览器对同一 Host 建立TCP连接到的数量有没有限制？"></a>14、浏览器对同一 Host 建立TCP连接到的数量有没有限制？</h2><p>假设HTTP&#x2F;1.1时代，没有多路传输，若接受到一个有几十张图片的网页如何处理？</p><p>只开一个TCP很慢，每个图片一个TCP电脑和服务器都接受不了。</p><p>限制：有<br>Chrome 最多允许对同一个Host建立六个TCP连接，不同的浏览器有一些区别。</p><p>如果图片都是<b>HTTPS连接并且在同一个域名下</b>，那么浏览器在SSL握手之后会和服务器商量能否使用HTTP2<br>若能，则用Multiplexing功能进行多路传输。<br>不过也未必会所有挂在这个域名的资源都会使用一个TCP去获取，但可以确定的是Multiplexing很可能会被用到。</p><p>如果用不了HTTP2或者HTTPS（HTTP2在HTTPS基础上实现）</p><p>则浏览器会在一个HOST上建立多个TCP连接，连接数量的最大限制取决于浏览器设置。<br>这些连接会在空闲时被浏览器用来发送新的请求，若所有连接都在发送请求，则其他只能等待。</p><hr><h2 id="15、在浏览器中输入URL地址后显示主页的过程？"><a href="#15、在浏览器中输入URL地址后显示主页的过程？" class="headerlink" title="15、在浏览器中输入URL地址后显示主页的过程？"></a>15、在浏览器中输入URL地址后显示主页的过程？</h2><ul><li><p>根据域名，进行DNS解析。</p></li><li><p>拿到解析的IP地址，建立TCP连接。</p></li><li><p>向IP地址发送HTTP请求</p></li><li><p>服务器处理</p></li><li><p>返回结果</p></li><li><p>关闭TCP连接</p></li><li><p>浏览器解析HTML</p></li><li><p>浏览器渲染</p></li></ul><hr><h2 id="16、在浏览器地址栏输入一个URL后回车，背后会进行哪些技术步骤？"><a href="#16、在浏览器地址栏输入一个URL后回车，背后会进行哪些技术步骤？" class="headerlink" title="16、在浏览器地址栏输入一个URL后回车，背后会进行哪些技术步骤？"></a>16、在浏览器地址栏输入一个URL后回车，背后会进行哪些技术步骤？</h2><ol><li><p>浏览器缓存</p></li><li><p>本机host</p></li><li><p>调用API，Linux下Socket函数 gethostbyname</p></li><li><p>向DNS服务器发送DNS请求，UPD协议</p></li><li><p>若在子网内，则用ARP地址解析协议进行查询，若不在一个子网内，则要对默认网关进行DNS查询，而且要一直向上找DNS服务器</p></li><li><p>若此时有服务器IP地址即默认端口号，http（80）、https（443）,则先尝试http然后调用Socket建立TCP连接</p></li><li><p>三次握手成功建立连接后，开始传送数据，若是http协议，则返回</p></li><li><p>若不是http协议，服务器会返回一个5开头的重定向消息，但是https，IP不变端口号不同 —— 传输完毕后四次挥手</p></li><li><p>除了80-&gt;443，还会采用SSL加密技术保证传输数据安全性，保证数据传输过程不被修改或替换</p></li><li><p>三次握手，沟通好双方使用的认证算法，加密和检验算法，在此过程中也会检验CA安全证书</p></li><li><p>确认无误后开始通信，服务器返回要访问网址的一些数据，再次过程中会将界面进行渲染，牵涉到ajax技术等。</p></li></ol><hr><h2 id="17、DNS解析过程"><a href="#17、DNS解析过程" class="headerlink" title="17、DNS解析过程"></a>17、DNS解析过程</h2><ol><li><p>若是chrome浏览器，先找有无<b>缓存过的域名对应IP地址</b><br>若有，则跳过DNS解析<br>若没有，则找硬盘的hosts文件【Hosts文件也是域名对应一个IP】</p></li><li><p>若hosts文件没能获得对应ip地址，则会发送一个<b>dns请求到本地dns服务器，本地dns服务器一般都是ISP提供</b>。</p></li><li><p>主机向本地DNS服务器发送DNS请求，使用的是<b>递归方式</b>，本地DNS也会查询自己的缓存。</p></li><li><p>本地DNS服务器会向域服务器发送请求【迭代】</p></li><li><p>本地DNS向域名解析服务器发送请求，从而获得DNS-&gt;IP</p></li></ol><hr><h2 id="18、DNS负载均衡"><a href="#18、DNS负载均衡" class="headerlink" title="18、DNS负载均衡"></a>18、DNS负载均衡</h2><p>用户足够多，每次请求都在同一台机器上，则机器随时可能宕机</p><p>负载均衡：在DNS服务器中为同一个主机名配置多个IP地址，<br>在应答DNS查询时，DNS服务器对每个查询将以DNS文件中主机记录的IP地址按顺序返回不同解析结果<br>将客户端的访问引导到不同机器上去，使得不同客户端访问不同服务器，从而负载均衡。</p><blockquote><p>负载率、地理位置作为考量指标</p></blockquote><hr><h2 id="19、HTTPS和HTTP区别"><a href="#19、HTTPS和HTTP区别" class="headerlink" title="19、HTTPS和HTTP区别"></a>19、HTTPS和HTTP区别</h2><ol><li><p>http协议传输的数据都是未加密的，明文的，因此http协议传输隐私信息非常不安全<br>https协议是由SSL+http协议构建的可进行加密传输、身份认证的网络协议，比http协议安全</p></li><li><p>https协议要用到ca申请证书，免费证书较少，一般要费用</p></li><li><p>http(80)和https(443)使用完全不同连接方式，端口也不同</p></li></ol><hr><h2 id="20、什么是SSL-x2F-TLS？"><a href="#20、什么是SSL-x2F-TLS？" class="headerlink" title="20、什么是SSL&#x2F;TLS？"></a>20、什么是SSL&#x2F;TLS？</h2><p>SSL：安全套接字层，用于加密和验证应用程序（如浏览器）和Web服务器之间发送的数据的协议。<br>     加密https的加密机制是一种共享秘钥加密和公开密钥加密并用的混合加密机制。<br>TLS：安全传输层协议</p><p>SSL&#x2F;TLS协议作用：认证用户和服务，加密数据，维护数据的完整性的应用层协议和解密需要两个不同的秘钥，因此称为非对称加密</p><h2 id="加密和解密都使用一个秘钥的对称加密：优点在于加密解密效率通常较高，https是基于非对称加密的，公钥公开。"><a href="#加密和解密都使用一个秘钥的对称加密：优点在于加密解密效率通常较高，https是基于非对称加密的，公钥公开。" class="headerlink" title="加密和解密都使用一个秘钥的对称加密：优点在于加密解密效率通常较高，https是基于非对称加密的，公钥公开。"></a>加密和解密都使用一个秘钥的对称加密：优点在于加密解密效率通常较高，https是基于非对称加密的，公钥公开。</h2><h2 id="21、HTTPS如何保证数据传输安全，整体流程？（SSL如何工作保证安全）"><a href="#21、HTTPS如何保证数据传输安全，整体流程？（SSL如何工作保证安全）" class="headerlink" title="21、HTTPS如何保证数据传输安全，整体流程？（SSL如何工作保证安全）"></a>21、HTTPS如何保证数据传输安全，整体流程？（SSL如何工作保证安全）</h2><ol><li><p>客户端向服务器端发起SSL连接请求</p></li><li><p>服务器把公钥发送给客户端，并且服务器端保存着唯一的私钥</p></li><li><p>客户端用公钥对双方通信的对称秘钥进行加密，并发送给服务器端</p></li><li><p>服务器利用自己唯一的私钥对客户端发来的对称秘钥进行解密</p></li><li><p>进行数据传输，服务器和客户端双方用共有的相同的对称秘钥对数据进行加密解密，可以保证数据在收发过程中的安全，即使第三方获得数据包也无法加密解密篡改等。</p></li></ol><p>由于数字签名、摘要是证书方位非常关键的武器。<br>“摘要”就是对传输的内容，通过hash算法计算出一段固定长度的串。<br>然后通过发送方的私钥对这段摘要进行加密，加密后得到的结果就是“数字签名”</p><p>SSL&#x2F;TLS协议的基本思路是采用公钥加密法，即客户端先向服务器端索要公钥，然后用公钥加密信息，服务器收到密文后，用自己的私钥解密。</p><blockquote><p>补充：SSL&#x2F;TLS四次握手，现在TLS 1.2已经成为主流，使用ECDHE算法。</p></blockquote><hr><h2 id="22、如何保证公钥不被篡改？"><a href="#22、如何保证公钥不被篡改？" class="headerlink" title="22、如何保证公钥不被篡改？"></a>22、如何保证公钥不被篡改？</h2><p>将公钥放在数字证书中。只要证书可信，公钥就是可信的。</p><p>公钥加密计算量太大，如何减少耗用时间？<br>每一次对话（session），客户端和服务器端都生成一个“对话秘钥”（Session key），用它加密信息。</p><p>由于“对话秘钥”是对称加密，所以运算速度非常快，服务器公钥只用于加密“对话秘钥”本身，即减少了加密运算的消耗时间。</p><ol><li><p>客户端向服务器端索要并验证公钥</p></li><li><p>双方协商生成“对话秘钥”【以上两步，即“握手阶段”（handshake）】</p></li><li><p>双方采用“对话秘钥”进行加密通信</p></li></ol><hr><h2 id="23、HTTP请求和响应报文有哪些字段？"><a href="#23、HTTP请求和响应报文有哪些字段？" class="headerlink" title="23、HTTP请求和响应报文有哪些字段？"></a>23、HTTP请求和响应报文有哪些字段？</h2><ul><li><p>请求报文：</p><ul><li>请求行 ： Request Line</li><li>请求头 ： Request Headers</li><li>请求体 ： Request Body</li></ul></li><li><p>响应报文：</p><ul><li>状态行 ： Status Line</li><li>响应头 ： Response Headers</li><li>响应体 ： Response Body</li></ul></li></ul><hr><h2 id="24、Cookie是什么"><a href="#24、Cookie是什么" class="headerlink" title="24、Cookie是什么"></a>24、Cookie是什么</h2><p>HTTP协议是<b>无状态</b>的，主要是为了让HTTPS协议尽可能简单，时期能处理大量事物<br>HTTP&#x2F;1.1 引入 Cookie 来保存状态信息。</p><p>Cookie 是<b>服务器发送到用户浏览器并保存在本地的一小块数据</b>，它会在浏览器之后向同一服务器再次发送请求时被携带上，用于告知服务端两个请求是否来自统一浏览器。<br>由于之后每次请求都会需要携带Cookie数据，因此会带来额外性能开销（特别移动环境下）</p><p>Cookie 曾一度用于客户端数据的存储，因为当时并没有其他合适的存储办法而作为唯一的存储手段，但技术更新的背景下，Cookie逐渐被淘汰。</p><p>新的浏览器 API 已经允许开发者直接将数据存储到本地，如使用 Web storage API（本地存储和会话存储）或IndexedDB</p><p>由于HTTP无状态，服务器不知道你之前的信息，让你再次发送请求时，服务器能通过Cookie认识你</p><blockquote><p>Cookie 可认为是一种【变量】，形如name &#x3D; value，存储在浏览器<br>Session 可认为是一种【数据结构-映射】（键值对），存储在服务器</p></blockquote><hr><h2 id="25、Cookie用途？"><a href="#25、Cookie用途？" class="headerlink" title="25、Cookie用途？"></a>25、Cookie用途？</h2><ul><li><p>会话状态管理（如用户登录状态、购物车、游戏分数或其他需要记录的信息）</p></li><li><p>个性化设置（如用户自定义设置、主题等）</p></li><li><p>浏览器行为跟踪（如跟踪分析用户行为等）</p></li></ul><hr><h2 id="26、Session知识总结"><a href="#26、Session知识总结" class="headerlink" title="26、Session知识总结"></a>26、Session知识总结</h2><blockquote><p>Cookie 可以将用户信息存储在用户浏览器中<br>Session 可以将用户信息存储在客户端（更加安全）</p></blockquote><p>Session可以存储在服务器上的文件、数据库或内存中。<br>可以将Session存储在Redis这种内存性数据库中，效率更高。</p><p>使用Session维护用户登录状态过程如下：</p><ol><li><p>用户进行登录时，用户提交包含用户名和密码的表单，放入HTTP请求报文中；</p></li><li><p>服务器验证该用户名和密码，如果正确则把用户信息存储到Redis中，它在Redis中的Key称为Session ID；</p></li><li><p>服务器返回的响应报文的 Set-Cookie 首部字段包含了这个Session ID，客户端收到响应报文后将该Cookie存入浏览器中。</p></li><li><p>客户端之后对同一个服务器进行请求时会包含该Cookie值，服务器收到之后提取出Session ID，从Redis中取出用户信息，继续之前的业务操作。</p></li></ol><blockquote><p>注意，Session ID的安全性问题，有时候要重新生成，或者重新验证等。</p></blockquote><hr><h2 id="27、Session-的工作原理？"><a href="#27、Session-的工作原理？" class="headerlink" title="27、Session 的工作原理？"></a>27、Session 的工作原理？</h2><p>客户端登录完成后，服务器创建对应的session，session创建完后，会把Session ID发送给客户端，客户端再存储到浏览器中</p><h2 id="客户端每次访问服务器时都带着Session-ID，服务器拿到Session-ID后，在内存中找到对应Session即可"><a href="#客户端每次访问服务器时都带着Session-ID，服务器拿到Session-ID后，在内存中找到对应Session即可" class="headerlink" title="客户端每次访问服务器时都带着Session ID，服务器拿到Session ID后，在内存中找到对应Session即可"></a>客户端每次访问服务器时都带着Session ID，服务器拿到Session ID后，在内存中找到对应Session即可</h2><h2 id="28、Cookie和Session的对比"><a href="#28、Cookie和Session的对比" class="headerlink" title="28、Cookie和Session的对比"></a>28、Cookie和Session的对比</h2><p>HTTP作为无状态协议，必然需要存在某种方式保持连接状态。简要介绍Cookie和Session</p><ul><li><p>Cookie：<br>Cookie是<b>客户端<b>保持状态的方法</p><p>Cookie简单的理解即：存储由服务器发往客户端并由客户端保存的一段字符串。<br>为了保持会话，服务器可以在相应客户端请求时将Cookie字符串放在Set-Cookie下，客户机收到之后保存这个字符串，下次请求带上Cookie就可以被识别</p><p>除此之外，Cookie在客户端的保存形式可以有：</p><ol><li>会话Cookie：将服务器返回的Cookie字符串保存在内存中，关闭浏览器之后自动销毁</li><li>持久Cookie：存储在客户端磁盘上，有效时间在服务器响应头中被指定，有效期内，客户端再次请求服务器时直接从本地取出。<br>        存储在磁盘中的Cookie是可以被多个浏览器代理共享的。</li></ol></li><li><p>Session<br>Session是<b>服务器</b>保持状态的方法</p><p>Session保存在服务器上，可以在数据库、文件或内存中<br>每个用户有独立的Session用户，其在客户端上记录用户的操作。</p><p>理解为：每个用户有独一无二个Session ID作为Session文件的Hash键，通过该值可以锁定具体的Session结构的数据，这个Session结构中存储了用户操作行为</p></li></ul><p>当服务器需要识别客户端时，需要结合Cookie。<br>每次HTTP请求时，客户端都会发送相应的Cookie信息到服务端。<br>实际上大多数应用都是可以用Cookie来实现Session跟踪的</p><p>第一次创建Session时，服务端会在HTTP协议中高速客户端，需要Set-Cookie记录一个Session ID<br>      然后每次请求会把这个Session ID发送到服务器，服务器就能识别客户</p><p>如果客户端浏览器禁用了Cookie，会使用一种叫做URL重写的技术进行会话跟踪<br>    即每次HTTP交互，URL后面都会被附加上一个例如：Sid &#x3D; xxxx 的参数，服务器以此来识别用户，可以帮用户完成注入用户信息自动填入等操作。</p><hr><h2 id="29、SQL注入攻击？"><a href="#29、SQL注入攻击？" class="headerlink" title="29、SQL注入攻击？"></a>29、SQL注入攻击？</h2><p>攻击者在HTTP请求中注入恶意的SQL代码，服务器使用参数构建数据库SQL命令时，恶意SQL被一起构造，并在数据库中执行</p><p>防范SQL注入攻击 —— 使用预编译的PrepareStatement<br>Web端：</p><ol><li>有效性检验</li><li>限制字符串输入长度</li></ol><p>服务端：</p><ol><li><p>不用拼接SQL字符串</p></li><li><p>使用预编译的PrepareStatement</p></li><li><p>有效性检验（服务端有效性检验：第一准则，外部都是不可信的，防止攻击者绕过Web端请求）</p></li><li><p>过滤SQL需要的参数中的特殊字符，比如单引号、双引号</p></li></ol><hr><h2 id="30、网络的七层模型和各自功能"><a href="#30、网络的七层模型和各自功能" class="headerlink" title="30、网络的七层模型和各自功能"></a>30、网络的七层模型和各自功能</h2><h2 id="略"><a href="#略" class="headerlink" title="略"></a>略</h2><h2 id="31、什么是RARP？工作原理"><a href="#31、什么是RARP？工作原理" class="headerlink" title="31、什么是RARP？工作原理"></a>31、什么是RARP？工作原理</h2><p>概括：反向地址转换协议，网络层协议<br>ARP：从IP地址返回物理地址<br>RARP：从物理地址返回IP地址 —— 应答包括能提供所需信息的RARP服务器发出的IP地址。</p><p>原理：</p><ol><li><p>网络上的每台设备都有一个独一无二的硬件地址，通常是由设备厂商分配的MAC地址。<br>主机从网卡上读取MAC地址，然后在网络上发送一个RARP请求的广播数据包，请求RARP服务器回复该主机的IP地址</p></li><li><p>RARP服务器收到了RARP请求数据包，为其分配IP地址，并将RARP回应发送给主机</p></li><li><p>PC1收到RARP回应后，就使用得到的IP地址进行通讯。</p></li></ol><hr><h2 id="32、端口有效范围？"><a href="#32、端口有效范围？" class="headerlink" title="32、端口有效范围？"></a>32、端口有效范围？</h2><p>0-1023是知名端口号，其中HTTP是80，FTP是20（数据端口）、21（控制端口）</p><p>UDP和TCP报头使用两个字节存放端口号，所以端口号有效范围是0-65536.<br>动态端口的范围是1024-65535</p><hr><h2 id="33、为何要将TCP-x2F-IP协议栈分层？"><a href="#33、为何要将TCP-x2F-IP协议栈分层？" class="headerlink" title="33、为何要将TCP&#x2F;IP协议栈分层？"></a>33、为何要将TCP&#x2F;IP协议栈分层？</h2><p>ARPANET的研制经验表明，对于复杂的计算机网络协议，其结构应该是层次性的。<br>分层好处：</p><ol><li><p>各层之间独立</p></li><li><p>灵活性好</p></li><li><p>结构上可以分开</p></li><li><p>易于实现和维护</p></li><li><p>能促进标准化工作</p></li></ol><hr><h2 id="34、DNS查询方式？"><a href="#34、DNS查询方式？" class="headerlink" title="34、DNS查询方式？"></a>34、DNS查询方式？</h2><ul><li><p>递归查询</p></li><li><p>迭代查询</p></li></ul><hr><h2 id="35、HTTP中缓存的私有和公有字段？"><a href="#35、HTTP中缓存的私有和公有字段？" class="headerlink" title="35、HTTP中缓存的私有和公有字段？"></a>35、HTTP中缓存的私有和公有字段？</h2><p>private指令规定了将资源作为私有缓存，只能被单独用户使用，一般存储在用户浏览器中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control : private</span><br></pre></td></tr></table></figure><p>public指令规定了将资源作为公共缓存，可以被多个用户使用，一般存储在代理服务器中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control : public</span><br></pre></td></tr></table></figure><hr><h2 id="36、GET方法参数写法固定的吗？"><a href="#36、GET方法参数写法固定的吗？" class="headerlink" title="36、GET方法参数写法固定的吗？"></a>36、GET方法参数写法固定的吗？</h2><p>在约定中，参数写在?后面，用&amp;分割。</p><p>解析报文的过程是通过获取TCP数据，用正则等工具从数据中获取Header和Body，从而提取参数。</p><p>比如header请求头添加token，来验证用户是否登录等权限问题</p><h2 id="即：我们可以自己约定参数的写法，只要服务端能解释出来即可"><a href="#即：我们可以自己约定参数的写法，只要服务端能解释出来即可" class="headerlink" title="即：我们可以自己约定参数的写法，只要服务端能解释出来即可"></a>即：我们可以自己约定参数的写法，只要服务端能解释出来即可</h2><h2 id="37、GET方法的长度限制？"><a href="#37、GET方法的长度限制？" class="headerlink" title="37、GET方法的长度限制？"></a>37、GET方法的长度限制？</h2><p>网络上都会提到浏览器地址栏输入的参数是有限的。</p><p>虽然HTTP协议没有Body和URL的长度限制，对URL限制的大多是浏览器和服务器；</p><p>浏览器原因：</p><h2 id="服务器原因：处理长URL要消耗较多资源，为了性能和安全（防止恶意构造长URL来攻击）考虑，会给URL长度加限制。"><a href="#服务器原因：处理长URL要消耗较多资源，为了性能和安全（防止恶意构造长URL来攻击）考虑，会给URL长度加限制。" class="headerlink" title="服务器原因：处理长URL要消耗较多资源，为了性能和安全（防止恶意构造长URL来攻击）考虑，会给URL长度加限制。"></a>服务器原因：处理长URL要消耗较多资源，为了性能和安全（防止恶意构造长URL来攻击）考虑，会给URL长度加限制。</h2><h2 id="38、POST方法比GET方法安全？"><a href="#38、POST方法比GET方法安全？" class="headerlink" title="38、POST方法比GET方法安全？"></a>38、POST方法比GET方法安全？</h2><p>从传输角度而言，都不安全。<br>因为HTTP在网络上都使明文传输的，只要在网络节点上抓包就可以截获报文。</p><h2 id="想要安全传输，只有加密，即HTTPS"><a href="#想要安全传输，只有加密，即HTTPS" class="headerlink" title="想要安全传输，只有加密，即HTTPS"></a>想要安全传输，只有加密，即HTTPS</h2><h2 id="39、POST方法产生两个TCP数据包？"><a href="#39、POST方法产生两个TCP数据包？" class="headerlink" title="39、POST方法产生两个TCP数据包？"></a>39、POST方法产生两个TCP数据包？</h2><p>POST会将Header和Body分开发送，先发送header，服务端返回<code>100状态码</code>再发送body。</p><p>HTTP协议中没有明确说明POST会产生两个TCP数据包<br>经过实际测试（Chrome）发现，header和body不会分开发送</p><h2 id="综上所述：header和body分开发送是部分浏览器或框架的请求方法，不属于post必然行为。"><a href="#综上所述：header和body分开发送是部分浏览器或框架的请求方法，不属于post必然行为。" class="headerlink" title="综上所述：header和body分开发送是部分浏览器或框架的请求方法，不属于post必然行为。"></a>综上所述：header和body分开发送是部分浏览器或框架的请求方法，不属于post必然行为。</h2><h2 id="40、Session是什么？-——-参见条目26"><a href="#40、Session是什么？-——-参见条目26" class="headerlink" title="40、Session是什么？ —— 参见条目26"></a>40、Session是什么？ —— 参见条目26</h2><h2 id="略-1"><a href="#略-1" class="headerlink" title="略"></a>略</h2><h2 id="41、使用Session的过程-——-参见条目26-x2F-27"><a href="#41、使用Session的过程-——-参见条目26-x2F-27" class="headerlink" title="41、使用Session的过程 —— 参见条目26&#x2F;27"></a>41、使用Session的过程 —— 参见条目26&#x2F;27</h2><h2 id="略-2"><a href="#略-2" class="headerlink" title="略"></a>略</h2><h2 id="42、Session和Cookie应该如何选择（适用场景）？"><a href="#42、Session和Cookie应该如何选择（适用场景）？" class="headerlink" title="42、Session和Cookie应该如何选择（适用场景）？"></a>42、Session和Cookie应该如何选择（适用场景）？</h2><ul><li><p>Cookie 只能存储ASCII码字符串，而Session则可以存储任何类型的数据，因此在考虑数据复杂性时首选Session；</p></li><li><p>Cookie存储在浏览器，容易被恶意查看。<br>如果非要将一些隐私数据存入Cookie中，可以将Cookie值进行加密，然后在服务器解密</p></li><li><p>对于大型网站，如果用户所有的信息都存储在Session中，那么开销非常大，因此不建议将所有用户的信息都存储到Session中。</p></li></ul><hr><h2 id="43、Cookie和Session的区别？"><a href="#43、Cookie和Session的区别？" class="headerlink" title="43、Cookie和Session的区别？"></a>43、Cookie和Session的区别？</h2><p>  Cookie和Session都是客户端与服务器之间保持状态的解决方案</p><ol><li><p>存储的位置不同，<br>cookie ： 存放在客户端<br>session： 存放在服务端，Session存储的数据比较安全</p></li><li><p>存储的数据类型不同，两者都是key-value类型，但针对value的类型有差异<br>cookie ： value只能是字符串类型<br>session： value是Object类型</p></li><li><p>存储的数据大小限制不同，<br>cookie ： 大小受浏览器限制，最多是4K大小<br>session： 理论上受当前内存限制</p></li><li><p>生命周期的控制，<br>cookie ： cookie的生命周期是累计的，从创建时开始计时，20分钟后，cookie生命周期结束<br>session： session的生命周期是间隔的，从创建开始计时，如在20分钟没访问session，则生命周期被销毁</p></li></ol><hr><h2 id="44、DDos攻击？"><a href="#44、DDos攻击？" class="headerlink" title="44、DDos攻击？"></a>44、DDos攻击？</h2><p>客户端向服务器发送请求链接数据包，服务端向客户端发送确认数据包，客户端不向服务端发送确认数据包，服务器一直等待来自客户端的确认<br>没有彻底根治办法，除非不用TCP</p><p>DDos预防：</p><ol><li><p>限制同时打开SYN半链接的数目</p></li><li><p>缩短SYN半链接的Time out时间</p></li><li><p>关闭不必要的服务</p></li></ol><hr><h2 id="45、MTU和MSS分别是什么？"><a href="#45、MTU和MSS分别是什么？" class="headerlink" title="45、MTU和MSS分别是什么？"></a>45、MTU和MSS分别是什么？</h2><p>MTU：Maximum transmission unit，最大传输单元，由硬件规定，如以太网的MTU为1500字节。</p><p>MSS：Maximum segment size，最大分节大小，为<b>TCP数据包每次传输的最大数据分段</b>大小，一般由发送端向对端TCP通知对端在每分节中能发送的最大TCP数据。<br>MSS值为MTU减去 IPv4 Header（20 Byte）和TCP header（20 Byte）得到。</p><hr><h2 id="46、HTTP中缓存机制，如何保证缓存最新？"><a href="#46、HTTP中缓存机制，如何保证缓存最新？" class="headerlink" title="46、HTTP中缓存机制，如何保证缓存最新？"></a>46、HTTP中缓存机制，如何保证缓存最新？</h2><p>max-age 指令出现在请求报文，并且缓存资源的缓存时间小于该指令指定的时间，那么就能接受该缓存</p><p>max-age 指令出现在响应报文，表示缓存资源在缓存服务器中保存的时间。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control: max-age = 31536000</span><br></pre></td></tr></table></figure><p>Expires 首部字段也可以用于告知缓存服务器该资源什么时候会过期。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Expires: Wed, 04 Jul 2012 08:26:05 GMT</span><br></pre></td></tr></table></figure><ul><li>在 HTTP&#x2F;1.1中，会优先处理max-age指令</li><li>在 HTTP&#x2F;1.0中，max-age指令会被忽略掉</li></ul><hr><h2 id="47、TCP头部中有哪些信息？"><a href="#47、TCP头部中有哪些信息？" class="headerlink" title="47、TCP头部中有哪些信息？"></a>47、TCP头部中有哪些信息？</h2><ul><li><p>序号（32bit）：传输方向上字节流的字节编号。<br>初始时序号会被设置一个随机的初始值（ISN），之后每次发送数据时，序号值 &#x3D; ISN + 数据在整个字节流中的位移。<br>假设 A-&gt;B 且ISN &#x3D; 1024，<br>第一段数据512字节已经到B，则第二端数据发送时序号为1024+512。用于解决网络包乱序问题。</p></li><li><p>确认号（32bit）：接收方对发送方TCP报文段响应，其值是收到的序号值 + 1。</p></li><li><p>首部长（4bit）：标识首部有多少个4字节*首部长，最大为15，即60字节。</p></li><li><p>标志位（6bit）：</p><ul><li><p>URG：紧急指针是否有效</p></li><li><p>ACK：确认号是否有效（确认报文段），解决丢包问题</p></li><li><p>PSH：提示接收端立即从缓冲读走数据</p></li><li><p>RST：标识要求对方重新建立连接（复位报文段）。</p></li><li><p>SYN：标识请求建立一个连接（连接报文段）。</p></li><li><p>FIN：标识关闭连接（断开报文段）。</p></li></ul></li><li><p>窗口（16bit）：接收窗口，用于告知对方（发送方）本方的缓冲还能接收多少字节数据，【流量控制】</p></li><li><p>校验和（16bit）：接收端用CRC检验整个报文段有无损坏。</p></li></ul><hr><h2 id="48、常见的TCP连接状态？"><a href="#48、常见的TCP连接状态？" class="headerlink" title="48、常见的TCP连接状态？"></a>48、常见的TCP连接状态？</h2><ul><li><p>CLOSED：初始状态</p></li><li><p>LISTEN：服务器处于监听状态</p></li><li><p>SYN_SEND：客户端socket执行CONNECT连接，发送SYN包，进入此状态</p></li><li><p>SYN_RECV：服务端收到SYN包并发送服务端SYN包，进入此状态。</p></li><li><p>ESTABLISH：表示连接建立。客户端发送了最后一个ACK包进入此状态，服务器接收到ACK包后进入此状态。</p></li><li><p>FIN_WAIT_1：<b>终止连接的一方</b>（通常是客户机）发送了FIN报文后进入，等待对方FIN。</p></li><li><p>CLOSE_WAIT：（假设服务器）接收到客户机FIN包后等待关闭的阶段，在接收到对方的FIN包之后，自然需要立即回复ACK包的，表示已经知道断开请求<br>        但是本方是否立即断开（发送FIN包）取决于是否还有数据要发送给客户端，若有，则在发送FIN包之前均为此状态。【关闭之前发送完数据】</p></li><li><p>FIN_WAIT_2：此时是半链接状态，即有一方要求关闭连接，等待另一方关闭。<br>        客户端接收到服务器的ACK包，但并没有立即接收到服务端的FIN包，进入FIN_WAIT_2状态。</p></li><li><p>LAST_ACK：服务器发动最后的FIN包，等待最后的客户端ACK相应，进入此状态。</p></li><li><p>TIME_WAIT：客户端收到服务端的FIN包，并立即发出ACK包做最后的确认，再次之后的2MSL时间称为TIME_WAIT状态。</p></li></ul><hr><h2 id="49、网络的七层-x2F-五层协议有哪些？"><a href="#49、网络的七层-x2F-五层协议有哪些？" class="headerlink" title="49、网络的七层&#x2F;五层协议有哪些？"></a>49、网络的七层&#x2F;五层协议有哪些？</h2><img src="/2022/02/25/network/OSI-1.png" class=""><hr><h2 id="50、TCP？"><a href="#50、TCP？" class="headerlink" title="50、TCP？"></a>50、TCP？</h2><p>TCP（Transmission Control Protocol 传输控制协议）<br>面向连接、可靠的、基于字节流的传输层通信协议。</p><hr><h2 id="51、TCP头部报文字段？各自功能？"><a href="#51、TCP头部报文字段？各自功能？" class="headerlink" title="51、TCP头部报文字段？各自功能？"></a>51、TCP头部报文字段？各自功能？</h2><ul><li><p>源端口和目的端口<br> source port ： 源端口号【本地端口】<br> destination port ： 目的端口号【远程端口】</p><blockquote><p>扩展：应用程序所在主机的IP和应用程序的端口号统称为socket（套接字） —— IP:端口号<br>在互联网上，是一个socket唯一标识一个应用程序<br>源端口 + IP + 目的端口 + 目的IP 称为“套接字对”，一对套接字就是一个连接，一个客户端与服务器之间的连接</p></blockquote></li><li><p>序列号<br> 序列号。<br> 用于TCP通信过程中某一传输方向上字节流的每个字节的编号，为了确保数据通信有序性，避免网络中乱序问题。<br> 接收端根据这个编号进行确认，保证分割的数据段在原始数据包的位置。<br> 初始序列号由自己定，后续的序列号由对端ACK决定：SN_x &#x3D; ACK_y（x的序列号 &#x3D; y发送给x的ACK）</p></li><li><p>ACK确认序列号<br> 确认序列号。<br> 接收确认端期望收到的下一序列号。<br> 确认序号应当是上次已成功收到的数据字节序号加1，只有当标志位中的ACK标志位1时，该确认序列号的字段才有效<br> 解决不丢包问题。</p></li><li><p>TCP Flag<br> TCP首部中有6个标志比特，他们中的多个可同时被设置为1，主要是用来控制TCP状态的<br> 有：<code>URG、ACK、PSH、RST、SYN、FIN</code></p><ol><li><p>ACK：理解为发送端发送数据到接收端，发送时ACK为0，标识接收端还未应答，一旦接收端接收数据之后，就将ACK置为1<br> 发送端接收之后，就知道接收端已经接收到了数据。</p></li><li><p>SYN：表示【同步序列号】，是TCP握手发送的第一个数据包。用来建立TCP连接<br> SYN标志和ACK标志位搭配使用<br> 当连接请求时，SYN &#x3D; 1, ACK &#x3D; 0<br> 当连接相应时，SYN &#x3D; 1, ACK &#x3D; 1<br> 这个标志的数据报经常被用来进行端口扫描。扫描者发送一个只有SYN的数据包，如果对方主机响应了一个数据包回来，就表明该主机存在端口</p></li><li><p>FIN：表示发送端已经达到数据末尾，也就是说双方数据传送完成，没有数据可以传送了<br> 发送FIN标志位的TCP数据报后，连接将被断开。<br> 这个标志位的数据报也经常被用于端口扫描。<br> 发送端只剩最后一段数据了，同时要告诉接收端后面没有数据可以接受了，所以用FIN标识一下，接收端看到FIN后，接受完就关闭了</p></li></ol></li><li><p>Windows Size 窗口大小<br> 滑动窗口大小，用于流量控制</p></li></ul><hr><h2 id="52、OSI的七层模型主要功能？"><a href="#52、OSI的七层模型主要功能？" class="headerlink" title="52、OSI的七层模型主要功能？"></a>52、OSI的七层模型主要功能？</h2><img src="/2022/02/25/network/OSI-2.png" class=""><ul><li><p>物理层：利用传输介质为数据链路层提供物理连接，实现比特流的透明传输</p></li><li><p>数据链路层：接收来自物理层的位流形式的数据，<b>封装成帧</b></p></li><li><p>网络层：网络地址翻译成对应物理地址，通过路由选择算法为分组通过通信子网选择最适合路径【分组转发】</p></li><li><p>传输层：在源端和目的端之间提供可靠的透明数据传输【TCP&#x2F;UPD】</p></li><li><p>会话层：负责在网络中两节点之间建立、维持和终止通信【建立会话】</p></li><li><p>表示层：处理用户信息的表示问题，数据编码、压缩解压缩、数据的加密和解密</p></li><li><p>应用层：为用户的应用进程提供网络通信服务。</p></li></ul><hr><h2 id="53、应用层常见协议？"><a href="#53、应用层常见协议？" class="headerlink" title="53、应用层常见协议？"></a>53、应用层常见协议？</h2><table><thead><tr><th align="left">协议</th><th align="left">名称</th><th align="left">默认端口</th><th align="left">底层协议</th></tr></thead><tbody><tr><td align="left">HTTP</td><td align="left">超文本传输协议</td><td align="left">80</td><td align="left">TCP</td></tr><tr><td align="left">HTTPS</td><td align="left">超文本传输安全协议</td><td align="left">443</td><td align="left">TCP</td></tr><tr><td align="left">Telnet</td><td align="left">远程登录服务的标准协议</td><td align="left">23</td><td align="left">TCP</td></tr><tr><td align="left">FTP</td><td align="left">文件传输协议</td><td align="left">20传输、21连接</td><td align="left">TCP</td></tr><tr><td align="left">TFTF</td><td align="left">简单文件传输协议</td><td align="left">69</td><td align="left">UDP</td></tr><tr><td align="left">SMTP</td><td align="left">简单邮件传输协议（发送用）</td><td align="left">25</td><td align="left">TCP</td></tr><tr><td align="left">POP</td><td align="left">邮局协议（接收用）</td><td align="left">110</td><td align="left">TCP</td></tr><tr><td align="left">DNS</td><td align="left">域名解析协议</td><td align="left">53</td><td align="left">服务器间进行域传输时候用TCP（更新信息）、客户端查询DNS时用UDP</td></tr></tbody></table><hr><h2 id="54、浏览器在与服务器建立了一个TCP连接后是否会在一个HTTP请求完成后断开？什么情况下会断开？"><a href="#54、浏览器在与服务器建立了一个TCP连接后是否会在一个HTTP请求完成后断开？什么情况下会断开？" class="headerlink" title="54、浏览器在与服务器建立了一个TCP连接后是否会在一个HTTP请求完成后断开？什么情况下会断开？"></a>54、浏览器在与服务器建立了一个TCP连接后是否会在一个HTTP请求完成后断开？什么情况下会断开？</h2><p>在 HTTP&#x2F;1.0 中，一个服务器在发送完一个HTTP响应后，会断开TCP链接。但这样每次请求都会重新建立和断开TCP链接，代价过大。</p><p>虽然标准中没有设定，某些服务器对<code>Connection: keep-alive</code>的<code>Header</code>进行了支持<br>也即：完成这个HTTP请求之后，不要断开HTTP请求使用的TCP连接。<br>好处是链接可以被重新使用，之后发送HTTP请求的时候不需要重新建立TCP连接，如果维持连接，SSL的开销也可避免。</p><p><b>持久连接</b>：既然维持TCP连接好处那么多，HTTP&#x2F;1.1就把Connection头写进标准，并且默认开启持久连接，除非请求中声明<code>Connection: close</code><br>那么浏览器和服务器之间会维持一段时间的TCP连接，不会一个请求结束后就断掉</p><h2 id="默认情况下建立TCP连接不会断开，只有在请求报头声明Connection-close才会在请求完成后关闭连接"><a href="#默认情况下建立TCP连接不会断开，只有在请求报头声明Connection-close才会在请求完成后关闭连接" class="headerlink" title="默认情况下建立TCP连接不会断开，只有在请求报头声明Connection: close才会在请求完成后关闭连接"></a>默认情况下建立TCP连接不会断开，只有在请求报头声明<code>Connection: close</code>才会在请求完成后关闭连接</h2><h2 id="55、三次握手相关内容"><a href="#55、三次握手相关内容" class="headerlink" title="55、三次握手相关内容"></a>55、三次握手相关内容</h2><img src="/2022/02/25/network/handshake.png" class=""><p>三次握手，指建立一个TCP连接时，需要客户端和服务器总共发送三个包</p><ol><li><p>SYN &#x3D; 1, seq &#x3D; client_seq</p></li><li><p>SYN &#x3D; 1, ACK &#x3D; 1, seq &#x3D; server_seq, ack &#x3D; client_seq + 1</p></li><li><p>ACK &#x3D; 1, seq &#x3D; client_seq + 1, ack &#x3D; server_seq + 1</p></li></ol><p>进行三次握手的主要作用就是为了</p><ul><li><p>确认双方的发送和接收能力是否正常</p></li><li><p>指定自己的初始化序列号为后面可靠性传输做准备</p></li></ul><p>实质上就是连接服务器指定端口，建立TCP连接，并同步连接双方的序列号和交换号，交换<code>TCP窗口大小</code>信息。</p><blockquote><p>初始状态：客户端处于<code>closed(关闭)</code>状态，服务器处于<code>listen(监听)</code>状态。<br>第一次握手：客户端发送请求报文将<code>SYN = 1, seq = x</code>，同步序列号及初始化序列号发送给服务端<br>           此后，客户端处于<code>SYN_SEND</code>状态（验证可客户端发送能力和服务器接收能力）<br>第二次握手：服务器收到<code>SYN</code>确认报文之后，如果同意连接，会以自己的同步序列号<code>SYN = 1, seq = y, ack = x + 1</code>，即初始化序列号、确认号报文应答<br>           此后，服务器处于<code>SYN_RECEIVE</code>状态（但是注意，此时客户端的发送能力得到确认，服务器发送和接收得到确认，但不知道客户端是否能接收）<br>第三次握手：客户端接收到服务器的<code>SYN + ACK</code>之后，知道可以下次发送下一序列的数据包了，然后发送<code>ACK = 1, seq = x + 1, ack = y + 1</code>应答<br>           此后客户端作为<code>ESTABLISHED</code>状态。（各自的发送和接受都OK）</p></blockquote><hr><h2 id="56、为什么要三次握手，两次不行？"><a href="#56、为什么要三次握手，两次不行？" class="headerlink" title="56、为什么要三次握手，两次不行？"></a>56、为什么要三次握手，两次不行？</h2><p>需要弄明白三次握手的目的是什么，能不能只用两次握手达到同样目的</p><ul><li><p>第一次握手：客户端发送数据包，服务器收到 —— 服务器得知：客户端发送能力、服务器接收能力正常。</p></li><li><p>第二次握手：服务器发送数据包，客户端收到 —— 客户端得知：客户端的发送、接收；服务器的发送、接收正常，但服务器不知道客户端的接收是否正常</p></li><li><p>第三次握手：客户端发送数据包，服务器收到 —— 服务器得知：客户端的发送、接收；服务器的发送、接收正常。</p></li></ul><p>因此，需要三次握手才能确认双方的发送和接收能力是否正常<br>若用两次握手，则可能：</p><blockquote><p>客户端发送连接请求，但连接请求报文丢失未收到确认，于是客户端再重传一次连接请求，后来收到了确认，建立了连接。<br>数据传输完毕后，释放了连接，客户端一共发出了两个连接请求报文段，其中第一个丢失，第二个到达了服务器</p><p>但第一个丢失的报文段只是<b>在某些网络节点长时间滞留了，延误到连接释放以后的某个时间才到达服务器</b><br>此时服务器误以为客户端又发出一次新的连接请求，于是向客户端发送确认报文段，同意建立连接。<br>不采用三次握手，即服务器发送确认就相当于建立了新的连接，但客户端忽略了服务器的该请求，不发送数据<br>服务器则一直等待客户端发送数据，浪费资源。</p></blockquote><hr><h2 id="57、什么是半连接队列？"><a href="#57、什么是半连接队列？" class="headerlink" title="57、什么是半连接队列？"></a>57、什么是半连接队列？</h2><p>服务器第一次收到客户端的SYN后，就会处于SYN_RCVD状态，此时双方还没有完全建立起连接，<br>服务器会把此种状态下请求连接放在一个<b>队列</b>里，该队列即<b>半连接队列</b>。</p><p>全连接队列：已经完成三次握手，建立起连接的就会放在全连接队列中。如果队列满了就有可能会出现丢包现象。</p><p>补充一点关于<b>SYN-ACK重传次数</b>的问题：<br>服务器发送完SYN-ACK包，如果未收到客户端确认包，服务器进行首次重传，等待一段时间仍未收到客户确认包，进行第二次重传。<br>如果重传次数超过系统规定的最大重传次数，系统将该连接信息从半连接队列中删除。<br>注意：每次等待时间不一定相同，一般指数增长，1&#x2F;2&#x2F;4&#x2F;8诸如此类</p><hr><h2 id="58、ISN（Initial-Sequence-Number）是固定的吗？"><a href="#58、ISN（Initial-Sequence-Number）是固定的吗？" class="headerlink" title="58、ISN（Initial Sequence Number）是固定的吗？"></a>58、ISN（Initial Sequence Number）是固定的吗？</h2><p>当一端为建立连接而发送SYN时，它为连接选择一个初始序号。<br>ISN随时间而变化，因此每个连接都将具有不同的ISN，ISN可以看做是一个32bit的计数器，但不是简单计数器，大概每4ms加1。</p><blockquote><p>ISN &#x3D; M + F（localhost, localport, remotehost, remoteport）（M为计数器），ISN应该由这个公式确定，F是哈希算法，不是简单计数器</p></blockquote><p>这样选择序号的目的在于防止在网络上被延迟的分组在以后又被传送，而导致某个连接的一方对它做错误的解释。</p><blockquote><p>三次握手的其中一个重要功能是客户端和服务器交换ISN，以便让对方知道接下来收到数据时如何按照序列号组装数据<br>若ISN固定，攻击者很容易猜出后续的序号，因此ISN要动态生成</p></blockquote><hr><h2 id="59、三次握手过程可以携带数据吗？"><a href="#59、三次握手过程可以携带数据吗？" class="headerlink" title="59、三次握手过程可以携带数据吗？"></a>59、三次握手过程可以携带数据吗？</h2><p>三次握手过程中，可以携带数据，但是，<b>只有第三次才可以携带数据</b></p><p>为什么要这样？<br>若第一次握手可以携带数据，若有人要恶意攻击服务器，则每次在第一次握手中的SYN报文中放入大量数据，就会让服务器花费很多资源去处理这些报文。</p><p>第一次握手中不可放入数据，否则会让服务器更加容易受到攻击。<br>第三次握手中，客户端已经处于ESTABLISHED状态。对于客户端来说，已经建立起连接了，也知道服务器的发送、接受能力正常，所以可以携带。</p><hr><h2 id="60、SYN攻击？"><a href="#60、SYN攻击？" class="headerlink" title="60、SYN攻击？"></a>60、SYN攻击？</h2><p><b>服务器端的资源分配是在第二次握手时分配的，客户端资源则是在第三次握手时分配的。</b>因此服务器很容易受到SYN泛洪攻击</p><p>SYN攻击就是Client在短时间内伪造大量不存在的IP地址，并向Server不断发送SYN包，Server则回复确认包，等待Client确认<br>由于源地址不存在，因此Server需要不断重发直至超时，这些伪造的SYN包将长时间占用未连接队列，导致正常的SYN请求因队满被丢弃，从而网络拥塞，系统瘫痪</p><blockquote><p>SYN 攻击是一种典型的DoS&#x2F;DDoS攻击。</p></blockquote><p>检测SYN攻击非常方便，但服务器上看到大量半连接状态时，特别源IP地址是随机的，基本上可以断定是SYN攻击。</p><p>在Linux&#x2F;Unix上可以使用系统自带的netstat命令检测SYN攻击。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -n -p TCP | grep SYN_RECV</span><br></pre></td></tr></table></figure><p>常见的防御 SYN 攻击的方法：</p><ul><li><p>缩短超时（SYN Timeout）时间</p></li><li><p>增加最大半连接数</p></li><li><p>过滤网关服务</p></li><li><p>SYN cookies技术</p></li></ul><hr><h2 id="61、四次挥手相关内容"><a href="#61、四次挥手相关内容" class="headerlink" title="61、四次挥手相关内容"></a>61、四次挥手相关内容</h2><img src="/2022/02/25/network/handshake4.png" class=""><p>建立一个连接需要三次握手，终止一个连接需要四次挥手（或称四次握手）<br>这由TCP的<b>半关闭(half-close)</b>造成的<br>半关闭，即TCP提供了连接的一端在结束它的发送后还能接收来自另一端数据的能力。</p><p>TCP的连接的拆除需要发送四个包，因此称为四次回收（Four-way handshake），客户端或服务器均可主动发起挥手动作。</p><ul><li><p>初始状态：客户端和服务器都在<code>ESTABLISHED（连接状态）</code>下，接下来进行四次挥手断开连接操作。</p></li><li><p>第一次挥手：事实上，客户端和服务器都可以主动终止连接，此处假设客户端先终止链接。<br>       客户端发送一个FIN报文，报文中会指定一个序列号。此时客户端处于<code>FIN_WAIT1</code>状态。<br>       即发送<b>链接释放报文</b>，<code>FIN=1, seq = u</code>，并停止再发送数据，主动关闭TCP链接，进入<code>FIN_WAIT1（终止等待1）</code>状态。</p></li><li><p>第二次挥手：服务器收到FIN之后，发送ACK报文，并把客户端序列号值+1作为ACK报文的ack值，表明收到，此时客户端处于<code>CLOSE_WAIT</code>状态<br>       即发送<b>确认报文段</b>，<code>ACK=1, seq = v, ack = u+1</code>，服务端进入<code>CLOSE_WAIT（关闭等待）</code>状态<br>       此时TCP处于半关闭状态<br>       客户端到服务端的连接释放。客户端收到服务器的确认后，进入<code>FIN_WAIT2（终止等待2）</code>状态，等待服务器发出的连接释放报文段</p></li><li><p>第三次挥手：服务器收到了客户端的连接释放请求，然而服务器可能还有未传输完毕的数据，则还需要发送消息，并主动断连<br>       服务器也想断开连接，和客户端第一次挥手一样，发送FIN报文，且指定一个序列号，服务器进入<code>LAST_ACK（最后确认）</code>状态。<br>       即服务端没有要向客户端发出的数据，服务器发出<b>连接释放报文段</b>，<code>FIN=1, ACK=1, seq = w, ack = u+1</code><br>       服务器进入<code>LAST_ACK</code>状态，等待客户端确认。</p></li><li><p>第四次挥手：客户端收到FIN之后，一样发送一个ACK报文作为应答，且把服务器序列号值+1作为自己ACK报文的确认号，此时客户端处于<code>TIME_WAIT</code>状态<br>       需要过一阵子以确保服务端收到自己的ACK报文之后才会进入CLOSED状态（自己最后的ACK报文段可能出差错到不了服务器）<br>       服务器收到ACK报文之后，就处于关闭连接了，即<code>CLOSED</code>状态。<br>       即客户端收到服务器的链接释放报文后，向其发送<b>确认报文段</b><code>ACK = 1, seq = u + 1, ack = w + 1</code>，客户端进入<code>TIME_WAIT（时间等待）</code>状态。<br>       此时TCP未释放掉，要经过事件等待计时器设置的时间2MSL之后，客户端才进入CLOSED状态。</p></li></ul><p>收到一个FIN只意味着在这一个方向上没有数据流动。<br>客户端执行主动关闭并进入TIME_WAIT是正常的，服务端通常执行被动关闭，不会进入TIME_WAIT状态。</p><h2 id="在socket-编程中，任何一方执行close-操作即可产生挥手动作。"><a href="#在socket-编程中，任何一方执行close-操作即可产生挥手动作。" class="headerlink" title="在socket()编程中，任何一方执行close()操作即可产生挥手动作。"></a>在socket()编程中，任何一方执行close()操作即可产生挥手动作。</h2><h2 id="62、挥手为什么要四次？"><a href="#62、挥手为什么要四次？" class="headerlink" title="62、挥手为什么要四次？"></a>62、挥手为什么要四次？</h2><p>因为当服务器收到客户端的SYN连接请求报文后，可以直接发送SYN+ACK报文。<br>其中ACK报文是用来应答的，SYN报文是用来同步的。</p><p>但是关闭连接时，当服务器收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉客户端“收到FIN请求”</p><h2 id="但服务器也可能要发送自己的数据，只有当服务器数据也发送完毕，服务器才能发送FIN报文，因此不能一起发送，故四次挥手。"><a href="#但服务器也可能要发送自己的数据，只有当服务器数据也发送完毕，服务器才能发送FIN报文，因此不能一起发送，故四次挥手。" class="headerlink" title="但服务器也可能要发送自己的数据，只有当服务器数据也发送完毕，服务器才能发送FIN报文，因此不能一起发送，故四次挥手。"></a>但服务器也可能要发送自己的数据，只有当服务器数据也发送完毕，服务器才能发送FIN报文，因此不能一起发送，故四次挥手。</h2><h2 id="63、2MSL等待状态？"><a href="#63、2MSL等待状态？" class="headerlink" title="63、2MSL等待状态？"></a>63、2MSL等待状态？</h2><p>TIME_WAIT状态也称为2MSL等待状态</p><p>每个具体TCP必须选择一个报文段最大生存时间MSL（Maximum Segment Lifetime），它是任何报文段被丢弃前在网络内的最长时间。<br>这个时间是有限的，因为TCP报文段以IP数据包在网络内传输，而IP数据包则有限制其生存时间的TTL字段。</p><p>对一个具体实现所给定的MSL值，处理的原则是：当TCP执行一个主动关闭，并发回最后一个ACK，该连接必须在TIME_WAIT状态停留时间的2倍的MSL。<br>这样可让TCP再次发送最后的ACK以防这个ACK丢失（另一端超时并重发最后的FIN）</p><p>另一个结果：TCP连接在2MSL等待期间，定义这个连接的接口（客户的IP地址和端口号，服务器的IP地址和端口号）不能再被使用。<br>该连接只能在2MSL结束后才能再被使用。</p><ol><li>防止自己的FIN_ACK丢失</li><li>可以阻塞其他该端口上的连接</li></ol><hr><h2 id="64、四次挥手释放连接时，等待2MSL的意义？"><a href="#64、四次挥手释放连接时，等待2MSL的意义？" class="headerlink" title="64、四次挥手释放连接时，等待2MSL的意义？"></a>64、四次挥手释放连接时，等待2MSL的意义？</h2><blockquote><p>MSL（Maximum Segment Lifetime）最长报文段寿命，任何报文在网络上存在的最长时间，超过这个时间报文将被丢弃。</p></blockquote><p>为了保证客户端发送的最后一个ACK报文能到达服务器，因为这个ACK有可能丢失，从而导致处在LAST_ACK状态的服务器接收不到最后的FIN_ACK确认报文。<br>服务器会超时重传这个FIN_ACK，接着客户端再重传一次确认，重新启动时间等待计时器。</p><p>最后客户端和服务器都能正常关闭，若服务器不等待2MSL，而是发送ACK后直接释放关闭，一旦这个ACK丢失，服务器无法正常进入关闭连接状态。</p><ol><li><p>确保客户端发送的最后一个ACK能够到达服务器。该报文段可能丢失，使得LAST_ACK接收不到FIN_ACK报文段确认，服务器超时重传该FIN_ACK。<br>若不等待，可能报文段丢失时再接到了FIN_ACK报文段确认。</p></li><li><p>防止“已经失效的连接请求报文段”出现在本连接中。客户端在发送完最后一个ACK后，经过2MSL，旧的报文段都会从网络中消失。<br>新的连接中不会收到旧连接请求报文段。</p></li><li><p>阻塞其他该端口通信。</p></li></ol><hr><h2 id="65、为什么TIME-WAIT状态要经过2MSL才能返回CLOSED状态？"><a href="#65、为什么TIME-WAIT状态要经过2MSL才能返回CLOSED状态？" class="headerlink" title="65、为什么TIME_WAIT状态要经过2MSL才能返回CLOSED状态？"></a>65、为什么TIME_WAIT状态要经过2MSL才能返回CLOSED状态？</h2><p>网络可能不可靠，TIME_WAIT状态用来重发可能丢失的最后一个ACK报文。</p><p>客户端给服务器发送的ACK &#x3D; 1丢失，服务器会再发一次，若客户端收到重发，说明之前的包丢失，要重启计时器，并在此发送确认请求。<br>若接下来再无服务器信息，说明已收到确认，双方都关闭连接。</p><hr><h2 id="66、TCP粘包问题？如何解决？"><a href="#66、TCP粘包问题？如何解决？" class="headerlink" title="66、TCP粘包问题？如何解决？"></a>66、TCP粘包问题？如何解决？</h2><p>TCP粘包是指发送方发送的若干包数据到接收方接收时粘成一个包<br>从接收缓冲区来看，后一个数据包的数据头紧紧连着前一个数据包的数据尾</p><ul><li><p>由TCP连接复用造成的粘包问题</p></li><li><p>因为TCP默认使用Nagle算法，此算法导致粘包问题。</p><ul><li>只有上一个分组得到确认，才会发送下一个小组</li><li>收集多个小分组，在一个确认到来时一起发送</li></ul></li><li><p>数据包过大造成的粘包问题。</p></li><li><p>流量控制，拥塞控制也可能导致粘包。</p></li><li><p>接收方不及时接收缓冲区的包，造成多个包接收</p></li></ul><p>解决：</p><ol><li><p>Nagle算法问题导致的，要结合应用场景适当关闭该算法</p></li><li><p>尾部标记序列。通过特殊标识符表示数据边界，例如\n\t\r或特殊字符</p></li><li><p>头部标记分步接收。在TCP报文头部加上表示数据长度。</p></li><li><p>应用层发送数据时定长发送</p></li></ol><hr><h2 id="67、OSI七层模型表示层和会话层功能？"><a href="#67、OSI七层模型表示层和会话层功能？" class="headerlink" title="67、OSI七层模型表示层和会话层功能？"></a>67、OSI七层模型表示层和会话层功能？</h2><ul><li><p>表示层：图像、视频编码解码、数据加密。</p></li><li><p>会话层：建立会话，如Session认证、断点续传。</p></li></ul><hr><h2 id="68、三次握手四次回收变迁图"><a href="#68、三次握手四次回收变迁图" class="headerlink" title="68、三次握手四次回收变迁图"></a>68、三次握手四次回收变迁图</h2><hr><h2 id="69、对称秘钥加密的优点和缺点"><a href="#69、对称秘钥加密的优点和缺点" class="headerlink" title="69、对称秘钥加密的优点和缺点"></a>69、对称秘钥加密的优点和缺点</h2><p>对称秘钥加密（Symmetric-Key Encryption），加密和解密使用同一秘钥</p><ul><li>优点：运算速度快</li><li>缺点：无法安全地将秘钥传输给通信方</li></ul><hr><h2 id="70、非对称秘钥加密的优缺点？"><a href="#70、非对称秘钥加密的优缺点？" class="headerlink" title="70、非对称秘钥加密的优缺点？"></a>70、非对称秘钥加密的优缺点？</h2><p>非对称秘钥加密，即公开秘钥加密（Public-Key Encryption），加密和解密使用不同的密钥。</p><p>公开秘钥所有人都可以获得，通信发送方获得接收方的公开密钥之后，就可以使用公开秘钥进行加密，接收方收到通信内容后使用私有密钥解密。</p><p>非对称密钥除了用来加密，还可以用来进行签名。<br>因为私有秘钥无法被其他人获取，因此通信发送方使用其私有密钥进行签名，通信接收方使用发送方的公开密钥对签名进行解密，就能判断该签名是否正确。</p><hr><h2 id="71、HTTPS是什么？"><a href="#71、HTTPS是什么？" class="headerlink" title="71、HTTPS是什么？"></a>71、HTTPS是什么？</h2><p>HTTPS不是新协议，是<b>HTTP先和SSL（Secure Sockets Layer）通信，再由SSL和TCP通信，即HTTPS使用隧道进行通信</b><br>通过使用SSL，HTTPS具有了加密性（防窃听）、认证（防伪装）和完整性保护（防篡改）。</p><hr><h2 id="72、HTTP缺点有哪些？"><a href="#72、HTTP缺点有哪些？" class="headerlink" title="72、HTTP缺点有哪些？"></a>72、HTTP缺点有哪些？</h2><ul><li><p>使用明文进行通信，内容可能会被窃听</p></li><li><p>不验证通信方的身份，通信方的身份有可能遭遇伪装</p></li><li><p>无法证明报文的完整性，报文有可能遭篡改</p></li></ul><hr><h2 id="73、HTTPS采用的加密方式有哪些？对称还是非对称？"><a href="#73、HTTPS采用的加密方式有哪些？对称还是非对称？" class="headerlink" title="73、HTTPS采用的加密方式有哪些？对称还是非对称？"></a>73、HTTPS采用的加密方式有哪些？对称还是非对称？</h2><p>HTTPS采用混合的加密机制，使用<b>非对称密钥加密用于传输对称密钥来保证传输过程的安全性</b><br>之后使用<b>对称密钥加密进行通信来保证通信过程的效率</b>。</p><blockquote><p>非对称保证安全，对称保证效率</p></blockquote><img src="/2022/02/25/network/httpsSecure.png" class=""><p>确保传输安全过程（其实就是rsa原理）：</p><ol><li><p>Client给出协议版本号、一个客户端生成的随机数（Client Random），以及客户端支持的加密算法。</p></li><li><p>Server确认双方使用的加密方法，并给出数字证书、以及一个服务器生成的随机数（Server Random）。</p></li><li><p>Client确认数字证书有效，然后生成一个新的随机数（Premaster Secret），并使用数字证书中的公钥，加密这个随机数，发给Server</p></li><li><p>Server使用自己的私钥，获取Client发来的随机数（Premaster Secret）</p></li><li><p>Client和Server根据约定的加密方法，使用前面的三个随机数，生成“对话密钥”（Session Key），用来加密接下来的整个对话过程。</p></li></ol><hr><h2 id="74、为什么有时候刷新页面不需要重新建立SSL连接？"><a href="#74、为什么有时候刷新页面不需要重新建立SSL连接？" class="headerlink" title="74、为什么有时候刷新页面不需要重新建立SSL连接？"></a>74、为什么有时候刷新页面不需要重新建立SSL连接？</h2><p>TCP连接有的时候会被浏览器和服务端维持一段时间<br>TCP不需要重新建立，SSL自然也会用之前的。</p><hr><h2 id="75、SSL中的认证中的证书是什么？"><a href="#75、SSL中的认证中的证书是什么？" class="headerlink" title="75、SSL中的认证中的证书是什么？"></a>75、SSL中的认证中的证书是什么？</h2><p>通过使用<b>证书</b>来对通信放进行认证。</p><p>数字证书认证机构（CA，Certficate Authority）是客户端和服务器双方都可信赖的第三方机构。</p><p>服务器的运营人员向CA提出公开密钥的申请，CA在判明提出申请者的身份之后，会对已申请的公开密钥做数字签名<br>然后分配这个已签名的公开密钥，并将该公开密钥放入公开密钥整数后绑定在一起。</p><p>进行HTTPS通信时，服务器会把证书发送给客户端。<br>客户端取得其中的公开密钥之后，先使用数字签名进行验证，如果验证通过，就可以通信了。</p><hr><h2 id="76、HTTP如何禁用缓存？如何确认缓存？"><a href="#76、HTTP如何禁用缓存？如何确认缓存？" class="headerlink" title="76、HTTP如何禁用缓存？如何确认缓存？"></a>76、HTTP如何禁用缓存？如何确认缓存？</h2><p>HTTP&#x2F;1.1 通过Cache-Control首部字段来控制缓存。</p><p><b>禁止进行缓存</b></p><p>no-store指令规定不能对请求或响应的任何一部分进行缓存。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control: no-store</span><br></pre></td></tr></table></figure><p><b>强制确认缓存</b></p><p>no-cache指令规定缓存服务器需要先向源服务器验证缓存资源的有效性<br>只有当缓存资源有效时才能使用该缓存对客户端的请求进行相应。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control: no-cache</span><br></pre></td></tr></table></figure><hr><h2 id="77、GET和POST传递数据的最大长度能达到多少？"><a href="#77、GET和POST传递数据的最大长度能达到多少？" class="headerlink" title="77、GET和POST传递数据的最大长度能达到多少？"></a>77、GET和POST传递数据的最大长度能达到多少？</h2><p>get 是通过URL提交数据，因此GET可提交的数据量就跟URL能达到的最大长度有直接关系。<code>?和key:value</code></p><p>很多文章都说GET方式提交的数据最多只能是1024字节，实际上，URL不存在参数上限的问题，HTTP协议也没有对URL长度进行限制。<br>然而，特定浏览器及服务器对URL有限制：<br>   IE对URL长度的限制是2083字节（2K+35字节）；<br>   对于其他浏览器，如FireFox，Netscape等，没有长度限制，此时限制取决于服务器操作系统；<br>   如果URL太长，服务器可能会因为安全方面的设置从而拒绝请求或者发生不完整的数据请求。</p><p>post 理论上讲是没有大小限制的，HTTP协议规范也没有进行大小限制，但实际上post所能传递的数据量大小取决于服务器的设置和内存大小。</p><p>因为一般post的数据量很少超过MB，因此很少能感觉得到post的数据量限制<br>但实际上如果上传文件过程中会发现这样的问题，即上传个头较大文件到服务器时，可能上传不上去。</p><p>以php语言来说，查原因的时候也许会看到说PHP上传文件涉及到的参数，PHP默认上传有限定，一般值是2MB<br>更改这个值需要修改php.conf和post_max_size这个值。</p><hr><h2 id="78、网络层常见协议？"><a href="#78、网络层常见协议？" class="headerlink" title="78、网络层常见协议？"></a>78、网络层常见协议？</h2><table><thead><tr><th align="left">协议</th><th align="left">名称</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">IP</td><td align="left">网际协议</td><td align="left">IP协议不但定义了数据传输时的基本单元和格式，还定义了数据包的递交方法和路由选择</td></tr><tr><td align="left">ICMP</td><td align="left">Internet控制报文协议</td><td align="left">ICMP就是一个“错误侦测和回报机制”，其目的就是让我们能够检测网络的连线状况，也能确保连线准确性，是ping和tracert的工作协议</td></tr><tr><td align="left">RIP</td><td align="left">路由信息协议</td><td align="left">使用“跳数”（metric）来衡量到达目标地址的路由距离</td></tr><tr><td align="left">IGMP</td><td align="left">Internet组管理协议</td><td align="left">用于实现组播、广播等通信</td></tr></tbody></table><hr><h2 id="79、TCP四大拥塞控制算法总结？（重要）"><a href="#79、TCP四大拥塞控制算法总结？（重要）" class="headerlink" title="79、TCP四大拥塞控制算法总结？（重要）"></a>79、TCP四大拥塞控制算法总结？（重要）</h2><p><b>四大算法</b><br>拥塞控制主要是四个算法：</p><ol><li>慢启动</li><li>拥塞控制</li><li>快重传</li><li>快恢复</li></ol><ul><li><p>慢启动 - Slow Start：<br> 所谓慢启动，就是TCP连接刚建立，一点一点地提速，试探一下网络的承受能力，以免直接扰乱了网络通道秩序</p><ol><li><p>连接建好时，初始化拥塞窗口cwnd大小为1，表明可以传一个MSS大小的数据。</p></li><li><p>每当收到一个ACK，cwnd大小加1，呈线性上升</p></li><li><p>每当过了一个往返延迟时间RTT（Round-Trip Time），cwnd大小直接翻倍，乘2，指数上升</p></li><li><p>还有一个ssthresh（Slow start threshold），是一个上线，当cwnd &gt;&#x3D; ssthresh时，就会进入<code>拥塞避免</code>算法</p></li></ol></li><li><p>拥塞避免算法 - Congestion Avoidance<br> 当拥塞窗口cwnd大于等于慢启动阈值ssthresh后，就进入拥塞避免算法。</p><ol><li><p>收到一个ACK，则cwnd &#x3D; cwnd + 1 &#x2F; cwnd</p></li><li><p>每当过了一个往返时延时间RTT，cwnd大小加1。【即收到一组之后cwnd才加】</p></li></ol><p> 过了慢启动阈值之后，拥塞避免算法可以避免窗口增长过快导致窗口拥塞，而是缓慢地增加调整到网络的最佳值。</p></li><li><p>拥塞发生状态时的算法<br> 一般来说，TCP拥塞控制默认认为网络丢包是由于网络拥塞导致的，所以一般的TCP拥塞控制算法以丢包为网络进入拥塞状态的信号。<br> 对于丢包有两种判定方式<br>1. 超时重传RTO（Retransmission Timeout）超时<br><br>2. 收到三个重复确认ACK<br> 超时重传是TCP协议保证数据可靠性的一个重要机制，其原理是在发送一个数据以后就开启一个计时器，在一定时间内如果没有得到发送数据包的ACK报文，那么就重发数据，直到发送成功为止</p><p> 重复收到3个以上ACK，TCP就意识到数据发生丢失，需要重传。这个机制不需要等到重传定时器超时，所以叫做<code>快重传</code>，而快速重传之后没有使用慢启动算法，而是拥塞避免算法，这个又叫做<code>快恢复</code>算法。</p><p> 超出重传RTO（Retransmission Timeout）超时，TCP会重传数据包。TCP认为这种情况比较糟糕，反应也比较强烈：<br>* 由于发生丢包，将慢启动阈值ssthresh设置为当前cwnd的一般，即 ssthresh &#x3D; cwnd &#x2F; 2<br><br>* cwnd 重置为1<br>* 进入慢启动过程<br> 最早期的TCP Tahoe算法就只使用上述处理办法，但是由于一丢包就一切重来，导致cwnd重置为1，不利于网络数据的稳定传输。</p><p> 所以TCP Reno算法进行了优化，当收到三个重复确认ACK时，TCP开启快速重传Fast Retransmit算法，不用等到RTO超时再进行重传：<br>* cwnd大小缩小为当前的一半<br><br>* ssthresh设置为缩小后的cwnd大小（相当于ssthresh也缩小为一半）<br>* 然后进入快速恢复算法Fast Recovery</p></li></ul><img src="/2022/02/25/network/CrowdWindow.png" class=""><ul><li><p>快速恢复算法 - Fast Recovery<br> TCP Tahoe是早期的算法，所以没有快速恢复算法，而Reno算法有。</p><p> 在进入快速恢复之前，cwnd和ssthresh已经被更改为原有cwnd的一半。<br> 快速恢复算法的逻辑如下：<br>* cwnd &#x3D; cwnd + 3 MSS，加3 MSS的原因是因为受到三个重复的ACK<br><br>* 重传DACKs指定的数据包<br>* 如果再受到DACKs，则cwnd大小加1<br>* 如果收到新的ACK，表明重传的包成功了，则退出快速恢复算法，将cwnd设置为ssthresh，然后进入拥塞避免算法。</p></li></ul><img src="/2022/02/25/network/CrowdWindowPractical.png" class=""><p>如图所示，第五个包发生了丢失，所以导致接收方收到三次重复AK，也就是ACK5。</p><p>所以将ssthresh设置为当前cwnd的一半，也就是6&#x2F;2 &#x3D; 3，cwnd设置为3+3&#x3D;6，然后重传第五个包。</p><h2 id="当收到新的ACK时，即ACK11，则退出快恢复阶段，将cwnd重新设置为当前的ssthresh，即3，然后进入拥塞避免算法阶段"><a href="#当收到新的ACK时，即ACK11，则退出快恢复阶段，将cwnd重新设置为当前的ssthresh，即3，然后进入拥塞避免算法阶段" class="headerlink" title="当收到新的ACK时，即ACK11，则退出快恢复阶段，将cwnd重新设置为当前的ssthresh，即3，然后进入拥塞避免算法阶段"></a>当收到新的ACK时，即ACK11，则退出快恢复阶段，将cwnd重新设置为当前的ssthresh，即3，然后进入拥塞避免算法阶段</h2><h2 id="80、为何快速重传是选择3次ACK？"><a href="#80、为何快速重传是选择3次ACK？" class="headerlink" title="80、为何快速重传是选择3次ACK？"></a>80、为何快速重传是选择3次ACK？</h2><p>主要的考虑还是要区分包的丢失是忧郁链路故障还是乱序等其他因素引发。</p><p>两次Duplicated ACK时很可能是乱序造成的。<br>三次Duplicated ACK时很可能是丢包造成的。<br>四次Duplicated ACK时更可能是丢包造成的，但四次重复ACK响应策略太慢。</p><p>丢包肯定会造成三次Duplicated ACK，综上所述，收到三个重复确认时窗口减半效果最好，是实践经验。</p><p>在没有<code>快重传/快恢复</code>算法之前，重传依靠发送方的retransit timeout，就是在timeout内如果没有接收到对方的ACK，默认丢包，发送方则重传<br>包丢失的原因：</p><ol><li>包checksum出错</li><li>网络拥塞</li><li>网络断，包括路由重收敛。</li></ol><p>但是发送方无法判断是哪一种情况，于是采用最笨的方法，就是将自己的发送速率减半，即CWND减为1&#x2F;2<br>这样的方法对2是有效的，可以缓解网络拥塞；<br>3则无所谓，反正网络断了，无论发快发慢都会被丢；<br>对于1来说，丢包是因为偶尔的出错引起，一丢包就对半减速不合理。</p><p>于是有了快恢复算法，基于在反向还可以接收到ACK，可以认为网络并没有断，否则也接收不到ACK<br>如果在timeout时间内没有接收到&gt;2的Duplicated ACK，则大概率为乱序，乱序无序重传，接收方会进行排序工作。</p><p>而如果接收到三个或三个以上的Duplicated ACK，则大概率丢包，可以逻辑推理，发送方可以接收ACK，则网络可能是通的<br>可能是1&#x2F;2造成的，先不降速，重传一次，如果接收到正确的ACK，则一切OK，流速依然（包出错被丢）</p><h2 id="而如果依然接收到Duplicated-ACK，则认为是网络拥塞造成的，此时降速合理。"><a href="#而如果依然接收到Duplicated-ACK，则认为是网络拥塞造成的，此时降速合理。" class="headerlink" title="而如果依然接收到Duplicated ACK，则认为是网络拥塞造成的，此时降速合理。"></a>而如果依然接收到Duplicated ACK，则认为是网络拥塞造成的，此时降速合理。</h2><h2 id="81、对于FIN-WAIT-2，CLOSE-WAIT状态和TIME-WAIT状态？"><a href="#81、对于FIN-WAIT-2，CLOSE-WAIT状态和TIME-WAIT状态？" class="headerlink" title="81、对于FIN_WAIT_2，CLOSE_WAIT状态和TIME_WAIT状态？"></a>81、对于FIN_WAIT_2，CLOSE_WAIT状态和TIME_WAIT状态？</h2><ul><li><p>FIN_WAIT_2:</p><ul><li><p>半关闭状态</p></li><li><p>发送断开请求一方还有数据接收能力，但没有发送数据能力。</p></li></ul></li><li><p>CLOSE_WAIT：</p><ul><li><p>被动关闭连接一方收到FN包会立即返回ACK包表示已经收到断开请求。</p></li><li><p>被动关闭连接一方如果还有剩余数据要发送就进入CLOSE_WAIT状态。</p></li></ul></li><li><p>TIME_WAIT状态：</p><ul><li><p>也称2MSL等待状态</p></li><li><p>如果客户端直接进入CLOSED状态，如果服务器没有接收到最后一次ACK包，会在超时之后重新发送FIN包，因为客户端已经CLOSED，所以服务器就不会收到ACK而是RST。<br> 因此，TIME_WAIT状态目的是防止最后一次握手数据没有到达对方而触发重传FIN准备的。</p></li><li><p>在2MSL时间内，同一个socket不能再被使用，否则可能会和旧连接数据混淆（如果新旧连接socket相同的话）</p></li></ul></li></ul><hr><h2 id="82、流量控制原理？"><a href="#82、流量控制原理？" class="headerlink" title="82、流量控制原理？"></a>82、流量控制原理？</h2><ul><li><p>目的是接收方通过TCP头窗口字段告知发送方本方可接收的最大数据量，用以解决发送速率过快导致接收方不能接收的问题。所以流量控制是点对点控制。</p></li><li><p>TCP是双工协议，双方可以同时通信，所以发送方接收方各自维护一个<b>发送窗口和接收窗口</b></p><ul><li><p>发送窗口：用来限制发送方可以发送的数据大小（应该是接收窗口和拥塞窗口最小值）<br> 其中发送窗口的大小由接收端返回的TCP报文段中窗口字段来控制，接收方通过此字段告知发送方自己的缓存（受系统、硬件等限制）大小</p></li><li><p>接收窗口：用来标记可以接收的数据大小。</p></li></ul></li><li><p>TCP是流数据，发送出去的数据流可以被分为以下四个部分：</p><ul><li>已发送且被确认部分</li><li>已发送未被确认部分</li><li>未发送但可发送部分</li><li>不可发送部分<br> 其中发送窗口 &#x3D; 已发送未确认 + 未发送但可发送部分。</li></ul><p> 接收到的数据流可分为：</p><ul><li>已接收</li><li>未接收但准备接收</li><li>未接收不准备接收<br> 其中接收窗口 &#x3D; 未接收但准备接收部分。</li></ul></li><li><p>发送窗内数据只有当接收到接收端某段发送数据的ACK响应时才移动发送窗口，左边缘紧贴刚被确认的数据<br> 接收窗口也只有接收到数据且最左侧连续时才移动接收窗口。</p></li></ul><hr><h2 id="建立TCP服务器的各个系统调用的过程？"><a href="#建立TCP服务器的各个系统调用的过程？" class="headerlink" title="建立TCP服务器的各个系统调用的过程？"></a>建立TCP服务器的各个系统调用的过程？</h2><img src="/2022/02/25/network/TCPBuilder1.png" class=""><img src="/2022/02/25/network/TCPBuilder2.png" class=""><ul><li><p>服务器：</p><ul><li><p>创建socket -&gt; int socket(int domain, int type, int protocol);</p><ul><li>domain：协议域，决定了socket的地址类型，IPv4为AF_INET</li><li>type：指定socket类型，SOCK_STREAM为TCP连接</li><li>protocol：指定协议。IPPROTO_TCP表示TCP协议，为0时自动选择type默认协议。</li></ul></li><li><p>绑定socket和端口号 -&gt; int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);</p><ul><li>sockfd：socket返回的套接字描述符，类似于文件描述符fd。</li><li>addr：有个sockaddr类型数据的指针，指向的是被绑定结构变量。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IPv4的sockaddr地址结构</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">sockaddr_in</span>&#123;</span><br><span class="line">   <span class="type">sa_family_t</span> sin_family; <span class="comment">// 协议类型，AF_INET</span></span><br><span class="line">   <span class="type">in_port_t</span>   sin_port;   <span class="comment">// 端口号</span></span><br><span class="line">   <span class="keyword">struct</span> <span class="title class_">in_addr</span> sin_addr;   <span class="comment">// IP地址</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">in_addr</span>&#123;</span><br><span class="line">   <span class="type">uint32_t</span> s_addr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>addrlen：地址长度</li></ul></li><li><p>监听端口号 -&gt; int listen(int sockfd, int backlog);</p><ul><li>sockfd：要监听的socket描述字。</li><li>backlog：socket可以排队的最大连接数</li></ul></li><li><p>接收用户请求 -&gt; int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);</p><ul><li>sockfd：服务器socket描述字。</li><li>addr：指向地址结构指针。</li><li>addrlen：协议地址长度。</li><li>注意：一旦accept某个客户机请求成功将返回一个全新的描述符用于标识具体客户的TCP连接。</li></ul></li><li><p>从socket中读取字符 -&gt; ssize_t read(int fd, void *buf, size_t count);</p><ul><li>fd：连接描述字</li><li>buf：缓冲区buf</li><li>count：缓冲区长度</li><li>注：大于0标识读取的字节数，返回0标识文件读取结束，小于0标识发生错误。</li></ul></li><li><p>关闭socket -&gt; int close(int fd);</p><ul><li>fd：accept返回的连接描述字，每个连接有一个，生命周期为连接周期。</li><li>注：sockfd是监听描述字，一个服务器只有一个，用于监听是否有连接；fd是连接描述字，用于每个连接的操作。</li></ul></li></ul></li><li><p>客户机：</p><ul><li>创建socket -&gt; int socket(int domain, int type, int protocol);</li><li>连接指定计算机 -&gt; int connect(int sockfd, struct sockaddr *addr, socklen_t addrlen);<ul><li>sockfd：客户端的sock描述字</li><li>addr：服务器的地址</li><li>addrlen：socket地址长度</li></ul></li><li>向socket写入信息 -&gt; ssize_t write(int fd, const void *buf, size_t count);<ul><li>fd、buf、count：同read中含义</li><li>大于0表示写了部分或全部数据，小于0则表示出错</li></ul></li><li>关闭socket -&gt; int close(int fd);<ul><li>fd：同服务器端fd。</li></ul></li></ul></li></ul><hr><h2 id="84、TCP协议如何保证可靠传输？"><a href="#84、TCP协议如何保证可靠传输？" class="headerlink" title="84、TCP协议如何保证可靠传输？"></a>84、TCP协议如何保证可靠传输？</h2><ol><li><p>确认和重传：接收方收到报文就会确认，发送方发送一段时间后没有收到确认就会重传。</p></li><li><p>数据校验：TCP报文头有校验和，用于校验报文是否损坏</p></li><li><p>数据合理分片和排序：</p><ul><li>TCP会按最大传输单元（MTU）合理分片，接收方会缓存未按序到达的数据，重新排序后交给应用层。</li><li>UDP：IP数据包大于1500字节，大于MTU，则IP层要分片，把数据报分成若干片，每一片小于MTU。接收方的IP层要进行重组。<br>由于UDP的特性，某一片数据丢失时，接收方便无法重组数据包，导致丢弃整个UDP数据报。</li></ul></li><li><p>流量控制：当接收方来不及处理发送方的数据，能通过滑动窗口，提示发送方降低发送的速率，防止丢包</p></li><li><p>拥塞控制：当网络拥塞时，通过拥塞窗口，减少数据的发送，防止丢包。</p></li></ol><hr><h2 id="85、UDP是什么？"><a href="#85、UDP是什么？" class="headerlink" title="85、UDP是什么？"></a>85、UDP是什么？</h2><p>提供无连接的，尽最大努力交付的数据传输服务（<b>不保证数据传输可靠性</b>）</p><h2 id="86、封包和拆包？基于TCP还是UDP？"><a href="#86、封包和拆包？基于TCP还是UDP？" class="headerlink" title="86、封包和拆包？基于TCP还是UDP？"></a>86、封包和拆包？基于TCP还是UDP？</h2><p>封包和拆包都是基于TCP的概念，因为TCP是无边界的流传输，所以需要对TCP进行封包和拆包，确保发送和接收的数据不粘连。</p><ul><li>封包：封包就是在发送数据报时为每个TCP数据包加上一个包头，将数据报分为包头和包体两个部分。<br> 包头是一个固定长度的结构体，里面包含该数据包的总长度。</li><li>拆包：接收方在收到报文后提取包头中的长度信息进行截取。</li></ul><hr><h2 id="86、TCP和UDP的区别？"><a href="#86、TCP和UDP的区别？" class="headerlink" title="86、TCP和UDP的区别？"></a>86、TCP和UDP的区别？</h2><ol><li><p>是否面向连接？<br>TCP面向连接（如同打电话要先拨号建立连接）<br>UDP是无连接的，即发送数据之前不需要建立连接</p></li><li><p>是否可靠？<br>TCP提供可靠的服务，即通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达；<br>UDP尽最大努力交付，即不保证可靠交付。</p></li><li><p>字节流？报文？<br>TCP面向字节流，实际上TCP把数据看成一连串无结构的字节流；<br>   可以想象成流水形式，发送方TCP会将数据放入缓存区，等到可以发送时候发送。不能发送就等着TCP会根据当前网络拥塞状态来确定每个报文段大小。<br>UDP面向报文，UDP没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如IP电话，直播等）<br>   发送方的UDP对应用层交下来的报文，不合并，不拆分，只是在其上面加上首部后就交给了下面的网络层<br>   论应用层交给UDP多长的报文，它统统发送，一次发送一个。<br>   接收方接到后直接去除首部，交给上面的应用层就完成任务了，因此需要应用层控制报文大小</p></li><li><p>如何交互？<br>TCP连接，只能是点对点的<br>UDP连接支持一对一，一对多，多对一，多对多的交互通信。</p></li><li><p>首部开销？<br>TCP首部开销20字节；<br>UDP首部开销8字节</p></li><li><p>逻辑通信信道？<br>TCP逻辑通信信道是全双工的可靠信道<br>UDP则是不可靠信道</p></li></ol><hr><h2 id="87、UDP和TCP的特点？"><a href="#87、UDP和TCP的特点？" class="headerlink" title="87、UDP和TCP的特点？"></a>87、UDP和TCP的特点？</h2><ul><li><p>UDP</p><ul><li><p>UDP是无连接的</p></li><li><p>UDP尽最大努力交付</p></li><li><p>UDP面向报文</p></li><li><p>UDP没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，IP电话，实时视频会议等）</p></li><li><p>UDP支持一对一、一对多、多对一、多对多的交互通信</p></li><li><p>UDP的首部开销小，只有8个字节，比TCP的20字节首部短</p></li></ul></li><li><p>TCP</p><ul><li><p>TCP面向连接</p></li><li><p>TCP提供可靠交付的服务</p></li><li><p>TCP提供全双工通信，因此双方都有发送和接收缓存</p></li><li><p>TCP面向字节流</p></li><li><p>TCP是点对点的，一对一</p></li><li><p>TCP首部20字节</p></li></ul></li></ul><hr><h2 id="88、TCP对应的应用层协议"><a href="#88、TCP对应的应用层协议" class="headerlink" title="88、TCP对应的应用层协议"></a>88、TCP对应的应用层协议</h2><ul><li><p>FTP：定义了文件传输协议，使用21端口</p></li><li><p>Telnet：是一种用于远程登录的协议，使用23端口</p></li><li><p>SMTP：定义了简单邮件传送协议，服务器开放25端口</p></li><li><p>POP3：和SMTP对应，POP3用于接收邮件</p></li></ul><hr><h2 id="89、UDP对应的应用层协议"><a href="#89、UDP对应的应用层协议" class="headerlink" title="89、UDP对应的应用层协议"></a>89、UDP对应的应用层协议</h2><ul><li><p>DNS：用于域名解析服务，用53端口</p></li><li><p>SNMP：简单网络管理协议，使用161端口</p></li><li><p>TFTP（Trival File Transfer Protocol）：简单文件传输协议，使用69端口</p></li></ul><hr><h2 id="90、数据链路层常见协议？"><a href="#90、数据链路层常见协议？" class="headerlink" title="90、数据链路层常见协议？"></a>90、数据链路层常见协议？</h2><table><thead><tr><th align="left">协议</th><th align="left">名称</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">ARP</td><td align="left">地址解析协议</td><td align="left">根据IP地址获取物理地址</td></tr><tr><td align="left">RARP</td><td align="left">反向地址转换协议</td><td align="left">根据物理地址获得IP地址</td></tr><tr><td align="left">PPP</td><td align="left">点对点协议</td><td align="left">主要是用来通过拨号或专线方式建立点对点连接发送数据，使其成为各种主机、网桥和路由器之间简单连接的一种共通解决方案</td></tr></tbody></table><hr><h2 id="91、Ping命令基于哪一层协议的原理？"><a href="#91、Ping命令基于哪一层协议的原理？" class="headerlink" title="91、Ping命令基于哪一层协议的原理？"></a>91、Ping命令基于哪一层协议的原理？</h2><h2 id="ping命令基于网络层的命令，是基于ICMP协议工作的。"><a href="#ping命令基于网络层的命令，是基于ICMP协议工作的。" class="headerlink" title="ping命令基于网络层的命令，是基于ICMP协议工作的。"></a>ping命令基于网络层的命令，是基于ICMP协议工作的。</h2><h2 id="92、在进行UDP编程时，一次发送多少Bytes好？"><a href="#92、在进行UDP编程时，一次发送多少Bytes好？" class="headerlink" title="92、在进行UDP编程时，一次发送多少Bytes好？"></a>92、在进行UDP编程时，一次发送多少Bytes好？</h2><p>没有唯一答案，对于不同系统，不同要求，得到答案不一样。</p><p>仅对像ICQ一类的发送聊天消息的情况作分析，对于其他情况，也许能得到一点帮助：<br>   首先，TCP&#x2F;IP通常被认为是一个四层协议系统，包括：链路层、网络层、运输层、应用层。<br>   UDP属于运输层。</p><p>由下至上一步一步看：<br>   以太网（Ethernet）数据帧长度必须在46-1500字节之间，这是由以太网的物理特性决定的。<br>   这个1500字节被称为链路层的MTU（最大传输单元）。但这并不是指链路层的长度被限制在1500字节<br>   其实MTU指的是链路层的<code>数据区</code>，并不包括链路层的首部和尾部18字节。</p><p>所以，其实1500字节就是网络层IP数据包的长度限制，因为IP数据包的首部为20字节，所以IP数据包的数据区长度最大为1480字节。<br>而这1480字节就是用来放TCP传来的TCP报文段或UDP传来的UDP数据报的。<br>因为UDP数据报的首部8字节，所以UDP数据报的数据区最大长度为1472字节。即可用字节数。</p><p>当UDP数据大于1472时候会怎样？<br>即IP数据报大于1500字节，大于MTU。此时发送方IP层就要分片（fragmentation），把数据分成若干片，使每一片都小于MTU。<br>接收方IP层要对数据报进行重组。这样会多做很多事情。<br>更严重的是，UDP的特性导致当某一片数据传输中丢失时，接收方无法重组整个数据报，会导致UDP数据报被丢弃。</p><p>因此在普通局域网环境下，建议将UDP数据控制在1472字节一下为好。</p><p>进行Internet变成时则不同，因为Internet上路由器可能会将MTU设置为不同值。<br>假定MTU为1500来发送数据，经过某个网络的MTU值小于1500字节，则系统将会使用一系列机制调整MTU，使数据报能顺利到达目的地，多做许多不必要操作。</p><h2 id="鉴于Internet上标准的MTU值为576字节，因此建议在进行Internet的UDP编程时，最好将UDP的数据长度控制在548字节（576-8-20）以内。"><a href="#鉴于Internet上标准的MTU值为576字节，因此建议在进行Internet的UDP编程时，最好将UDP的数据长度控制在548字节（576-8-20）以内。" class="headerlink" title="鉴于Internet上标准的MTU值为576字节，因此建议在进行Internet的UDP编程时，最好将UDP的数据长度控制在548字节（576-8-20）以内。"></a>鉴于Internet上标准的MTU值为576字节，因此建议在进行Internet的UDP编程时，最好将UDP的数据长度控制在548字节（576-8-20）以内。</h2><h2 id="93、TCP利用滑动窗口实现流量控制的机制？"><a href="#93、TCP利用滑动窗口实现流量控制的机制？" class="headerlink" title="93、TCP利用滑动窗口实现流量控制的机制？"></a>93、TCP利用滑动窗口实现流量控制的机制？</h2><blockquote><p>流量控制是为了控制发送方发送速率，保证接收方来得及接收。TCP利用滑动窗口实现流量控制</p></blockquote><p>TCP中采用滑动窗口进行传输控制，滑动窗口的大小意味着<b>接收方还有多大的缓冲区可以用于接收数据</b>。<br>发送方可以通过滑动窗口的大小来确定应该发送多少字节的数据。<br>当滑动窗口为0时，发送方一般不能再发送数据报。</p><p>两种情况除外：</p><ol><li>可以发送紧急数据 —— 例如允许用户终止在远端机上的运行程序。</li><li>发送方可以发送一个1字节的数据报来通知接收方重新声明它希望接收的下一字节及发送方滑动窗口大小。</li></ol><hr><h2 id="94、解释一下RTO-x2F-RTT-x2F-超时重传？"><a href="#94、解释一下RTO-x2F-RTT-x2F-超时重传？" class="headerlink" title="94、解释一下RTO&#x2F;RTT&#x2F;超时重传？"></a>94、解释一下RTO&#x2F;RTT&#x2F;超时重传？</h2><ul><li><p>RTO：从上一次发送数据，因为长期没有收到ACK响应，到下一次重发之间的时间，就是重传间隔。</p><ul><li>通常每次重传RTO是前一次重传时间的两倍，计量单位通常是RTT。例如：1RTT&#x2F;2RTT&#x2F;4RTT&#x2F;8RTT…</li><li>重传次数到达上限之后停止重传</li></ul></li><li><p>RTT：数据从发送到接收到对方响应之间的时间间隔，即数据包在网络中一个往返用时，大小不稳定</p></li><li><p>超时重传：发送端发送报文后若长时间未收到确认的报文则需要重发该报文。可能有以下几种情况：</p><ul><li><p>发送的数据没能到达接收端，所以对方没有相应。</p></li><li><p>接收端接收到数据，但是ACK报文在返回过程中丢失。</p></li><li><p>接收端拒绝或丢弃数据。</p></li></ul></li></ul><hr><h2 id="95、XSS攻击？"><a href="#95、XSS攻击？" class="headerlink" title="95、XSS攻击？"></a>95、XSS攻击？</h2><p>跨站点脚本攻击，指攻击者通过篡改网络，嵌入恶意脚本程序，在用户浏览网页时，控制用户浏览器进行恶意操作的一种攻击方式。</p><p>如何防范XSS？</p><ol><li><p>前端、服务端，同时需要字符串输入的长度限制</p></li><li><p>前端、服务端，同时需要对HTML转义处理，将其中”&lt;””&gt;”等特殊字符进行转义编码。</p></li></ol><h2 id="防XSS的核心是必须对输入的数据做过滤处理。"><a href="#防XSS的核心是必须对输入的数据做过滤处理。" class="headerlink" title="防XSS的核心是必须对输入的数据做过滤处理。"></a>防XSS的核心是必须对输入的数据做过滤处理。</h2><h2 id="96、CSRF攻击？"><a href="#96、CSRF攻击？" class="headerlink" title="96、CSRF攻击？"></a>96、CSRF攻击？</h2><p>跨站点请求伪造，指攻击者通过跨站请求，以合法的用户身份进行非法操作。</p><p>攻击者盗用你的身份，以你的名义向第三方网站发送恶意请求<br>CSRF能做的事包括用你的身份发邮件、发短信、进行交易转账、甚至盗取账号信息等。</p><hr><h2 id="97、如何防范CSRF攻击？"><a href="#97、如何防范CSRF攻击？" class="headerlink" title="97、如何防范CSRF攻击？"></a>97、如何防范CSRF攻击？</h2><ol><li><p>安全框架：例如Spring Security。</p></li><li><p>token机制：在HTTP请求中进行token验证，如果请求中没有token或者token内容不正确，则认为CSRF攻击而拒绝该请求。</p></li><li><p>验证码：通常情况下，验证码能够很好地遏制CSRF攻击，但是很多情况下，出于用户体验考虑，验证码只能作为一种辅助手段，不是主要解决方案。</p></li><li><p>referer识别：在HTTP Header中有一个字段Referer，它记录了HTTP请求的来源地址。如果Referer是其他网站，就有可能是CSRF攻击，则拒绝该请求。<br>  但是，服务器并非都能取到Referer。很多用户处于隐私保护的考虑，限制了Referer的发送。<br>  在某些情况下，浏览器也不会发送Referer，例如HTTPS跳转到HTTP。</p><ol><li>验证请求来源地址</li><li>关键操作添加验证码</li><li>在请求地址添加token并验证</li></ol></li></ol><hr><h2 id="98、文件上传漏洞是如何发生的？"><a href="#98、文件上传漏洞是如何发生的？" class="headerlink" title="98、文件上传漏洞是如何发生的？"></a>98、文件上传漏洞是如何发生的？</h2><p>文件上传漏洞，指的是用户上传一个可执行的脚本文件，并通过此脚本文件获得了执行服务端命令的能力。<br>许多第三方框架、服务，都曾经被曝出文件上传漏洞，比如很早之前的Struts2，以及富文本编辑器等，可被攻击者上传恶意代码，有可能服务端被黑。</p><hr><h2 id="99、如何防范文件上传漏洞"><a href="#99、如何防范文件上传漏洞" class="headerlink" title="99、如何防范文件上传漏洞"></a>99、如何防范文件上传漏洞</h2><p>文件上传的目录设置为不可执行</p><ol><li><p>判断文件类型。在判断文件类型的时候，可以结合使用MIME Type，后缀检查等方式。<br>因为对于上传文件，不能简单地通过后缀名判断文件的类型，因为攻击者可以将可执行文件的后缀名称改为图片或其他后缀类型，诱导用户执行。</p></li><li><p>对上传的文件类型进行白名单校验，只允许上传可靠类型。</p></li><li><p>上传的文件需要进行重新命名，使攻击者无法猜想上传文件的访问路径，将极大地增加攻击成本<br>同时像shell.php.rar.ara这类文件，因为重命名而无法成功实施攻击。</p></li><li><p>限制上传文件的大小。</p></li><li><p>单独设置文件服务器的域名。</p></li></ol><hr><h2 id="100、拥塞控制原理？"><a href="#100、拥塞控制原理？" class="headerlink" title="100、拥塞控制原理？"></a>100、拥塞控制原理？</h2><ul><li><p>拥塞控制的目的是防止数据被过多注入网络导致网络资源（路由器、交换机等）过载。<br> 因为拥塞控制涉及网络链路全局，所以属于全局控制。控制拥塞使用拥塞窗口。</p></li><li><p>TCP拥塞控制算法：</p><ul><li><p>慢开始 &amp; 拥塞避免：<br> 慢开始：先试探网络拥塞程度再逐渐增大拥塞窗口。每次收到确认后拥塞窗口翻倍，直到到达阈值ssthresh<br> 拥塞避免：以一个MSS为单位增长拥塞窗口大小，当发生拥塞（超时未收到确认），将阈值减为原先一半，继续执行线性增加，这个过程为拥塞避免。</p></li><li><p>快速重传 &amp; 快速恢复：<br> 略</p></li><li><p>最终拥塞窗口会收敛于稳定值。</p></li></ul></li></ul><hr><h2 id="101、如何区分流量控制和拥塞避免？"><a href="#101、如何区分流量控制和拥塞避免？" class="headerlink" title="101、如何区分流量控制和拥塞避免？"></a>101、如何区分流量控制和拥塞避免？</h2><ul><li><p>流量控制属于通信双方协商<br>拥塞控制涉及通信链路全局</p></li><li><p>流量控制需要通信双方各维护一个发送窗口、一个接收窗口，对任意一方，接收窗口大小由自身决定，发送窗口大小由接收方TCP报文段中窗口值确定<br>拥塞控制的拥塞窗口大小由试探性发送一定数据量数据探查网络状况后而自适应调整</p></li><li><p>实际最终发送窗口 &#x3D; min（拥塞窗口，发送窗口）</p></li></ul><hr><h2 id="102、常见HTTP状态码？"><a href="#102、常见HTTP状态码？" class="headerlink" title="102、常见HTTP状态码？"></a>102、常见HTTP状态码？</h2><table><thead><tr><th align="left">状态码</th><th align="left">类别</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">1XX</td><td align="left">Informational（信息性状态码）</td><td align="left">接收的请求正在处理</td></tr><tr><td align="left">2XX</td><td align="left">Success（成功状态码）</td><td align="left">请求正常处理完毕</td></tr><tr><td align="left">3XX</td><td align="left">Redirection（重定向状态码）</td><td align="left">需要进行附加操作以完成请求</td></tr><tr><td align="left">4XX</td><td align="left">Client Error（客户端错误状态码）</td><td align="left">服务器无法处理请求</td></tr><tr><td align="left">5XX</td><td align="left">Server Error（服务器错误状态码）</td><td align="left">服务器处理请求出错</td></tr></tbody></table><ul><li><p>1XX 信息<br> 100 Continue：表明目前为止很正常，客户端可以继续发送请求或忽略这个相应。</p></li><li><p>2XX 成功</p><ul><li><p>200 OK</p></li><li><p>204 No Content：请求已经成功处理，但是返回的相应报文不包含实体的主题部分。<br>            一般只需要从客户端往服务器发送信息，而不需要返回数据时使用。</p></li><li><p>206 Partial Content：表示客户端进行了范围请求，响应报文包含由Content-Range指定范围的实体内容。</p></li></ul></li><li><p>3XX 重定向</p><ul><li><p>301 Moved Permanently：永久性重定向</p></li><li><p>302 Found：临时性重定向</p></li><li><p>303 See Other：和302有相同的功能，但是303明确要求客户端应该采用GET方法获取资源</p></li><li><p>304 Not Modified：如果请求报文首部包含一些条件，例如：If-Match，If-Modified-Since，If-None-Mathch，If-Range，If-Unmdodified-Since<br>              如果不满足条件，则服务器返回304状态码</p></li><li><p>307 Temporary Redirect：临时重定向，与302的含义类似，但307要求浏览器不会把重定向请求的POST改为GET方法。</p></li></ul></li><li><p>4XX 客户端错误</p><ul><li><p>400 Bad Request：请求报文中存在语法错误</p></li><li><p>401 Unauthorized：该状态码表示发送的请求需要有认证信息（BASIC认证、DIGEST认证）。如果之前进行过一次请求，则表示用户认证失败。</p></li><li><p>403 Forbidden：请求被拒绝</p></li><li><p>404 Not Found</p></li></ul></li><li><p>5XX 服务器错误</p><ul><li><p>500 Internal Server Error：服务器正在执行请求时发生错误</p></li><li><p>503 Service Unavailable：服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。</p></li></ul></li></ul><hr><h2 id="103、服务器出现大量close-wait的连接的原因是什么？有什么解决办法？"><a href="#103、服务器出现大量close-wait的连接的原因是什么？有什么解决办法？" class="headerlink" title="103、服务器出现大量close_wait的连接的原因是什么？有什么解决办法？"></a>103、服务器出现大量close_wait的连接的原因是什么？有什么解决办法？</h2><p>CLOSE_WAIT状态实在TCP四次挥手时候收到FIN但是没有发送自己的FIN时出现的，服务器出现大量CLOSE_WAIT状态的原因有两种：</p><ul><li><p>服务器内部业务处理占用了很多时间，都没能处理完业务；或者还有数据需要发送；或者服务器的业务逻辑有问题，没有执行close()方法</p></li><li><p>服务器的父进程派生出子进程，子进程继承了socket，收到FIN的时候子进程处理但父进程没有处理该信号，导致Socket的引用不为0无法回收。</p></li></ul><p>处理方法：</p><ul><li><p>停止应用程序</p></li><li><p>修改程序里的BUG</p></li></ul><hr><h2 id="104、一台机器能够使用的端口号上限是多少，是否可以修改？如果象要用的端口超过这个限制怎么办？"><a href="#104、一台机器能够使用的端口号上限是多少，是否可以修改？如果象要用的端口超过这个限制怎么办？" class="headerlink" title="104、一台机器能够使用的端口号上限是多少，是否可以修改？如果象要用的端口超过这个限制怎么办？"></a>104、一台机器能够使用的端口号上限是多少，是否可以修改？如果象要用的端口超过这个限制怎么办？</h2><p>0-65535，因为TCP报文头部中源端口号和目的端口号的长度是16位，也就是可以表示2^16&#x3D;65536个不同的端口号</p><p>因此TCP可供识别的端口号最多只有65536个。<br>但是由于0-1023是知名服务端口，所以实际上还要少1024个端口号。</p><p>对于服务器来说，可以开的端口与65536无关，其实受限于Linux可以打开的文件数量，并且可以通过MaxUserPort来进行配置</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2022/02/22/MySQL/"/>
      <url>/2022/02/22/MySQL/</url>
      
        <content type="html"><![CDATA[<h1 id="一、MySQL-基础"><a href="#一、MySQL-基础" class="headerlink" title="一、MySQL 基础"></a>一、MySQL 基础</h1><h2 id="1、关系型数据库"><a href="#1、关系型数据库" class="headerlink" title="1、关系型数据库"></a>1、关系型数据库</h2><p>建立在关系模型基础上的数据库，表明了数据库中存储的数据之间的联系（一对一，一对多，多对多等）<br>数据被存放在表中<br>大部分关系型数据库都使用SQL操作数据库中的数据</p><h2 id="2、常见的关系型数据库"><a href="#2、常见的关系型数据库" class="headerlink" title="2、常见的关系型数据库"></a>2、常见的关系型数据库</h2><p>MySQL、Oracle、SQL Server、SQLite（wechat 聊天记录）</p><h2 id="3、MySQL介绍"><a href="#3、MySQL介绍" class="headerlink" title="3、MySQL介绍"></a>3、MySQL介绍</h2><p>关系型数据库，持久化存储系统中的一些数据。<br>默认端口号 3306</p><hr><h1 id="二、存储引擎"><a href="#二、存储引擎" class="headerlink" title="二、存储引擎"></a>二、存储引擎</h1><h2 id="1、存储引擎相关命令"><a href="#1、存储引擎相关命令" class="headerlink" title="1、存储引擎相关命令"></a>1、存储引擎相关命令</h2><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>存储引擎相关命令</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">查看MySQL提供的存储引擎</span></span><br><span class="line"><span class="meta">mysql&gt; </span><span class="language-bash">show engines;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">查看MySQL当前默认的存储引擎</span></span><br><span class="line"><span class="meta">mysql&gt; </span><span class="language-bash">show variables like <span class="string">&#x27;%storage_engine%&#x27;</span>;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">查看表的存储引擎</span></span><br><span class="line"><span class="meta">mysql&gt; </span><span class="language-bash">show table like <span class="string">&quot;table_name&quot;</span>;</span></span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="2、MyISAM-和-InnoDB-的区别"><a href="#2、MyISAM-和-InnoDB-的区别" class="headerlink" title="2、MyISAM 和 InnoDB 的区别"></a>2、MyISAM 和 InnoDB 的区别</h2><p>MySQL 5.5 以前，默认存储引擎：MyISAM<br>MySQL 5.5 以后，默认存储引擎：InnoDB（事务性数据库引擎）</p><h3 id="（１）是否支持行级锁"><a href="#（１）是否支持行级锁" class="headerlink" title="（１）是否支持行级锁"></a>（１）是否支持行级锁</h3><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>1</span></div>    <div class="xContent"><div class="inner">        <p>MyISAM：只有 表级锁<br>InnoDB：有 行级锁 和 表级锁，默认 行级锁</p><p>表级锁：在上锁时锁住整张表，处理并发时效率更低<br>因此，InnoDB在并发情况下，性能更好。</p>     </div></div>    </div><h3 id="（２）是否支持事务"><a href="#（２）是否支持事务" class="headerlink" title="（２）是否支持事务"></a>（２）是否支持事务</h3><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>2</span></div>    <div class="xContent"><div class="inner">        <p>MyISAM：不提供事务支持<br>InnoDB：提供事物支持，具有 提交（commit） 和 回滚（rollback）事务的能力。</p>     </div></div>    </div><h3 id="（３）是否支持外键"><a href="#（３）是否支持外键" class="headerlink" title="（３）是否支持外键"></a>（３）是否支持外键</h3><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>3</span></div>    <div class="xContent"><div class="inner">        <p>MyISAM：不支持外键<br>InnoDB：支持外键</p><blockquote><p>一般不建议数据库层面使用外键，最好在应用层面解决，但这样会对数据一致性构成威胁。</p></blockquote>     </div></div>    </div><h3 id="（４）是否支持数据库异常崩溃后的安全恢复"><a href="#（４）是否支持数据库异常崩溃后的安全恢复" class="headerlink" title="（４）是否支持数据库异常崩溃后的安全恢复"></a>（４）是否支持数据库异常崩溃后的安全恢复</h3><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>4</span></div>    <div class="xContent"><div class="inner">        <p>MyISAM：不支持安全恢复<br>InnoDB：支持安全恢复</p><blockquote><p>InnoDB数据库异常崩溃后，数据库重新启动的时候会保证数据库恢复到崩溃前的状态。这个恢复的过程依赖于 <code>redo log</code><br><code>redo log（重做事务）</code>保证事务的持久性（Durability）<br><code>undo log（回滚日志）</code>保证事务的原子性（Atomicity）<br><code>锁机制、MVCC</code>保证事务的隔离性（Isolation）（参见ACID）<br>而保证了事物的持久性、原子性、隔离性后，一致性（Consistency）才能得到保障。</p></blockquote>     </div></div>    </div><h3 id="（５）是否支持-MVCC-多版本并发控制"><a href="#（５）是否支持-MVCC-多版本并发控制" class="headerlink" title="（５）是否支持 MVCC(多版本并发控制)"></a>（５）是否支持 MVCC(多版本并发控制)</h3><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>5</span></div>    <div class="xContent"><div class="inner">        <p>MyISAM：不支持 MVCC<br>InnoDB：支持 MVCC<br>MVCC 可以看做是行级锁的一个升级，可以有效减少加锁操作，提供性能</p>     </div></div>    </div><h2 id="3、关于-MyISAM-和-InnoDB-的选择问题"><a href="#3、关于-MyISAM-和-InnoDB-的选择问题" class="headerlink" title="3、关于 MyISAM 和 InnoDB 的选择问题"></a>3、关于 MyISAM 和 InnoDB 的选择问题</h2><p>一般都选择 InnoDB 存储引擎，读密集情况下可以选择 MyISAM，但不能保证上述不支持的操作。</p><blockquote><p>在很多已知场景中，InnoDB 的速度都要比 MyISAM快，尤其用到了<b>聚簇索引</b>，或者需要访问的数据都可以放入内存的应用</p></blockquote><hr><h1 id="三、锁机制与-InnoDB-锁算法（生疏）"><a href="#三、锁机制与-InnoDB-锁算法（生疏）" class="headerlink" title="三、锁机制与 InnoDB 锁算法（生疏）"></a>三、锁机制与 InnoDB 锁算法（生疏）</h1><p>MyISAM：<span class="blur">表级锁</span><br>InnoDB：<span class="blur">行级锁和表级锁，默认行级锁</span></p><p>表级锁：MySQL中锁定<b>粒度最大</b>，对当前操作表加锁</p><ul><li>优点：实现简单，资源消耗小，加锁快，不会出现死锁。</li><li>缺点：锁定粒度最大，触发锁冲突的概率最高，并发度最低，因此不支持MVCC。</li></ul><p>行级锁：MySQL中锁定<b>粒度最小</b>，对当前操作行加锁</p><ul><li>优点：大大减少数据库操作的冲突，加锁粒度最小，并发度高。</li><li>缺点：加锁的开销也最大，加锁慢，会出现死锁。</li></ul><p>InnoDB 存储引擎的三种锁算法：</p><ul><li>Record Lock：记录锁，单个行记录上的锁</li><li>Gap Lock：间隙锁，锁定一个范围，不包括记录本身，区间(x, y)</li><li>Next-key Lock：Record + Gap 临键锁，锁定一个范围，包括记录本身，区间(x, y]<br><code>锁算法参照：幻读</code></li></ul><h1 id="四、查询缓存（MySQL-8-0-版本后移除）"><a href="#四、查询缓存（MySQL-8-0-版本后移除）" class="headerlink" title="四、查询缓存（MySQL 8.0 版本后移除）"></a>四、查询缓存（MySQL 8.0 版本后移除）</h1><p>my.cnf中加入以下配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">query_cache_type = 1</span><br><span class="line">query_cache_size = 600000</span><br></pre></td></tr></table></figure><p>或 MySQL 执行以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set global query_cache_type = 1;</span><br><span class="line">set global query_cache_size = 600000;</span><br></pre></td></tr></table></figure><p>功能如其名，多次的同样查询条件会在缓存中直接返回结果。<br>查询条件：查询本身、当前要查询的数据库、客户端协议版本号等</p><p>查询不命中的情况<br>  1、任何两个查询在任何字符上的不同都会导致缓存不命中。<br>  2、查询中包含任何用户自定义函数、存储函数、用户变量、临时表、MySQL库中的系统表，结果也不会被缓存。<br>  3、缓存建立后，MySQL的查询缓存系统会跟踪涉及的表，若表发生变化，则相应缓存数据失效。</p><p>因此，缓存<b>虽然能提升数据库查询性能，但也带来额外的开销，查询要缓存，失效要销毁 </b><br>此外，<b>可以通过 sql_cache 和 sql_no_cache 来控制某个查询语句是否要进行缓存： </b></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select sql_no_cache count(*) from user;</span><br></pre></td></tr></table></figure><h1 id="五、事务（Transaction）"><a href="#五、事务（Transaction）" class="headerlink" title="五、事务（Transaction）"></a>五、事务（Transaction）</h1><h2 id="1、事务的概念"><a href="#1、事务的概念" class="headerlink" title="1、事务的概念"></a>1、事务的概念</h2><p>事务是<b>逻辑上的一组操作，要么都执行，要么都不执行</b>。<br>举例：存钱，类似于OS中同步互斥操作。</p><h2 id="2、数据库事务的概念"><a href="#2、数据库事务的概念" class="headerlink" title="2、数据库事务的概念"></a>2、数据库事务的概念</h2><p><code>注意，若没有特指 分布式事务，往往指的是 数据库事务</code><br>数据库事务：保证多个 SQL 语句构成逻辑上整体，<b>要么全部执行，要么全部不执行</b>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 开启一个事务</span><br><span class="line">START TRANSACTION;</span><br><span class="line"></span><br><span class="line"># 多条 SQL 语句......</span><br><span class="line">    SQL1</span><br><span class="line">    SQL2</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"># 提交事务</span><br><span class="line">COMMIT</span><br></pre></td></tr></table></figure><h2 id="3、事务的ACID特性"><a href="#3、事务的ACID特性" class="headerlink" title="3、事务的ACID特性"></a>3、事务的ACID特性</h2><p>  1、原子性（Atomicity）：事务是最小的执行单位，要么全部完成，要么都不起作用。<br>  2、一致性（Consistency）：执行事务前后，数据保持一致，转账举例，双方总额不变。<br>  3、隔离性（Isolation）：并发访问数据库时，一个用户的事物不被其他事物干扰，并发事物之间数据库独立。<br>  4、持久性（Durability）：一个事务被提交之后，它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何的影响。</p><blockquote><p>数据事务的实现原理：<br>以InnoDB引擎为例：<br><code>redo log（重做日志）</code>保证事务的<b>持久性</b><br><code>undo log（回滚日志）</code>保证事务的<b>原子性</b><br><code>锁机制、MVCC</code>保证事务的<b>隔离性</b>（默认隔离级别<code>REPEATABLE-READ</code>）<br>保证事务的持久性、原子性、隔离性之后，一致性才能得到保障。</p></blockquote><h2 id="4、并发事务带来哪些问题？"><a href="#4、并发事务带来哪些问题？" class="headerlink" title="4、并发事务带来哪些问题？"></a>4、并发事务带来哪些问题？</h2><p>多个事务并发运行，经常会操作相同的数据来完成各自的任务（多个用户对同一数据进行操作），并发虽然是必须的，但可能会导致一些问题：</p><ul><li>脏读（Dirty read）：一个事务访问数据并对数据进行了修改，这种修改还没有提交到数据库中，这时另一个事务也访问了该数据。【此时数据修改并未提交】</li><li>丢失修改（Lost to modify）：T1 读取一个数据时，T2 也访问了该数据，则在 T1 中修改了这个数据后，T2 也修改了这个数据。【T1 的修改结果被丢失，称为丢失修改】</li><li>不可重复读（Unrepeatable read）：指在 T1 多次读同一数据，该事务还没结束时，T2 也访问该数据，则在 T1 的两次读数据之间，由于 T2 导致第一个事务两次读取的数据可能不一样。</li><li>幻读（Phantom read）：类似于不可重复读，在 T1 中读取了几行数据，T2 中插入了一些数据。随后的查询中，T1 就会发现多了一些原本不存在的记录。【产生幻觉，所以幻读】</li></ul><blockquote><p>不可重复读和幻读的区别：<br>不可重复读<code>修改</code>：多次读取一条记录发现其中某些列的值被修改；<br>幻读<code>新增或删除</code>：多次读取一条记录发现记录增多或减少了。</p></blockquote><h2 id="5、事务隔离级别："><a href="#5、事务隔离级别：" class="headerlink" title="5、事务隔离级别："></a>5、事务隔离级别：</h2><ul><li><code>READ-UNCOMMITTED（读取未提交RU）</code>：最低的隔离级别，允许读取尚未提交的数据变更<br>可能导致<b>脏读</b>、<b>幻读</b>或<b>不可重复读</b></li><li><code>READ-COMMITTED（读取已提交RC）</code>：允许读取并发事务已经提交的数据<br>可以阻止<b>脏读</b><br>可能导致<b>幻读</b>或<b>不可重复读</b></li><li><code>REPEATABLE-READ（可重复读RR）</code>：对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改<br>可以阻止<b>脏读</b>和<b>不可重复读</b><br>可能导致<b>幻读</b></li><li><code>SERIALIZABLE（可串行化）</code>：最高的隔离级别，完全服从ACID。所有事务依次逐个执行，这样事务之间就完全不可能产生干扰。<br>可以阻止<b>脏读</b>、<b>不可重复读</b>及<b>幻读</b></li></ul><h2 id="6、MySQL的默认隔离级别"><a href="#6、MySQL的默认隔离级别" class="headerlink" title="6、MySQL的默认隔离级别"></a>6、MySQL的默认隔离级别</h2><p>MySQL InnoDB 存储引擎的默认支持的隔离级别是<b>REPEATABLE-READ（可重读）</b><br>可以通过<code>SELECT @@tx_isolation;</code>或<code>SELECT @@transaction_isolation;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt; </span><span class="language-bash">SELECT @@tx_isolation;</span></span><br><span class="line">+-----------------+</span><br><span class="line">| @@tx_isolation  |</span><br><span class="line">+-----------------+</span><br><span class="line">| REPEATABLE-READ |</span><br><span class="line">+-----------------+</span><br></pre></td></tr></table></figure><blockquote><p>MySQL InnoDB 的 REPEATABLE-READ（可重读）并不保证避免幻读，需要应用使用加锁读来保证。即使用Next-Key Locks。</p></blockquote><p>隔离级别越低，事务请求的锁越少，所以大部分数据库系统的隔离级别都是 READ-COMMITTED（读取提交内容），但InnoDB 存储引擎默认使用 RR 并不会有任何性能损失。</p><p>InnoDB 存储引擎在<b>分布式事务</b>的情况下一般会用到<b>SERIALIZABLE（可串行化）</b>隔离级别。</p><blockquote><p>InnoDB 存储引擎提供了对 XA 事务的支持，并通过 XA 事务来支持分布式事务的实现。分布式事务指的是允许多个独立的事务资源（transactional resources）参与到一个全局的事务中。<br>事务资源通常是关系型数据库系统，但也可以是其他类型的资源。<br>全局事务要求在其中的所有参与的事物要么都提交，要么都回滚，这对于事务原有的 ACID 要求又有了提高。<br>此外，在使用分布式事务时，InnoDB 存储引擎的事务隔离级别必须设置为 SERIALIZABLE。</p></blockquote><h1 id="六、补充"><a href="#六、补充" class="headerlink" title="六、补充"></a>六、补充</h1><h2 id="1、快照读和当前读"><a href="#1、快照读和当前读" class="headerlink" title="1、快照读和当前读"></a>1、快照读和当前读</h2><ul><li>当前读：读取最新版本，并<code>对读取的记录加锁，阻塞其他事务同时改动相同记录，避免出现安全问题</code>。<br>  实现方式：Next-Key锁（Record Lock + Gap Lock）<br>其中：Gap Lock 只在 RR 甚至以上的隔离级别才会有，锁定的是一个区间。<br>1、主键或唯一索引，当前读时，where全部精确命中，只会加行记录锁<br>2、没有索引的列，当前读时，会加全表Gap Lock。<br>3、非唯一索引，条件部分命中(&gt;, &lt;, like 等)才会加 Gap Lock</li><li>快照读：单纯的select操作<br>其中：RC的每次select都生成一个快照读，RR开启事务后第一个select才是快照读的地方<br>快照读实现方式：<b>undo log + MVCC</b><br>事务ID：DB_TRX_ID<br>回滚指针：DB_ROLL_PT</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库</title>
      <link href="/2022/02/22/Database/"/>
      <url>/2022/02/22/Database/</url>
      
        <content type="html"><![CDATA[<h2 id="1、关系型数据库和非关系型数据库的区别了解多少？"><a href="#1、关系型数据库和非关系型数据库的区别了解多少？" class="headerlink" title="1、关系型数据库和非关系型数据库的区别了解多少？"></a>1、关系型数据库和非关系型数据库的区别了解多少？</h2><ul><li><p>关系型数据库：</p><ul><li><p>容易理解，因为采用了关系模型来组织数据</p></li><li><p>可以保持数据一致性</p></li><li><p>数据更新开销较小</p></li><li><p>支持复杂查询（带where字句的查询）</p></li></ul></li><li><p>非关系型数据库的优点</p><ul><li><p>不需要经过SQL层的解析，读写效率高。</p></li><li><p>基于键值对，数据的扩展性很好。</p></li><li><p>可以支持多种类型数据的存储，如图片、文档等。</p></li></ul></li></ul><hr><h2 id="2、非关系型数据库？"><a href="#2、非关系型数据库？" class="headerlink" title="2、非关系型数据库？"></a>2、非关系型数据库？</h2><p>非关系型数据库也叫NoSQL，采用键值对形式进行存储</p><p>读写性能很好，易于扩展，可分为内存性数据库以及文档型数据库，例如：Redis，Mongodb，HBase等等。</p><p>适合使用非关系型数据库的场景：</p><ul><li>日志系统</li><li>地理位置存储</li><li>数据量巨大</li><li>高可用</li></ul><hr><h2 id="3、为什么使用索引？"><a href="#3、为什么使用索引？" class="headerlink" title="3、为什么使用索引？"></a>3、为什么使用索引？</h2><ul><li><p>通过创建<code>唯一性索引</code>，可以保证数据库表中每一行数据的唯一性。</p></li><li><p>可以大大加快数据的<code>检索速度</code>，这也是创建索引的最主要的原因。</p></li><li><p>帮助服务器避免排序和临时表</p></li><li><p>将随机IO变为顺序IO</p></li><li><p>可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。</p></li></ul><hr><h2 id="4、Innodb为什么要用自增id作为主键？"><a href="#4、Innodb为什么要用自增id作为主键？" class="headerlink" title="4、Innodb为什么要用自增id作为主键？"></a>4、Innodb为什么要用自增id作为主键？</h2><p>如果表使用自增主键，那么每次插入新的记录，记录就会顺序添加到当前索引结点的后序位置，当一页写满，就会自动开辟一个新的页。</p><h2 id="如果使用非自增主键（如身份证号或学号等），由于每次插入主键的值近似于随机，因此每次新纪录都要背插到现有索引页的中间某个位置，频繁的移动、分页操作了大量的碎片，得到了不够紧凑的索引结构，后续不得不通过OPTIMIZE-TABLE来重建表并优化填充页面。"><a href="#如果使用非自增主键（如身份证号或学号等），由于每次插入主键的值近似于随机，因此每次新纪录都要背插到现有索引页的中间某个位置，频繁的移动、分页操作了大量的碎片，得到了不够紧凑的索引结构，后续不得不通过OPTIMIZE-TABLE来重建表并优化填充页面。" class="headerlink" title="如果使用非自增主键（如身份证号或学号等），由于每次插入主键的值近似于随机，因此每次新纪录都要背插到现有索引页的中间某个位置，频繁的移动、分页操作了大量的碎片，得到了不够紧凑的索引结构，后续不得不通过OPTIMIZE TABLE来重建表并优化填充页面。"></a>如果使用非自增主键（如身份证号或学号等），由于每次插入主键的值近似于随机，因此每次新纪录都要背插到现有索引页的中间某个位置，频繁的移动、分页操作了大量的碎片，得到了不够紧凑的索引结构，后续不得不通过OPTIMIZE TABLE来重建表并优化填充页面。</h2><h2 id="5、MyISAM和InnoDB实现B树索引方式的区别是什么？"><a href="#5、MyISAM和InnoDB实现B树索引方式的区别是什么？" class="headerlink" title="5、MyISAM和InnoDB实现B树索引方式的区别是什么？"></a>5、MyISAM和InnoDB实现B树索引方式的区别是什么？</h2><ul><li><p>MyISAM，B+Tree叶结点的data域存放的是数据记录的地址<br>  在索引检索的时候，首先按照B+Tree搜索算法搜索索引，如果指定的key存在，则取出其data域的值<br>  然后以data域的值为地址读取相应的数据记录，这被称为<code>“非聚簇索引”</code></p></li><li><p>InnoDB，其数据文件本身就是索引文件，相比MyISAM，索引文件和数据文件是分离的，其表数据文件本身就是按B+Tree组织的一个索引结构<br>  树的节点data域保存了完整的数据记录，这个索引的key是数据表的主键<br>  因此InnoDB表数据文件本身就是主索引，这被称为<code>“聚簇索引”</code>或聚集索引，而其余的索引都作为辅助索引，辅助索引的data域存储相应记录主键的值而非地址<br>  这也是和MyISAM不同的地方。</p><p>  在根据主索引搜索时，直接找到key所在的节点即可取出数据；<br>  在根据辅助索引查找时，则<code>需要先取出主键的值</code>，再走一遍主索引。<br>  因此，在设计表的时候，不建议使用过长的字段为主键，也不建议使用非单调的字段作为主键，因为会造成主索引频繁分裂。</p></li></ul><hr><h2 id="6、说一下MySQL是如何执行一条SQL的？具体步骤？"><a href="#6、说一下MySQL是如何执行一条SQL的？具体步骤？" class="headerlink" title="6、说一下MySQL是如何执行一条SQL的？具体步骤？"></a>6、说一下MySQL是如何执行一条SQL的？具体步骤？</h2><img src="/2022/02/22/Database/MySQLProcess.png" class=""><p>Server层按顺序执行SQL的步骤为：</p><ol><li>客户端请求</li><li>连接器（验证用户身份，给予权限）</li><li>查询缓存（存在缓存则直接返回，不存在则执行后续操作）</li><li>分析器（对SQL进行词法分析和语法分析等操作）</li><li>优化器（主要对执行的SQL优化选择最优的执行方案方法）</li><li>执行器（之行时会先看用户是否有执行权限，有才去使用这个引擎提供的接口）</li><li>去引擎层获取数据返回（如果开启查询缓存则会缓存查询结果）</li></ol><p>简单概括：</p><ol><li>连接器：管理连接、权限验证；</li><li>查询缓存：命中缓存则直接返回结果；</li><li>分析器：对SQL进行词法分析、语法分析（判断查询的SQL字段是否存在也在该步）</li><li>优化器：执行计划生成、选择索引；</li><li>执行器：操作引擎、返回结果</li><li>存储引擎：存储数据、提供读写接口</li></ol><hr><h2 id="7、MySQL的内部构造？一般可以分为哪两部分？"><a href="#7、MySQL的内部构造？一般可以分为哪两部分？" class="headerlink" title="7、MySQL的内部构造？一般可以分为哪两部分？"></a>7、MySQL的内部构造？一般可以分为哪两部分？</h2><p>可以分为<code>服务层</code>和<code>存储引擎层</code>两部分</p><ul><li><p>服务层：<br>服务层包括<b>连接器、查询缓存、分析器、优化器、执行器等</b>。<br>涵盖MySQL的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等）<br>所有跨存储引擎的功能都在该层实现，比如<b>存储过程、触发器、视图等</b>。</p></li><li><p>存储引擎层：<br>其架构模式是插件式的，支持InnoDB、MyISAM、Memory等多个存储引擎。<br>现在最常用的存储引擎是InnoDB，从MySQL 5.5.5版本开始成为了默认的存储引擎。</p></li></ul><hr><h2 id="8、Drop、Delete和Truncate的共同点和区别？"><a href="#8、Drop、Delete和Truncate的共同点和区别？" class="headerlink" title="8、Drop、Delete和Truncate的共同点和区别？"></a>8、Drop、Delete和Truncate的共同点和区别？</h2><p>Drop、Delete、Truncate都表示删除，但是三者有一点差别：</p><ul><li><p>Delete用来删除表的全部或者一部分数据行，执行delete后，用户需要提交(commit)或者回滚(rollback)来执行删除或者撤销删除，会触发这个表上所有delete触发器</p></li><li><p>Truncate删除表中所有数据，这个操作不能回滚，也不会触发这个表上的触发器，Truncate比Delete更快，占用空间更小。</p></li><li><p>Drop命令从数据库中删除表，所有的数据行，索引和权限也会被删除，所有的DML触发器也不会被触发，这个命令也不能回滚。</p></li></ul><p>因此，在不再需要一张表的时候，用Drop；<br>在想删除部分数据行的时候，用Delete；<br>在保留表而删除所有数据的时候用Truncate。</p><p>具体解析：</p><ol><li><p>Delete语句执行删除的过程是每次从表中删除一行，并且同时将该行的删除操作作为事务记录在日志中保存以便进行回滚操作。<br>Truncate TABLE则一次性从表中删除所有的数据并不把单独的删除操作记录计入日志保存，删除行是不能恢复的。<br> 并且在删除的过程中不会激发与表有关的删除触发器。执行速度快。</p></li><li><p>表和索引所占空间。<br>Truncate后，这个表和索引所占用的空间会恢复到初始大小<br>Delete操作不会减少表或索引占用的空间<br>Drop语句将表所占用的空间全释放掉。</p></li><li><p>一般而言 drop &gt; truncate &gt; delete</p></li><li><p>应用范围。<br>Truncate只能对table<br>Delete可以是table和view</p></li><li><p>Truncate和Delete只删除数据<br>drop则删除整个表（结构和数据）</p></li><li><p>Truncate与不带where的Delete：只删除数据，而不删除表的结构（定义）<br>Drop语句将删除表的结构被依赖的约束（constrain），触发器（trigger），索引（index）；依赖于该表的存储过程&#x2F;函数被保留，但状态变成：invalid</p></li><li><p>Delete语句为DML（Data Manipulation Language），这个操作会被放到rollback segment中，事务提交后才生效。<br>如果有相应的trigger，执行时将被触发。</p></li><li><p>Truncate、Drop是DDL（Data Define Language），操作立即生效。<br>原数据不放到rollback segment中，不能回滚</p></li><li><p>在没有备份的情况下，谨慎使用Drop与Truncate。<br>要删除部分数据行采用Delete且注意结合where来约束影响范围。回滚段要足够大。<br>要删除表用Drop；<br>若想保留表而将表中数据删除，如果与事物无关，用Truncate；<br>如果和事务有关，或老是想触发trigger，还是用delete</p></li><li><p>Tuuncate TABLE 表名，速度快，效率高，<br>因为：Truncate TABLE在功能上与不带WHERE字句的Delete语句相同，二者均删除表中的全部行<br>但Truncate TABLE比DELETE速度快，且使用的相同和事务日志资源少。<br>Delete语句每次删除一行，并在事务日志中为所删除的每行记录一项。<br>Truncate TABLE通过释放存储表数据所用的数据页来删除数据，并且只在事务日志中记录页的释放。</p></li><li><p>Truncate TABLE删除表中的所有行，但表结构及其列、约束、索引等保持不变。<br>新行标识所用的计数值重置为该列的种子。<br>如果想要保留标识计数值，请改用Delete，如果要删除表定义及其数据，请用Drop TABLE语句。</p></li><li><p>对于由FOREIGN KEY约束引用的表，不能用Truncate TABLE<br>而应该使用不带WHERE子句的Delete语句，由于Truncate TABLE不记录在日志中，所以不能激活触发器。</p></li></ol><hr><h2 id="9、MySQL优化？哪些方面可以做到性能优化？"><a href="#9、MySQL优化？哪些方面可以做到性能优化？" class="headerlink" title="9、MySQL优化？哪些方面可以做到性能优化？"></a>9、MySQL优化？哪些方面可以做到性能优化？</h2><ul><li><p>为搜索字段创建索引</p></li><li><p>避免使用Select *， 列出需要查询的字段</p></li><li><p>垂直分割分表</p></li><li><p>选择正确的存储引擎</p></li></ul><hr><h2 id="10、数据库隔离级别"><a href="#10、数据库隔离级别" class="headerlink" title="10、数据库隔离级别"></a>10、数据库隔离级别</h2><ul><li><p><b>未提交读（READ-UNCOMMITTED）</b>：事务中发生了修改，即使没有提交，其他事务也是可见的。<br>比如对于一个数A，原来50修改为100，但是还没有提交修改，另一个事务看到这个修改。<br>而此时原事务发生了回滚，这时A还是50，但是另一个事务看到的A是100。<br><b>可能会导致脏读、幻读、不可重复读</b></p></li><li><p><b>提交读（READ-COMMITTED）</b>：对于一个事务从开始直到提交之前，所做的任何修改是其他事务不可见的。<br>比如对于一个数A原来是50，然后提交修改成100，这时另一个事物在A提交修改之前读取的A是50，刚读取完，A就被修改为100。<br>此时另一个事物再进行读取就发现A突然变成了100。<br><b>可以阻止脏读；可能导致幻读、不可重复读</b></p></li><li><p><b>重复读（REPEATABLE-READ）</b>：就是对一个记录读取多次的记录是相同的，比如对于一个数A读取的话一直是A，前后两次读取的A是一致的。<br><b>可以阻止脏读、不可重复读；可能导致幻读</b></p></li><li><p><b>可串行化（SERIALIZABLE）</b>：在并发情况下，和串行化的读取的结果是一致的，没什么不同，比如不会发生脏读和幻读。<br><b>可以阻止脏读、不可重复读、幻读</b></p></li></ul><table><thead><tr><th align="left">隔离级别</th><th align="left">脏读</th><th align="left">不可重复读</th><th align="left">幻读</th></tr></thead><tbody><tr><td align="left">未提交读READ-UNCOMMITTED</td><td align="left">√</td><td align="left">√</td><td align="left">√</td></tr><tr><td align="left">提交读READ-COMMITTED</td><td align="left">×</td><td align="left">√</td><td align="left">√</td></tr><tr><td align="left">重复读REPEATABLE-READ</td><td align="left">×</td><td align="left">×</td><td align="left">√</td></tr><tr><td align="left">可串行化SERIALIZABLE</td><td align="left">×</td><td align="left">×</td><td align="left">×</td></tr></tbody></table><p>MySQL InnoDB存储引擎默认支持的隔离级别是REPEATABLE-READ（可重复读）</p><p>需要注意：<br>  与SQL标准不同的地方在于InnoDB存储引擎在REPEATABLE-READ（可重复读）事务隔离级别下使用的是<code>Next-Key Lock</code>算法，因此可以避免幻读产生。</p><p>  这与其他数据库系统（如SQL Server）是不同的。<br>  所以InnoDB存储引擎的默认支持隔离级别是REPEATABLE-READ（可重复读）已经可以完全保证事务的隔离性要求<br>  即InnoDB的可重复度达到了SQL标准的SERIALIZABLE（可串行化）隔离级别</p><p>因为隔离级别越低，事务请求的锁越少，所以大部分数据库系统的隔离级别都是READ-COMMITTED（读已提交）<br>但是InnoDB存储引擎默认使用<b>REPEATABLE-READ（可重复读）并不会有任何性能损失</b></p><h2 id="InnoDB存储引擎在分布式事务情况下一般会用到SERIALIZABLE（可串行化）隔离级别。"><a href="#InnoDB存储引擎在分布式事务情况下一般会用到SERIALIZABLE（可串行化）隔离级别。" class="headerlink" title="InnoDB存储引擎在分布式事务情况下一般会用到SERIALIZABLE（可串行化）隔离级别。"></a>InnoDB存储引擎在分布式事务情况下一般会用到SERIALIZABLE（可串行化）隔离级别。</h2><h2 id="11、都知道数据库索引采用B-树而非B树，主要原因？"><a href="#11、都知道数据库索引采用B-树而非B树，主要原因？" class="headerlink" title="11、都知道数据库索引采用B+树而非B树，主要原因？"></a>11、都知道数据库索引采用B+树而非B树，主要原因？</h2><p>主要原因：<br>B+树只要遍历叶子结点就可以实现整棵树的遍历，而且在数据库中基于范围的查询是很频繁的<br>B树只能中序遍历所有结点，效率太低。</p><hr><h2 id="12、文件索引和数据库索引为什么使用B-树？"><a href="#12、文件索引和数据库索引为什么使用B-树？" class="headerlink" title="12、文件索引和数据库索引为什么使用B+树？"></a>12、文件索引和数据库索引为什么使用B+树？</h2><p>文件和数据库都是需要较大的存储，也就是说他们不可能全部存储在内存中，故需要存储到磁盘上。</p><ul><li><p>而所谓索引，则为了数据的快速定位和查找<br>那么索引的结构组织要尽量减少查找过程中磁盘I&#x2F;O的存取次数，因此B+树相比B树更为合适。<br>数据库系统巧妙利用了局部性原理和磁盘预读原理，将一个节点的大小设为等于一个页，这样每个结点只需要一次I&#x2F;O就可以完全载入。</p><p>而红黑树这种结构，高度明显要深很多，并且由于逻辑上很近的节点（父子）物理上可能很远，无法利用局部性。</p></li><li><p>最重要的是，B+树还有一个最大的好处：方便扫库。<br>B树必须用中序遍历的方法按序扫库，而B+树直接从叶子结点挨个扫一遍即可<br>B+树支持range-query非常方便，而B树不支持，这是数据库选用B+树的最主要原因。</p></li><li><p>B+树的磁盘读写代价更低：<br>B+树的内部结点并没有指向关键字具体信息的指针，因此其内部结点相比B树更小。<br>如果把所有同一内部结点的关键字存放在同一块盘中，那么盘块所能容纳的关键字数量也越多。<br>一次性读入内存中需要查找的关键字也就越多，相对于I&#x2F;O次数变少（降低I&#x2F;O次数，增加速度）</p></li><li><p>B+树的查询效率更加稳定：<br>由于内部结点并不是指向文件内容的节点，而只是叶子结点中关键字的索引，所以，任何关键字的查找必须从根节点一路找到叶子结点。<br>所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。</p></li></ul><hr><h2 id="13、视图？游标？"><a href="#13、视图？游标？" class="headerlink" title="13、视图？游标？"></a>13、视图？游标？</h2><p>视图是一种虚拟的表，通常是有一个表或者多个表的行或列的子集，具有和物理表相同的功能</p><p>游标是对查询出来的结果集作为一个单元来有效的处理。<br>一般不使用游标，但是需要逐条处理数据的时候，游标显得十分重要。</p><hr><h2 id="14、MySQL中为什么要有事务回滚机制"><a href="#14、MySQL中为什么要有事务回滚机制" class="headerlink" title="14、MySQL中为什么要有事务回滚机制"></a>14、MySQL中为什么要有事务回滚机制</h2><p>在MySQL中，恢复机制是通过回滚日志（Undo log）实现的，所有事务进行的修改都会先记录到这个回滚日志中，然后在对数据库中的对应行进行写入。<br>当事务已经被提交之后，就无法再次回滚了。</p><p>回滚日志作用：</p><ol><li>能够在发生错误或者用户执行ROLLBACK的时候提供回滚相关的信息</li><li>在整个系统发生崩溃、数据库进程直接被杀死后，当用户再次启动数据库进程时，还能够立即通过查询回滚日志将之前未完成的事务进行回滚。<br>这也就需要回滚日志必须先于数据持久化到硬盘上，是我们需要先写日志后写数据库的主要原因。</li></ol><hr><h2 id="15、数据库引擎InnoDB和MyISAM的区别"><a href="#15、数据库引擎InnoDB和MyISAM的区别" class="headerlink" title="15、数据库引擎InnoDB和MyISAM的区别"></a>15、数据库引擎InnoDB和MyISAM的区别</h2><ul><li><p>InnoDB</p><ul><li><p>是MySQL默认的事务型存储引擎，只有在需要它不支持的特性时，才考虑使用其他存储引擎。【首选】</p></li><li><p>实现了四个标准的隔离级别，默认级别是可重复读（REPEATABLE READ）。<br>在可重复读隔离级别下，通过多版本并发控制（MVCC）+间隙锁（Next-Key Locking）防止幻读</p></li><li><p>主索引是聚簇索引，在索引中保存了数据，从而避免直接读磁盘，因此对查询性能有很大提升</p></li><li><p>内部做了很多优化，包括从磁盘读取数据时采用的可预测性读、能够加快读操作并且自动创建的自适应哈希索引、能够加速插入操作的插入缓冲区等。</p></li><li><p>支持真正的在线热设备。其他存储引擎不支持在线热备份，要获取一致性视图需要停止对所有表的写入，而在读写混合场景中，停止写入可能意味着停止读取。</p></li></ul></li><li><p>MyISAM</p><ul><li><p>设计简单，数据以紧密格式存储。对于只读数据，或者表比较小、可以容忍修复操作，则依然可以使用它。</p></li><li><p>提供了大量的特性，包括压缩表、空间数据索引等。</p></li><li><p>不支持事务。</p></li><li><p>不支持行级锁，只能对整张表加锁，读取时会对需要读到的所有表加共享锁，写入时则对表加排它锁。<br>但在表有读取操作的同时，也可以往表中插入新的记录，这被称为并发插入（CONCURRENT INSERT）。</p></li></ul></li><li><p>总结</p><ul><li>事务：InnoDB是事务型的，可以使用<code>COMMIT</code>和<code>ROLLBACK</code>语句。</li><li>并发：MyISAM只支持表级锁，InnoDB支持行级锁</li><li>外键：InnoDB支持外键</li><li>备份：InnoDB支持在线热备份</li><li>崩溃恢复：MyISAM崩溃后发生损坏的概率比InnoDB高很多，而且恢复速度也更慢</li><li>其他特性：MyISAM支持压缩表和空间数据索引</li></ul></li></ul><hr><h2 id="16、数据库并发事务会带来哪些问题？"><a href="#16、数据库并发事务会带来哪些问题？" class="headerlink" title="16、数据库并发事务会带来哪些问题？"></a>16、数据库并发事务会带来哪些问题？</h2><p>数据库并发会带来脏读、幻读、丢弃更改、不可重复读四个常见问题</p><p><b>脏读</b>：在第一个修改事务和读取事务进行的时候，读取事务读到的数据为100，这是修改之后的数据，但是之后该事务满足一致性等特性而做了回滚操作，那么读取事务的结果就是脏数据了。【读取的数据和他应该是的数据不一致】</p><p><b>幻读</b>：一般是T1在某个范围内进行修改操作（增加或者删除），而T2读取该范围导致读到的数据是修改之间的了。【强调范围】</p><p><b>丢弃修改</b>：两个写事务T1,T2同时对A &#x3D; 0进行递增操作，结果T2覆盖了T1，导致最终结果是1而不是2，事务被覆盖。</p><p><b>不可重复读</b>：T2读取一个数据，然后T1对该数据做了修改。如果T2再次读取这个数据，此时读取的结果和第一次读取的结果不同。【两次读结果不同】</p><blockquote><p>脏读：读的变量在后来被修改了<br>幻读：读取的范围之间的值有变化<br>丢弃修改：两个同时写，一个写会被覆盖<br>不可重复读：两次读的结果不同</p></blockquote><ul><li><p>脏读</p><img src="/2022/02/22/Database/DirtyRead.png" class=""><p>第一个事务首先读取var变量为50，接着准备更新为100的时候，并未提交。<br>第二个事务已经读取var变量未100，此时第一个事务进行了回滚。<br>最终导致第二个事务读取的var和数据库的var不一样。</p></li><li><p>幻读</p><p>T1读取某个范围的数据。<br>T2在这个范围内插入新的数据。<br>T1再次读取这个范围的数据，此时读取的结果和第一次读取的结果不同。</p></li><li><p>丢弃修改</p><img src="/2022/02/22/Database/ModifyCancel.png" class=""><p>T1和T2两个事务都对一个数据进行修改。<br>T1先修改，T2后修改，T2的修改覆盖了T1的修改。</p></li></ul><p>例如：事务1读取某表中的数据A &#x3D; 50，事务2也读取A &#x3D; 50，事务1修改A &#x3D; A + 50，事务2也修改A &#x3D; A + 50，最终结果A &#x3D; 100，事务1 的修改被丢失。</p><ul><li>不可重复读<img src="/2022/02/22/Database/UnrepeatedRead.png" class="">T2读取一个数据，T1对该数据做了修改。<br>如果T2再次读取这个数据，此时读取的结果和第一次读取的结果不同。</li></ul><hr><h2 id="17、数据库悲观锁和乐观锁的原理和应用场景？"><a href="#17、数据库悲观锁和乐观锁的原理和应用场景？" class="headerlink" title="17、数据库悲观锁和乐观锁的原理和应用场景？"></a>17、数据库悲观锁和乐观锁的原理和应用场景？</h2><ul><li><p>悲观锁<br>先获取锁，再进行业务操作，一般就是利用类似 SELECT … FOR UPDATE 这样的语句，对数据加锁，避免其他事物以外修改数据。<br>当数据库执行 SELECT … FOR UPDATE 时会获取被SELECT中的数据行的行锁<br>SELECT FOR UPDATE获取的行锁会在当前事物结束时自动释放，因此必须在事务中使用</p></li><li><p>乐观锁<br>先进行业务操作，只在最后实际更新数据时进行检查数据是否被更新过。<br>Java并发包中的AtomicFieldUpdater类似，也是利用CAS机制，并不会对数据加锁，而是通过对比数据的时间戳或版本号，来实现乐观锁需要的版本判断。</p></li></ul><hr><h2 id="18、MySQL索引主要使用的两种数据结构是什么？"><a href="#18、MySQL索引主要使用的两种数据结构是什么？" class="headerlink" title="18、MySQL索引主要使用的两种数据结构是什么？"></a>18、MySQL索引主要使用的两种数据结构是什么？</h2><ul><li><p>哈希索引<br>对于哈希索引来说，底层的数据结构肯定是哈希表。<br>因此<b>在绝大多数需求为单条记录查询</b>的时候，可以选择哈希索引，查询性能最快；<br>其余大部分场景，建议选择BTree索引</p></li><li><p>BTree索引<br>MySQL的BTree索引使用的是B树中的B+Tree<br>BTree索引就是一种将索引值按一定的算法，存入一个树形的数据结构中（二叉树），每次查询都是从树的入口root开始，依次遍历Node，获得叶子结点。</p></li></ul><h2 id="但对于主要的两种存储引擎（MyISAM和InnoDB）的实现方式是不同的。"><a href="#但对于主要的两种存储引擎（MyISAM和InnoDB）的实现方式是不同的。" class="headerlink" title="但对于主要的两种存储引擎（MyISAM和InnoDB）的实现方式是不同的。"></a>但对于主要的两种存储引擎（MyISAM和InnoDB）的实现方式是不同的。</h2><h2 id="19、数据库为什么要进行分库和分表？都放在一个库或者一张表中不行？"><a href="#19、数据库为什么要进行分库和分表？都放在一个库或者一张表中不行？" class="headerlink" title="19、数据库为什么要进行分库和分表？都放在一个库或者一张表中不行？"></a>19、数据库为什么要进行分库和分表？都放在一个库或者一张表中不行？</h2><p>分库和分表的目的在于：减小数据库的单库单标负担，提高查询性能，缩短查询时间。</p><ul><li><p>分表<br>可以减少数据库的单表负担，将压力分散到不同的表上，同时因为不同的表上的数据量少了，起到提高查询性能，缩短查询时间的作用。<br>此外，可以很大地缓解表锁的问题。<br>分表策略可以归纳为垂直拆分和水平拆分：</p><ul><li><p>水平分表：<br>取模分表就属于随机分表，而时间维度分表则属于连续分表。</p></li><li><p>垂直分表：<br>将不常用的字段单独拆分到另外一张扩展表<br>将大文本的字段单独拆分到另外一张扩展表<br>将不经常修改的字段放在同一张表中<br>将经常改变的字段放在另一张表中。</p></li></ul><p>对于海量用户场景，可以考虑取模分表，数据相对比较均匀，不容易出现热点和并发访问的瓶颈。</p><ul><li><p>库内分表：<br>仅仅是解决单表数据过大的问题，但并没有把单表的数据分散到不同的物理机上，因此并不能减轻MySQL服务器的压力<br>仍然存在同一个物理机上的资源竞争和瓶颈，包括CPU、内存、磁盘IO、网络带宽等。</p></li><li><p>分库和分表带来的分布式困境和应对之策。</p><ol><li><p>数据迁移和扩容问题：一般做法是通过程序先读出数据，然后按照指定的分表策略再讲数据写入到各个分表中。</p></li><li><p>分页与排序问题：需要在不同的分表中将数据进行排序并返回，并将不同分表返回的结果集进行汇总和再次排序，最后再返回给用户。</p></li></ol></li></ul></li></ul><hr><h2 id="20、不可重复读和幻读的区别？"><a href="#20、不可重复读和幻读的区别？" class="headerlink" title="20、不可重复读和幻读的区别？"></a>20、不可重复读和幻读的区别？</h2><ul><li><p>例子1（同样的条件，两次读取结果不一样）<br>事务1中读取 A &#x3D; 1000 的操作还没完成，事务2中修改了 A &#x3D; 2000。<br>此时事务1再读取 A 时候 A &#x3D; 2000，两次读取结果不一样</p></li><li><p>例子2（同样的条件，第1次和第2次读出来的记录数不一样）<br>某表中，X 字段大于3000的有4个记录<br>事务1中读取了X字段大于3000的人，共4条记录，<br>事务2中插入了一条X字段大于3000的记录<br>事务1再次读取时记录变为了5条，两次读取的记录数不一样。</p></li></ul><blockquote><p>不可重复读的重点是修改，幻读的重点在于新增或删除。</p></blockquote><hr><h2 id="21、MySQL中有四种索引类型？"><a href="#21、MySQL中有四种索引类型？" class="headerlink" title="21、MySQL中有四种索引类型？"></a>21、MySQL中有四种索引类型？</h2><ul><li><p>FULLTEXT（全文索引）<br>全文索引，目前只有MyISAM支持。<br>可以在CREATE TABLE, ALTER TABLE, CREATE INDEX使用<br>不过目前只有 CHAR, VARCHAR, TEXT 列上可以创建全文索引。</p></li><li><p>HASH（哈希）<br>由于HASH的唯一（几乎100%的唯一）以及类似键值对的形式，很适合作为索引。<br>HASH索引可以一次定位，不需要树形索引那样逐层查找，因此具有极高效率。<br>但这种高效有条件，即只在”&#x3D;”和”in”条件下高效，对于范围查询、排序和组合索引仍然效率不高。</p></li><li><p>BTREE<br>BTREE索引就是一种将索引值按一定算法，存入到一个树形的数据结构中（二叉树）<br>每次查询都是从树的入口root开始，依次遍历node，获取叶子结点。<br>这是MySQL里默认和最常用的索引类型。</p></li><li><p>RTREE<br>RTREE在MySQL中很少使用，仅支持Gemometry类型，支持该类型的存储引擎只有MyISAM、BDb、InnoDB、NDb、Archive几种。<br>相比于BTREE，RTREE的优势在于范围查找。</p></li></ul><hr><h2 id="22、视图的作用是什么？可以更改吗？"><a href="#22、视图的作用是什么？可以更改吗？" class="headerlink" title="22、视图的作用是什么？可以更改吗？"></a>22、视图的作用是什么？可以更改吗？</h2><p>视图是虚拟的表，与包含数据的表不一样，视图只包含使用时动态检索数据的查询；</p><p>不包含任何列或数据，使用视图可以简化复杂的sql操作，隐藏具体的细节，保护数据；<br>视图创建后，可以使用与表相同的方式利用他们。</p><p>视图不能被索引，也不能有关联的触发器或默认值，如果视图本身内有order by则对视图再次order by将被覆盖。</p><p>创建视图：create view xxx as xxx</p><p>对于某些视图比如未使用联合子查询分组聚集函数Distinct Union等，是可以对其更新的，对视图的更新将对基表进行更新。<br>但是视图主要用于简化检索，保护数据，并不用于更新，而且大部分视图都不可以更新。</p><blockquote><p>视图优点：</p><ol><li>视点集中，只用关心视图定义的数据而非引用表中数据</li><li>简化操作，可以只对视图本身查询，隐藏表与表之间复杂的连接</li><li>定制数据，可以让不同要求用户看到不同或相同的数据集</li><li>合并分割数据，不用更改表原先的结构，可以让视图保持原来的结构关系，外模式不变，但应用程序可以通过视图重载数据</li><li>安全性，用户只可以看到或修改他们能看到的数据，其他数据不可见也不可访问。</li></ol></blockquote><hr><h2 id="23、为什么时候B-Tree比BTree更适合实际应用中操作系统的文件索引和数据库索引？"><a href="#23、为什么时候B-Tree比BTree更适合实际应用中操作系统的文件索引和数据库索引？" class="headerlink" title="23、为什么时候B+Tree比BTree更适合实际应用中操作系统的文件索引和数据库索引？"></a>23、为什么时候B+Tree比BTree更适合实际应用中操作系统的文件索引和数据库索引？</h2><p>B+tree的磁盘读写代价更低，B+tree的查询效率更加稳定【因为必须查询到底】</p><p>数据库索引采用B+树而不是B树的主要原因：<br>  B+树只要遍历叶子结点就可以实现整棵树的遍历，而且在数据库中基于范围的查询是非常频繁的<br>  而B树只能中序遍历所有结点，效率太低。</p><p>B+树的特点：</p><ul><li>所有关键字都出现在叶子结点的链表中（稠密索引），且链表中的关键字恰好是有序的。</li><li>不可能在非叶子结点命中</li><li>非叶子结点相当于是叶子结点的索引（稀疏索引），叶子结点相当于是存储（关键字）数据的数据层。</li></ul><hr><h2 id="24、场景题：如果所在公司选择MySQL数据库作数据存储，一天五万条以上的增量，预计运维三年，优化手段？"><a href="#24、场景题：如果所在公司选择MySQL数据库作数据存储，一天五万条以上的增量，预计运维三年，优化手段？" class="headerlink" title="24、场景题：如果所在公司选择MySQL数据库作数据存储，一天五万条以上的增量，预计运维三年，优化手段？"></a>24、场景题：如果所在公司选择MySQL数据库作数据存储，一天五万条以上的增量，预计运维三年，优化手段？</h2><ul><li><p>设计良好的数据库结构，允许部分数据冗余，尽量避免join查询，提高效率。</p></li><li><p>选择合适的表字段数据结构类型和存储引擎，适当地添加索引。</p></li><li><p>MySQL库主从读写分离。</p></li><li><p>找规律分表，减少单表中的数据量提高查询速度。</p></li><li><p>添加缓存机制，比如Memcached，Apc等。</p></li><li><p>不经常改动的页面，生成静态页面。</p></li><li><p>书写高效率的SQL，例如SELECT * FROM TABLE 改为 SELECT field_1, field_2, field_3 FROM TABLE。</p></li></ul><hr><h2 id="25、什么时候需要建立数据库索引？"><a href="#25、什么时候需要建立数据库索引？" class="headerlink" title="25、什么时候需要建立数据库索引？"></a>25、什么时候需要建立数据库索引？</h2><p>适合：<br>  在最频繁使用的、用以缩小查询范围的字段，需要排序的字段上建立索引</p><p>不适合：</p><ol><li>对于查询中很少涉及的列或重复值较多的列</li><li>对于一些特殊的数据类型，不宜建立索引，比如文本字段（text）等。</li></ol><hr><h2 id="26、覆盖索引是什么？"><a href="#26、覆盖索引是什么？" class="headerlink" title="26、覆盖索引是什么？"></a>26、覆盖索引是什么？</h2><p>如果一个索引包含（或覆盖）所有需要查询的字段的值，称之为“覆盖索引”</p><p>在InnoDB存储引擎中，如果不是主键索引，叶子结点存储的是主键+列值。</p><p>最终还是要“回表”，也就是要通过主键再查找一次，这样就会比较慢。</p><h2 id="覆盖索引就是把要查询出的列和索引是对应的，不做回表操作。"><a href="#覆盖索引就是把要查询出的列和索引是对应的，不做回表操作。" class="headerlink" title="覆盖索引就是把要查询出的列和索引是对应的，不做回表操作。"></a>覆盖索引就是把要查询出的列和索引是对应的，不做回表操作。</h2><h2 id="27、数据库中的主键、超键、候选键、外键是什么？"><a href="#27、数据库中的主键、超键、候选键、外键是什么？" class="headerlink" title="27、数据库中的主键、超键、候选键、外键是什么？"></a>27、数据库中的主键、超键、候选键、外键是什么？</h2><ul><li><p>超键：在关系中能唯一标识<b>元组属性集</b>称为关系模式的超键【一个属性或者多个属性总和】</p></li><li><p>候选键：不含有<b>多余属性的超键</b>称为候选键。也就是在候选键中，任删除一个属性，就不是键了</p></li><li><p>主键：<b>用户选作元组标识的一个候选键称为主键</b></p></li><li><p>外键：如果关系模式R中<b>属性K是其他模式的主键</b>，那么K在模式R中称为外键。</p></li></ul><p>举例：</p><table><thead><tr><th align="left">学号</th><th align="left">姓名</th><th align="left">性别</th><th align="left">年龄</th><th align="left">系别</th><th align="left">专业</th></tr></thead><tbody><tr><td align="left">20020612</td><td align="left">A</td><td align="left">男</td><td align="left">20</td><td align="left">计算机</td><td align="left">软件开发</td></tr><tr><td align="left">20060613</td><td align="left">B</td><td align="left">男</td><td align="left">18</td><td align="left">计算机</td><td align="left">软件开发</td></tr><tr><td align="left">20060614</td><td align="left">C</td><td align="left">女</td><td align="left">19</td><td align="left">物理</td><td align="left">力学</td></tr><tr><td align="left">20060615</td><td align="left">D</td><td align="left">女</td><td align="left">17</td><td align="left">生物</td><td align="left">动物学</td></tr><tr><td align="left">20060616</td><td align="left">E</td><td align="left">男</td><td align="left">21</td><td align="left">化学</td><td align="left">食品化学</td></tr><tr><td align="left">20060617</td><td align="left">F</td><td align="left">女</td><td align="left">20</td><td align="left">生物</td><td align="left">植物学</td></tr></tbody></table><ol><li><p>超键：例子中可以发现，学号是标识学生实体的唯一标识。那么元组的超键就为学号。<br>  除此之外，还可以将它和其他属性组合起来，例如：（学号，性别）、（学号，年龄）</p></li><li><p>候选键：学号是一个可以唯一标识元组的唯一标识，因此学号是一个候选键。事实上，候选键是超键的子集。<br>    比如（学号，年龄）是超键，但并非候选键。因为它还有了额外的属性。【不含有多余属性的超键】</p></li><li><p>主键：例子中元组候选键是学号，但选定学号为该元组的唯一标识，学号就成为了主键。</p></li><li><p>外键：相对于主键，例如在该表中，学号是主键，在成绩单表中，也有学号字段，因此学号是成绩单表的外键。</p></li></ol><hr><h2 id="28、数据库三大范式"><a href="#28、数据库三大范式" class="headerlink" title="28、数据库三大范式"></a>28、数据库三大范式</h2><ul><li><p>第一范式<br>在任何一个关系数据库中，第一范式（1NF）是对关系模式的基本要求，不满足第一范式（1NF）的数据库就不是关系数据库。<br>所谓第一范式（1NF）是指数据库表的每一列都是不可分割的基本数据项，同一列中不能有多个值，即实体的某个属性不能有多个值或不能有重复属性。</p><p>如果出现重复的属性，则可能需要定义一个新的实体，新的实体由重复的属性构成，新实体与原实体之间为一对多关系。<br>在第一范式（1NF）中表的每一行只包含一个实例的信息。</p><blockquote><p>简言之，<b>第一范式是无重复的列</b></p></blockquote></li><li><p>第二范式<br>第二范式（2NF）是在第一范式（1NF）的基础上建立起来的。<br>即满足第二范式（2NF）必须先满足第一范式（1NF）。</p><p>第二范式（2NF）要求数据库表中的每个实例或行必须可被<b>唯一地区分</b>。</p><p>为实现区分通常需要为表加上一个列，以存储各个实例的唯一标识。<br>这个唯一属性列被称为主关键字或主键、主码。<br>第二范式（2NF）要求实体的属性完全依赖于主关键字。</p><p>所谓完全依赖是指不能存在仅依赖关键字一部分的属性，如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体和原实体之间应该是一对多的关系。<br>为了实现区分通常需要为表加上一个列，以存储各个实例的唯一标识。</p><blockquote><p>简言之，<b>第二范式就是非主属性非部分依赖于主关键字</b>。</p></blockquote></li><li><p>第三范式<br>满足第三范式（3NF）必须先满足第二范式（2NF）。<br>简言之，第三范式（3NF）要求一个数据库表中不包含已在其他表中已包含的非主关键字信息。</p><p>例如：存在一个部门信息表，其中每个部门有部门编号（dept_id）、部门名称、部门简介等信息。<br>  那么在员工信息表中列出部门编号后就不能再将部门名称、部门简介等与部门有关的信息再加入员工信息表中。<br>  如果不存在部门信息表，则根据第三范式（3NF）也应该构建他它，否则就会有大量的数据冗余。</p><blockquote><p>简言之，第三范式就是属性不依赖于其他非主属性</p></blockquote></li></ul><hr><h2 id="29、数据库三大范式精要总结"><a href="#29、数据库三大范式精要总结" class="headerlink" title="29、数据库三大范式精要总结"></a>29、数据库三大范式精要总结</h2><ol><li><p>简单归纳：</p></li><li><p>第一范式（1NF）：字段不可分</p></li><li><p>第二范式（2NF）：有主键，非主键字段依赖主键</p></li><li><p>第三范式（3NF）：非主键字段不能相互依赖【员工ID，员工信息，部门ID，部门信息】</p></li><li><p>解释：</p></li><li><p>1NF：原子性。字段不可再分，否则就不是关系数据库。</p></li><li><p>2NF：唯一性。一个表只说明一个事物。</p></li><li><p>3NF：每列都与主键有直接关系，不存在传递依赖。</p></li></ol><hr><h2 id="30、MySQL常见的存储引擎InnoDB，MyISAM的区别？适用场景分别是？"><a href="#30、MySQL常见的存储引擎InnoDB，MyISAM的区别？适用场景分别是？" class="headerlink" title="30、MySQL常见的存储引擎InnoDB，MyISAM的区别？适用场景分别是？"></a>30、MySQL常见的存储引擎InnoDB，MyISAM的区别？适用场景分别是？</h2><ol><li><p>事务：MyISAM不支持，InnoDB支持；</p></li><li><p>锁级别：MyISAM表级锁，InnoDB行级锁及外键约束；</p></li><li><p>存储行数：MyISAM存储表的总行数，InnoDB不存储表的总行数；</p></li><li><p>索引：MyISAM采用非聚簇索引，B+树叶子结点<b>存储指向数据文件的指针</b>。<br> InnoDB主键索引采用聚簇索引，B+树叶子<b>存储数据</b>。</p></li></ol><p>适用场景：<br>  MyISAM适合：插入不频繁，查询非常频繁，如果执行大量的SELECT，MyISAM是更好的选择，没有事务。<br>  InnoDB适合：可靠性要求比较高，或者要求事务；表更新和查询都相当频繁，大量的INSERT或UPDATE</p><hr><h2 id="31、事务四大特性（ACID）原子性、一致性、隔离性、持久性？"><a href="#31、事务四大特性（ACID）原子性、一致性、隔离性、持久性？" class="headerlink" title="31、事务四大特性（ACID）原子性、一致性、隔离性、持久性？"></a>31、事务四大特性（ACID）原子性、一致性、隔离性、持久性？</h2><ol><li><p>原子性（Atomicity）<br>  原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚。<br>  因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。</p></li><li><p>一致性（Consistency）<br>  事务开始前和结束后，数据库的完整性约束没有被破坏。<br>  比如A向B转账，不可能A扣了钱，B却没收到。</p></li><li><p>隔离性（Isolation）<br>  隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事物之间要相互隔离。<br>  同一时间，只允许一个事务请求同一数据，不同的事务之间彼此没有任何干扰。<br>  比如A正在从一张银行卡中取钱，在A取钱的过程结束前，B不能向这张卡转账。<br>  事物的隔离性，数据库提供了多种隔离级别。【READ-UNCOMMITTD&#x2F;READ-COMMITTED&#x2F;REPEATABLE-READ&#x2F;SERIALIZABLE】</p></li><li><p>持久性（Durability）<br>  持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的。<br>  即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</p></li></ol><hr><h2 id="32、SQL中的NOW-和CURRENT-DATA-两个函数有什么区别？"><a href="#32、SQL中的NOW-和CURRENT-DATA-两个函数有什么区别？" class="headerlink" title="32、SQL中的NOW()和CURRENT_DATA()两个函数有什么区别？"></a>32、SQL中的NOW()和CURRENT_DATA()两个函数有什么区别？</h2><p>NOW()命令用于显示当前年份，月份，日期，小时，分钟和秒。<br>CURRENT_DATE()仅显示当前年份，月份和日期。</p><hr><h2 id="33、聚合索引？"><a href="#33、聚合索引？" class="headerlink" title="33、聚合索引？"></a>33、聚合索引？</h2><p>聚簇索引就是按照拼音查询<br>非聚簇索引就是按照偏旁等进行查询</p><p>其实汉语字典<code>正文</code>本身就是一个聚簇索引。</p><p>比如要查“安”字，会自然翻开字典前几页，因为“安”的拼音是“an”<br>而按照拼音排序，汉字的字典是以英文字母“a”开头并以“z”结尾的，那么“安”就自然地排在字典的首部。<br>如果翻完了所有“a”开头的部分仍找不到，说明字典中没这个字；<br>如果查“张”字，那也会将字典翻到最后部分，因为“张”的拼音是“zhang”。也就是说字典的正文部分本身就是一个目录，不需要在找其他目录来找到想要内容。</p><h2 id="于是，把这种正文内容本身就是一种按照一定规则排列的目录称为“聚簇索引”。"><a href="#于是，把这种正文内容本身就是一种按照一定规则排列的目录称为“聚簇索引”。" class="headerlink" title="于是，把这种正文内容本身就是一种按照一定规则排列的目录称为“聚簇索引”。"></a>于是，把这种<b>正文内容本身就是一种按照一定规则排列的目录称为“聚簇索引”</b>。</h2><h2 id="34、什么是非聚簇索引"><a href="#34、什么是非聚簇索引" class="headerlink" title="34、什么是非聚簇索引"></a>34、什么是非聚簇索引</h2><p>如果认识某个字，可以快速地从自动中查到这个字。</p><p>但也可能会遇到不认识的字，不知道发音，这时候就不能按照刚才的方法找到要查的字，而需要去根据“偏旁部首”查到要找的字<br>然后根据这个字的页码直接翻到某页来找到要找的字（相当于找到页码）。</p><p>但结合“部首目录”和“检字表”查到的字的排序并不是真正正文的排序方法。<br>例如“张”，查部首检字表显示672页。“驰”页码显示63页。“弩”页码显示390页。</p><p>显然，这些字并不是真正的分别位于“张”字上下方，但看到的连续的三个字实际上就是他们在非聚簇索引中的排序，是字典正文中的字在非聚簇索引中的映射。<br>我们可以通过这种方式来找到需要的字，但需要两个过程，<code>先找目录，再翻到页码</code></p><h2 id="于是，把目录纯粹是目录，正文纯粹是正文的排序方式称为“非聚簇索引”"><a href="#于是，把目录纯粹是目录，正文纯粹是正文的排序方式称为“非聚簇索引”" class="headerlink" title="于是，把目录纯粹是目录，正文纯粹是正文的排序方式称为“非聚簇索引”"></a>于是，把<b>目录纯粹是目录，正文纯粹是正文的排序方式称为“非聚簇索引”</b></h2><h2 id="35、聚簇索引和非聚簇索引的区别是什么？"><a href="#35、聚簇索引和非聚簇索引的区别是什么？" class="headerlink" title="35、聚簇索引和非聚簇索引的区别是什么？"></a>35、聚簇索引和非聚簇索引的区别是什么？</h2><p>聚簇索引和非聚簇索引的区别在于：<br>  通过聚簇索引可以查到需要查找的数据<br>  通过非聚簇索引可以查到记录对应的主键值，再使用主键值通过聚簇索引查找到需要的数据。</p><p>  聚簇索引和非聚簇索引的根本区别是表记录的排列顺序和索引的排列顺序是否一致。</p><p>聚簇索引（InnoDB）的叶结点就是数据结点<br>非聚簇索引（MyISAM）的叶结点仍然是索引结点，只不过其包含一个指向对应数据块的指针。</p><hr><h2 id="36、创建索引时需要注意什么？"><a href="#36、创建索引时需要注意什么？" class="headerlink" title="36、创建索引时需要注意什么？"></a>36、创建索引时需要注意什么？</h2><ul><li><p>非空字段：应该制定列为NOT NULL，除非想存储NULL。<br>在MySQL中，含有空值的列很难进行查询优化，因为它们使得索引、索引的统计信息以及比较运算更加复杂。<br>应该用0、一个特殊的值或者一个空串代替空值。</p></li><li><p>取值离散大的字段：<br>（变量各个取值之间的差异速度）的列放到联合索引的前面，可以通过count()函数查看字段的差异值。<br>返回值越大说明字段的唯一值越多字段的离散程度高。【说明不同键的信息越多】</p></li><li><p>索引字段越小越好：<br>数据库的数据存储以页为单位，一页存储的数据越多，一次IO操作获取的数据越大、效率越高。<br>唯一、不为空、经常被查询的字段更适合建索引。【字段越小，一页存储的东西越多】</p></li></ul><hr><h2 id="37、MySQL中CHAR和VARCHAR的区别有哪些？"><a href="#37、MySQL中CHAR和VARCHAR的区别有哪些？" class="headerlink" title="37、MySQL中CHAR和VARCHAR的区别有哪些？"></a>37、MySQL中CHAR和VARCHAR的区别有哪些？</h2><ul><li><p>char的长度是不可变的，用空格填充到指定长度大小，而varchar的长度是可变的。</p></li><li><p>char的存取速度比varchar要快得多</p></li><li><p>char的存储方式是：对英文字符（ASCII）占用1个字节，对一个汉字占用2个字节。【相当于填充到1B或者2B】<br>varchar的存储方式是：对每个英文字符占用2个字节，汉字也占用2个字节。</p></li></ul><hr><h2 id="38、MySQL索引使用的注意事项"><a href="#38、MySQL索引使用的注意事项" class="headerlink" title="38、MySQL索引使用的注意事项"></a>38、MySQL索引使用的注意事项</h2><p>MySQL索引通常是被用于提高Where条件的数据行匹配时的搜索速度，在索引使用过程中，存在一些使用细节和注意事项。</p><p>函数，运算，否定操作符，连接条件，多个单列索引，最左前缀原则，范围查询，不会包含有NULL值的列，like语句不要在列上使用函数和进行运算。</p><ol><li>不要在列上使用函数，这将导致索引失效而进行全表扫描。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> news <span class="keyword">where</span> <span class="keyword">year</span>(publish_time) <span class="operator">&lt;</span> <span class="number">2017</span></span><br><span class="line"><span class="comment">-- 避免使用函数</span></span><br></pre></td></tr></table></figure></li></ol><p>为了使用索引，防止执行全表扫描，可以进行改造。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> news <span class="keyword">where</span> publish_time <span class="operator">&lt;</span> <span class="string">&#x27;2017-01-01&#x27;</span></span><br></pre></td></tr></table></figure><p>还有一个建议，不要在列上进行运算，这也将导致索引失效而进行全表扫描。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> news <span class="keyword">where</span> id <span class="operator">/</span> <span class="number">100</span> <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>为了使用索引，防止执行全表扫描，可以进行改造。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> news <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> <span class="operator">*</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><ol start="2"><li>尽量避免使用 !&#x3D; 或 not in 或 &lt;&gt; 等否定运算符<br>应该尽量避免在where子句中使用 !&#x3D; 或 not in 或 &lt;&gt; 操作符，因为这几个操作符都会导致索引失效而进行全表扫描。</li></ol><p>尽量避免使用or来连接条件，应该尽量避免在where子句中使用or来连接条件，因为这会导致索引失效而进行全表扫描。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> news <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">or</span> id <span class="operator">=</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><ol start="3"><li>多个单列索引并不是最佳选择<br>MySQL只能使用一个索引，会从多个索引中选择一个限制最为严格的索引，因此，为多个列创建单列索引，并不能提高MySQL的查询性能。</li></ol><p>假如，有两个单列索引，分别为：<br>news_year_idx(news_year)和news_month_idx(news_month)。</p><p>现在，有一个场景需要针对咨询的年份和月份进行查询，那么SQL语句可以写成</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> news <span class="keyword">where</span> news_year <span class="operator">=</span> <span class="number">2017</span> <span class="keyword">and</span> news_month <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>事实上，MySQL只能使用一个单列索引。<br>为了提高性能，可以使用复合索引news_year_month_idx(news_year, news_month)保证news_year和news_month两个列都被索引覆盖。</p><ol start="4"><li>复合索引的最左前缀原则<br>复合索引遵守“最左前缀”原则，即在查询条件中使用了复合索引的第一个字段，索引才会被使用。</li></ol><p>因此，在复合索引中索引列的顺序至关重要。如果不是按照所以你的最左列开始查找，则无法使用索引。<br>假设，有一个场景只需要针对咨询的月份进行查询，那么SQL语句可以写成：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> news <span class="keyword">where</span> news_month <span class="operator">=</span> <span class="number">1</span> </span><br><span class="line"><span class="comment">-- 最左使用的是news_year，而非news_month，索引不会被使用</span></span><br></pre></td></tr></table></figure><p>此时，无法使用news_year_month_idx(news_year, news_month)索引<br>因为遵守“最左前缀”原则，在查询条件中没有使用复合索引的第一个字段，索引不会被使用。</p><ol start="5"><li><p>覆盖索引的好处<br>如果一个索引包含所有需要查询的字段的值，直接根据索引的查询结果返回数据，而无需读表，能够极大地提高性能。<br>因此可以定义一个让索引包含的额外的列，即这个列对于索引而言是无用的。</p></li><li><p>范围查询对多列查询的影响<br>查询中某个列有范围查询，则其右边所有列都无法使用索引优化查找。</p></li></ol><p>举个例子：假设一个场景需要查询本周发布的咨询文章，其中的条件是必须是启用状态，且发布时间在本周内。<br>那么SQL语句可以写成：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> news <span class="keyword">where</span> publish_time <span class="operator">&gt;=</span> <span class="string">&#x27;2017-01-02&#x27;</span> <span class="keyword">and</span> publish_time <span class="operator">&lt;=</span> <span class="string">&#x27;2017-01-08&#x27;</span> <span class="keyword">and</span> enable <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>这种情况下，因为范围查询对多列查询的影响，将导致news_publish_idx(publish_time, enable)索引中publish_time右边所有列都无法使用索引优化查找。</p><p>换句话说，news_publish_idx(publish_time, enable)索引等价于news_publish_idx(publish_time)。</p><p>对于这种情况，可以：<br>对于范围查询，务必要注意它带来的副作用，并且尽量少用范围查询，可以用别的方法间接实现业务场景。</p><p>例如：上面案例的需求是查询本周发布的咨询文章，一次可以创建一个news_weekth字段用来存储咨询文章周信息，使得范围查询变成普通查询，SQL可以改写：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> news <span class="keyword">where</span> news_weekth <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> enable <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>然而，并不是所有的范围查询都可以进行改造，对于必须使用范围查询但无法改造的情况，可以：<br>不必试图用SQL来解决所有问题，可以使用其他数据存储技术控制时间轴，如Redis的SortedSet有序集合保存时间，或者通过缓存方式缓存查询结果提高性能。</p><ol start="7"><li><p>索引不会包含有NULL值的列<br>只要列中包含有NULL值都将不会被包含在索引中，复合索引中只要有一列含有NULL值，那么这一列对于此复合索引就是无效的。<br>因此，在数据库设计时，除非有一个特别原因使用NULL值，否则尽量不要让字段默认值为NULL。</p></li><li><p>隐式转换的影响<br>当查询条件左右两侧类型不匹配时会发生隐式转换，隐式转换带来的影响就是可能导致索引失效而进行全表扫描。<br>下面的案例中，date_str是字符串，然而匹配的是整数类型，从而发生隐式转换。</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> news <span class="keyword">where</span> date_str <span class="operator">=</span> <span class="number">201701</span></span><br></pre></td></tr></table></figure><p>因此要谨记隐式转换的危害，时刻注意通过同类型进行比较。</p><ol start="9"><li>like语句的索引失效问题<br>like的方式进行查询，在like “value %” 可以使用索引，但是对于 like “%value%” 这样的方式，执行全表查询，这在数据量小的表，不存在性能问题。<br>但是对于海量数据，全表扫描十分可怕。<br>所以根据业务需求，考虑使用ElasticSearch 或 Solr 是个不错的方案。</li></ol><hr><h2 id="39、MySQL中有哪些索引？特点？"><a href="#39、MySQL中有哪些索引？特点？" class="headerlink" title="39、MySQL中有哪些索引？特点？"></a>39、MySQL中有哪些索引？特点？</h2><ul><li><p>普通索引：仅加速查询</p></li><li><p>唯一索引：加速查询 + 列值唯一（可以有NULL）</p></li><li><p>主键索引：加速查询 + 列值唯一（不可有NULL） + 表中只有一个</p></li><li><p>组合索引：多列值组成一个索引，专门用于组合搜索，其效率大于索引合并</p></li><li><p>全文索引：对文本的内容进行分词，进行搜索</p></li><li><p>索引合并：使用多个单列索引组合搜索</p></li><li><p>覆盖索引：select的数据列只用从索引中就能够取得，不必读取数据行，换句话说查询列要被所建的索引覆盖</p></li><li><p>聚簇索引：表数据是和主键一起存储的，主键索引的叶子结点存储了行数据（包含了主键值），二级索引的叶结点存储行的主键值。【副索引查主键】<br>     使用的是B+树作为索引的存储结构，非叶子结点都是索引关键字，但非叶子结点中的关键字中不存储对应记录的具体内容或内容地址。<br>     叶子结点上的数据是主键与具体记录（数据内容）</p></li></ul><hr><h2 id="40、既然索引有那么多优点，为什么不对表的每一列创建一个索引？"><a href="#40、既然索引有那么多优点，为什么不对表的每一列创建一个索引？" class="headerlink" title="40、既然索引有那么多优点，为什么不对表的每一列创建一个索引？"></a>40、既然索引有那么多优点，为什么不对表的每一列创建一个索引？</h2><ul><li><p>当对表中数据进行增加、删除和修改的时候，<b>索引也要动态地维护</b>，这样就降低了数据的维护速度。</p></li><li><p><b>索引需要占物理空间</b>，除了数据表占数据空间之外，每个索引还要占一定的物理空间，如果要建立聚簇索引，那么需要的空间也就更大。</p></li><li><p><b>创建索引和维护索引要耗费时间</b>，这种时间会随着数据量的增加而增加。</p></li></ul><hr><h2 id="41、索引是如何提高查询速度的？"><a href="#41、索引是如何提高查询速度的？" class="headerlink" title="41、索引是如何提高查询速度的？"></a>41、索引是如何提高查询速度的？</h2><h2 id="将无序的数据变成相对有序的数据（就像查有目的一样）"><a href="#将无序的数据变成相对有序的数据（就像查有目的一样）" class="headerlink" title="将无序的数据变成相对有序的数据（就像查有目的一样）"></a>将无序的数据变成相对有序的数据（就像查有目的一样）</h2><h2 id="42、使用索引的注意事项"><a href="#42、使用索引的注意事项" class="headerlink" title="42、使用索引的注意事项"></a>42、使用索引的注意事项</h2><ul><li><p>在经常需要搜索的列上，可以加快搜索的速度。</p></li><li><p>在经常使用在where子句中的列上面创建索引，加快条件的判断速度。</p></li><li><p><b>将打算加索引的列设置成为NOT NULL，否则将导致引擎放弃使用索引而进行全表扫描</b></p></li><li><p>在经常需要排序的列上创建索引，因为索引已经排序，这样查询可以利用索引的排序，加快排序查询时间。</p></li><li><p>避免where子句中对字段施加函数，这会造成无法命中索引</p></li><li><p>在中到大型表中索引都是非常有效的，但是特大型表的维护开销会很大，不适合建索引，建议用逻辑索引</p></li><li><p>在经常用到连续的列上，这些列主要是由一些外键，可以加快连接的速度。</p></li><li><p>与业务无关时多使用逻辑主键，也就是自增主键在使用InnoDB时使用与业务无关的自增主键作为主键，即使用逻辑主键，也不要用业务主键。</p></li><li><p>删除长期未使用的索引，不用的索引的存在会造成不必要的性能损耗。</p></li><li><p>在使用limit offset查询缓存时，可以借助索引来提高性能。</p></li></ul><hr><h2 id="43、增加B-树的路数可以降低树的高度，那么无限增加树的路数是不是可以有最优查询效率？"><a href="#43、增加B-树的路数可以降低树的高度，那么无限增加树的路数是不是可以有最优查询效率？" class="headerlink" title="43、增加B+树的路数可以降低树的高度，那么无限增加树的路数是不是可以有最优查询效率？"></a>43、增加B+树的路数可以降低树的高度，那么无限增加树的路数是不是可以有最优查询效率？</h2><p>不可以。<br>因为这样最终会形成一个有序数组，文件系统和数据库的索引都是存在硬盘上的，并且如果数据量大的话，不一定能一次性加载到内存中。<br>有序数组没法一次性加载进内存，这时B+树多路存储的好处就体现出来了，一次加载B+树的一个结点，恰好一个盘，然后一步步往下找。</p><hr><h2 id="44、数据库的表锁和列锁？"><a href="#44、数据库的表锁和列锁？" class="headerlink" title="44、数据库的表锁和列锁？"></a>44、数据库的表锁和列锁？</h2><ul><li><p>表锁<br>不会出现死锁，发生锁冲突几率高，并发低。<br>MyISAM在执行查询语句（SELECT）前，会自动给涉及的所有表加读锁；<br>在执行增删改操作前，会自动给涉及的所有表加写锁。</p><p>MySQL的表级锁有两种模式：<code>表共享读锁</code>和<code>表独占写锁</code></p><p>读锁会阻塞写，写锁会阻塞读和写</p><ul><li>对MyISAM表的<b>读操作</b>，不会阻塞其他进程对同一表的读请求，但会阻塞对同一表的写请求。只有当读锁释放后，才会执行其他进程写操作。</li><li>对MyISAM表的<b>写操作</b>，会阻塞其他进程对同一表的读和写操作，只有当写锁释放后，才会执行其他进程的读写操作。</li></ul><p>MyISAM不适合做写为主表的引擎，因为写锁后，其他线程不能做任何操作，大量的更新会使查询很难得到锁，从而永久阻塞。</p></li><li><p>行锁<br>会出现死锁，发生锁冲突几率低，并发高。</p><p>在MySQL的InnoDB引擎支持行锁，与Oracle不同，MySQL的行锁是通过索引加载的<br>也就是说，行锁是加载索引响应的行上的，要是对应的SQL语句没有走索引，则会全表扫描，行锁则无法实现，取而代之的是表锁。<br>此时其他事物无法对当前表进行更新或插入操作。</p></li><li><p>行锁的实现需要注意：</p><ul><li><p>行锁必须有索引才能实现，否则会自动锁全表，那就不是行锁了。</p></li><li><p>两个事务不能锁同一个索引。</p></li><li><p>insert，delete，update在事务中都会自动默认加上排他锁。</p></li></ul></li><li><p>行锁的适用场景<br>A 用户消费，Service层先查询该用户的账户余额，若余额足够，则进行后续扣款操作，这种情况查询时应该对该记录进行加锁。</p><p>否则，B 用户在 A 用户查询后消费前抢先一步将 A 用户账号上的钱转走<br>而此时 A 用户已经进行了用户余额是否足够的判断，则可能会出现用户余额不足但扣款成功情况。</p><p>为了避免此情况，需要在 A 用户操作该记录的时候进行 FOR UPDATE 加锁。</p></li></ul><hr><h2 id="45、SQL语法中内连接、自连接、外连接（左、右、全）、交叉连接的区别分别是什么？"><a href="#45、SQL语法中内连接、自连接、外连接（左、右、全）、交叉连接的区别分别是什么？" class="headerlink" title="45、SQL语法中内连接、自连接、外连接（左、右、全）、交叉连接的区别分别是什么？"></a>45、SQL语法中内连接、自连接、外连接（左、右、全）、交叉连接的区别分别是什么？</h2><ul><li><p>内连接：<br>只有两个元素表相匹配的才能在结果集中显示。</p></li><li><p>外连接：</p><ul><li>左外连接：左边为驱动表，驱动表的数据全部显示，匹配表的不匹配的不会显示。</li><li>右外连接：右边为驱动表，驱动表的数据全部显示，匹配表的不匹配的不会显示。</li><li>全外连接：连接中的表中不匹配的数据全部会显示出来。</li></ul></li><li><p>交叉连接：<br>笛卡尔积，显示的结果是链接表数的乘积。</p></li></ul><hr><h2 id="46、你知道哪些数据库结构优化的手段？"><a href="#46、你知道哪些数据库结构优化的手段？" class="headerlink" title="46、你知道哪些数据库结构优化的手段？"></a>46、你知道哪些数据库结构优化的手段？</h2><ul><li><p>范式优化：<br>比如消除冗余（节省空间）</p></li><li><p>反范式优化<br>比如适当添加冗余（减少表的链接）</p></li><li><p>限定数据的范围：<br>务必禁止不带任何限制数据范围条件的查询语句。<br>例如：当用户在查询历史订单的时候，可以将时间控制在一个月的范围内。</p></li><li><p>读&#x2F;写分离：<br>经典数据库拆分方案，主库负责写，从库负责读。</p></li><li><p>拆分表：<br>分区将数据在物理上分隔开，不同分区的数据可以制定保存在处于不同磁盘上的数据文件里。<br>这样，当对这个表进行查询时，只需要在表分区中进行扫描，而不必进行全表扫描，明显缩短了查询时间<br>另外处于不同磁盘的分区也将对这个标的数据传输分散在不同的磁盘I&#x2F;O，一个精心设置的分区可以将数据传输对磁盘I&#x2F;O竞争均匀地分散开。<br>对数据量大的时候表可以采取此方法，可按月自动建表分区。</p></li></ul><hr><h2 id="47、数据库优化中有一个比较常用的手段就是把数据表进行拆分，关于差分数据了解哪些？"><a href="#47、数据库优化中有一个比较常用的手段就是把数据表进行拆分，关于差分数据了解哪些？" class="headerlink" title="47、数据库优化中有一个比较常用的手段就是把数据表进行拆分，关于差分数据了解哪些？"></a>47、数据库优化中有一个比较常用的手段就是把数据表进行拆分，关于差分数据了解哪些？</h2><p>拆分分为<code>垂直拆分</code>和<code>水平拆分</code></p><p>案例：简单购物系统暂涉及如下表：<br>一、产品表（数据量10W，稳定）<br>二、订单表（数据量200W，且有增长趋势）<br>三、用户表（数据量100W，且有增长趋势）<br>以MySQL为例讲述水平拆分和垂直拆分，MySQL能容忍的数量级在百万静态数据可以到千万。</p><ul><li><p>垂直拆分【专库专用，不同表拆到不同数据库中】<br>解决问题：表与表之间的I&#x2F;O竞争<br>不解决问题：单表中数据量增长出现的压力<br>方案：把产品表和用户表放到一个Server上，订单表单独放到另一个Server上。</p></li><li><p>水平拆分【同一个表拆到不同数据库中】<br>解决问题：单表中数据增长出现的压力<br>不解决问题：表于表之间的I&#x2F;O竞争<br>方案：</p><ol><li>用户表：通过性别拆分为男用户表和女用户表</li><li>订单表：通过已完成和完成中拆分为已完成订单和未完成订单</li><li>产品表：未完成订单放在一个Server上，已完成订单和男用户表放在一个Server上，女用户表放一个Server上。</li></ol></li></ul><hr><h2 id="48、为什么MySQL索引要使用B-树，而不是B树或者红黑树？"><a href="#48、为什么MySQL索引要使用B-树，而不是B树或者红黑树？" class="headerlink" title="48、为什么MySQL索引要使用B+树，而不是B树或者红黑树？"></a>48、为什么MySQL索引要使用B+树，而不是B树或者红黑树？</h2><p>在MySQL中的数据一般是放在磁盘中的，读取数据的时候肯定会有<code>访问磁盘</code>的操作。<br>磁盘中有两个机械运动的部分，分别是盘片旋转和磁臂移动。<br>盘片旋转就是我们市面上所提到的多少转没分钟，而磁盘移动则是在盘片旋转到指定位置以后，移动磁臂开始进行数据的读写。</p><p>那么就存在一个定位到磁盘中块的过程，而定位是磁盘的存取中花费时间比较大的一块，毕竟机械运动花费的时间远远大于电子的运动。<br>当大规模数据存储到磁盘中的时候，显然定位是一个非常花费时间的过程，但是我们可以使用B树进行优化，提高磁盘读取时定位的效率。</p><p>为什么B类树可以进行优化？<br>根据B类树的特点，构造一个多阶的B类树，然后在尽量多的在结点上存储相关的信息<br><code>保证层数（树的高度）尽量的少</code>，以便后面我们可以更快地找到信息<br><code>磁盘的I/O也就少一些</code>，而且B类树是平衡树，每个结点到叶子结点的高度都是相同，这也保证了每个查询是稳定的。</p><h2 id="特别的：只有B-树和B-树，而B-树叫做B树，没有B减树说法。"><a href="#特别的：只有B-树和B-树，而B-树叫做B树，没有B减树说法。" class="headerlink" title="特别的：只有B-树和B+树，而B-树叫做B树，没有B减树说法。"></a>特别的：只有B-树和B+树，而B-树叫做B树，没有B减树说法。</h2><h2 id="49、为什么MySQL索引适用B-树而不用hash表和B树？"><a href="#49、为什么MySQL索引适用B-树而不用hash表和B树？" class="headerlink" title="49、为什么MySQL索引适用B+树而不用hash表和B树？"></a>49、为什么MySQL索引适用B+树而不用hash表和B树？</h2><ul><li><p>利用Hash需要把数据全部加载到内存中，如果数据量大，是一个很<code>消耗内存</code>的事情，而采用B+树，是基于<code>按照结点分段加载，由此减少内存消耗</code>。</p></li><li><p>和业务场景有关，对于<code>唯一查找</code>（查找一个值），Hash确实更快，但数据库中经常查询多条数据<br>这时候由于B+树的有序性，而叶子结点又有链表相邻，他的查询效率会比Hash快的多。</p></li><li><p>B+树的<code>非叶子结点不保存数据，只保存子树的临界值</code>（最大或最小），所以同样大小的节点【比如一个页框】<br><code>B+树相对于B树能够有更多的分支，使得这棵树更加矮胖，查询时候做的I/O次数也就更少</code>。</p></li></ul><hr><h2 id="50、既然Hash比B-树更快，为什么MySQL用B-树来存储索引？"><a href="#50、既然Hash比B-树更快，为什么MySQL用B-树来存储索引？" class="headerlink" title="50、既然Hash比B+树更快，为什么MySQL用B+树来存储索引？"></a>50、既然Hash比B+树更快，为什么MySQL用B+树来存储索引？</h2><p>MySQL中存储索引用到的数据结构是B+树，B+树的查询时间和树的高度有关，是O(logn)，如果用hash存储，那么查询的时间是O(1)。</p><p>采用Hash来存储确实要更快，但是采用B+树来存储索引的原因主要有以下两点：</p><ol><li><p><code>从内存角度来说</code>，数据库的索引一般是在磁盘上，数据量大的情况下可能无法一次性装入内存，B+树的设计可以允许数据分批加载</p></li><li><p><code>从业务场景来说</code>，如果只选择一个数据那必然是Hash更快，但是数据库中经常会选中多条【例如where】<br>此时由于B+树索引有序，而且又有链表相连，它的查询效率比Hash就快多了。</p></li></ol><hr><h2 id="51、关系型数据库的四大特性在得不到保障的情况下会怎样？"><a href="#51、关系型数据库的四大特性在得不到保障的情况下会怎样？" class="headerlink" title="51、关系型数据库的四大特性在得不到保障的情况下会怎样？"></a>51、关系型数据库的四大特性在得不到保障的情况下会怎样？</h2><p>ACID，原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）</p><p>接下来，以从A账户转账50元到B账户为例说明ACID四大特性：</p><ol><li>原子性<br>  原子性是指一个事务是一个不可分割的工作单位，<b>其中的操作要么都做，要么都不做</b>。<br>  即要么转账成功，要么转账失败，不存在中间的状态。</li></ol><ul><li>如果无法保证原子性<br>就会出现数据不一致的情形，A账户减去50元，而B账户增加50元操作失败。<br>从此，系统无缘无故少了50元。</li></ul><ol start="2"><li>一致性<br>  一致性是指事务执行前后，数据处于一种合法的状态，这种状态是语义上的而不是语法上的。<br>  什么是合法的数据状态？满足预定的约束就叫做合法的状态，这个状态是由自己来定义的。</li></ol><p>  <b>满足这个状态，数据就是一致的，不满足这个状态，数据就是不一致的</b></p><ul><li>如果无法保证一致性<br>例一：A有200元，转账300元出去，A账户余额-100元，自然发现此时数据不一致<br> 因为定义了一个状态，余额列必须大于0元。<br>例二：A有200元，转账50元给B账户，A账户的钱扣了，但是B账户由于各种意外，余额并未增加。<br> 此时数据也是不一致的，因为定义了一个状态，要求A+B的总额保持不变</li></ul><ol start="3"><li>隔离性<br>  隔离性是指<b>多个事务并发执行的时候，事务内部的操作与其他事务是隔离的</b><br>  并发执行的各个事务之间不能相互干扰。</li></ol><ul><li>如果无法保证隔离性<br>假设A账户有200元，B账户0元。<br>A账户往B账户转账两次，金额50元，分别在两个事务中执行。<br>如果无法保证隔离性，A可能就会出现扣款两次的情形，而B只增加了一次，凭空消失50元，依然出现数据不一致。<br>【如：A&#x3D;200，B&#x3D;0，A-50，B+50；A&#x3D;150，B&#x3D;0，A-50，B+50；A&#x3D;100，B&#x3D;50】</li></ul><ol start="4"><li>持久性<br>  持久性是指<b>事务一旦提交，它对数据库的改变就应该是永久性的</b><br>  接下来的其他操作或故障不应该对其有任何影响。</li></ol><ul><li><p>如果无法保证持久性<br>在MySQL中，为了解决CPU和磁盘速度不一致的问题，MySQL是将磁盘上的数据加载到内存，对内存进行操作，然后再写回磁盘。<br>假设此时宕机，内存中修改的数据全部丢失，持久性便无法保证。</p><p>如果系统提示转账成功，但发现金额没有发生任何变化，此时数据出现了不合法的数据状态，我们将这种状态认为是<code>数据不一致</code>的情形。</p></li></ul><hr><h2 id="52、数据库如何保证一致性？"><a href="#52、数据库如何保证一致性？" class="headerlink" title="52、数据库如何保证一致性？"></a>52、数据库如何保证一致性？</h2><p>两个层面来说：</p><ol><li><p>从数据库层面，数据库通过原子性、隔离性、持久性来保证一致性。<br>也就是说，ACID四大特性之中，<code>C（一致性）是目的，A（原子性）、I（隔离性）、D（持久性）是手段</code>，是为了保证一致性，数据库提供的手段。<br><b>数据库必须要实现AID三大特性，才有可能实现一致性</b>。</p><p>例如，原子性无法保证，一致性显然也无法保证</p></li><li><p>从应用层面<br>通过代码判断数据库数据是否有效，然后决定回滚还是提交数据。</p></li></ol><hr><h2 id="53、数据库如何保证原子性？"><a href="#53、数据库如何保证原子性？" class="headerlink" title="53、数据库如何保证原子性？"></a>53、数据库如何保证原子性？</h2><p>主要是利用InnoDB（支持事务）的<code>undo log</code>。<br>undo log 名为回滚日志，是实现原子性的关键，当事务回滚时能够撤销所有已经成功执行的SQL语句，他需要记录你要回滚的相应日志信息。</p><p>例如：</p><ul><li><p>当DELETE一条数据的时候，就需要记录这条数据的信息，回滚时候，INSERT这条旧数据。</p></li><li><p>当UPDATE一条数据的时候，就需要记录这条数据的旧值，回滚时候，根据旧值执行UPDATE操作。</p></li><li><p>当INSERT一条数据的时候，就需要记录这条数据的主键，回滚时候，根据主键执行DELETE操作。</p></li></ul><p>undo log记录了这些回滚需要的信息，当事务执行失败或调用了ROLLBACK，导致事务需要回滚<br>便可以利用 undo log 中的信息将数据回滚到修改之前的样子。</p><hr><h2 id="54、数据库如何保证持久性？"><a href="#54、数据库如何保证持久性？" class="headerlink" title="54、数据库如何保证持久性？"></a>54、数据库如何保证持久性？</h2><p>主要是利用InnoDB中的<code>redo log</code>重写日志。</p><p>正如之前所说，MySQL是先把磁盘上的数据加载到内存中，在内存中对数据进行修改，再写回到磁盘上。<br>如果此时突然宕机，内存中的数据就会丢失。<br>如何解决？事物提交之前直接把事务写入磁盘，这么做有什么问题？</p><ul><li><p>只修改一个页面里的一个字节，就要将整个页面刷入磁盘，浪费资源。<br>毕竟一个页面16kb大小，只改其中一点点东西，就要将16kb内容重刷入磁盘，有些不合理。</p></li><li><p>一个事务里的SQL可能牵涉到多个数据页的修改，而这些数据页可能不是相邻的，也就是属于随机IO。<br>操作随机IO，速度会比较慢。</p></li></ul><p>于是，决定采用redo log解决上面的问题。<br>当做数据修改的时候，不仅在内存操作，还会在redo log中记录这次操作。<br>当事务提交的时候，会将redo log日志进行刷盘（redo log一部分在内存中，一部分在磁盘上）<br>当数据库宕机重启时，会将redo log中的内容恢复到数据库中，再根据undo log和bin log内容决定回滚还是提交数据。</p><ul><li>采用redo log的好处？<br>好处就是将redo log进行刷盘比对数据页进行刷盘效率高，具体表现如下：<ul><li><p>redo log体积小，毕竟只记录了哪一页修改了啥，因此体积小，刷盘快。</p></li><li><p>redo log是一直往末尾进行追加，属于顺序I&#x2F;O，效率显然比随机I&#x2F;O来得快。</p></li></ul></li></ul><hr><h2 id="55、数据库高并发是经常会遇到的，有什么好的解决方案？"><a href="#55、数据库高并发是经常会遇到的，有什么好的解决方案？" class="headerlink" title="55、数据库高并发是经常会遇到的，有什么好的解决方案？"></a>55、数据库高并发是经常会遇到的，有什么好的解决方案？</h2><ul><li><p>在web服务框架中加入缓存。在服务器和数据库层之间加入缓存层，将高频访问的数据存入缓存中，减少数据库的读取负担。</p></li><li><p>增加数据库索引，进而提高查询速度。（不过索引太多会导致速度变慢，而且数据库的写入会导致索引的更新，也会导致速度变慢等）</p></li><li><p>主从读写分离，让主服务器负责写，从服务器负责读。</p></li><li><p>将数据库进行拆分，使得数据库的表尽可能小，提高查询速度。</p></li><li><p>使用分布式架构，分散计算压力</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2022/02/19/DataStruct/"/>
      <url>/2022/02/19/DataStruct/</url>
      
        <content type="html"><![CDATA[<h1 id="1、替换空格（简单）"><a href="#1、替换空格（简单）" class="headerlink" title="1、替换空格（简单）"></a>1、替换空格（简单）</h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="- 题目大意"></a>- 题目大意</h2><blockquote><p>实现一个函数，把字符串中的每个空格替换为’%20’</p></blockquote><h2 id="示例"><a href="#示例" class="headerlink" title="- 示例"></a>- 示例</h2><blockquote><p>略</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="- 代码"></a>- 代码</h2><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>双指针版</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">replaceSpace</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">      <span class="type">int</span> count = <span class="number">0</span>, len = s.<span class="built_in">size</span>();</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">auto</span> w: s)&#123;</span><br><span class="line">        <span class="keyword">if</span>(w == <span class="string">&#x27; &#x27;</span>)  count ++;</span><br><span class="line">      &#125;</span><br><span class="line">      s.<span class="built_in">resize</span>(len + <span class="number">2</span> * count);</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> i = len - <span class="number">1</span>, j = s.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--, j--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">          s[j<span class="number">-2</span>] = <span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">          s[j<span class="number">-1</span>] = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">          s[j] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">          j -= <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          s[j] = s[i];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="- 注意事项"></a>- 注意事项</h2><p>上述解法使用了双指针<br>此题注意事项：<span class="blur">此处双指针是要从末尾开始数</span></p><hr><h1 id="2、从尾到头打印链表（简单）"><a href="#2、从尾到头打印链表（简单）" class="headerlink" title="2、从尾到头打印链表（简单）"></a>2、从尾到头打印链表（简单）</h1><h2 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="- 题目大意"></a>- 题目大意</h2><blockquote><p>输入一个链表的头结点，从尾到头反过来返回每个结点的值（数组返回）</p></blockquote><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="- 示例"></a>- 示例</h2><blockquote><p>略</p></blockquote><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="- 代码"></a>- 代码</h2><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>栈</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">     <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">reversePrint</span><span class="params">(ListNode* head)</span></span>&#123;</span><br><span class="line">       vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">       stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">       <span class="keyword">while</span>(head != <span class="literal">NULL</span>)&#123;</span><br><span class="line">         st.<span class="built_in">push</span>(head-&gt;val);</span><br><span class="line">         head = head-&gt;next;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">while</span>(!st.<span class="built_in">empty</span>())&#123;</span><br><span class="line">         ans.<span class="built_in">push_back</span>(st.<span class="built_in">top</span>());</span><br><span class="line">         st.<span class="built_in">pop</span>();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> ans;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="- 注意事项"></a>- 注意事项</h2><p>用栈即可</p><span class="blur">递归本质也是用栈实现的，因此递归也是不错的选择</span><h1 id="3、用两个栈实现队列（简单）"><a href="#3、用两个栈实现队列（简单）" class="headerlink" title="3、用两个栈实现队列（简单）"></a>3、用两个栈实现队列（简单）</h1><h2 id="描述"><a href="#描述" class="headerlink" title="- 描述"></a>- 描述</h2><blockquote><p>用两个栈实现队列，实现 appendTail 和 deleteHead 函数</p></blockquote><h2 id="示例-2"><a href="#示例-2" class="headerlink" title="- 示例"></a>- 示例</h2><blockquote><p>略</p></blockquote><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="- 代码"></a>- 代码</h2><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>两个栈实现队列</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CQueue</span>&#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; s1;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; s2;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">CQueue</span>()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">appendTail</span><span class="params">(<span class="type">int</span> value)</span></span>&#123;</span><br><span class="line">      s1.<span class="built_in">push</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">deleteHead</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span>(!s2.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        ans = s2.<span class="built_in">top</span>();</span><br><span class="line">        s2.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!s1.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="keyword">while</span>(!s1.<span class="built_in">empty</span>())&#123;</span><br><span class="line">          s2.<span class="built_in">push</span>(s1.<span class="built_in">top</span>());</span><br><span class="line">          s1.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        ans = s2.<span class="built_in">top</span>();</span><br><span class="line">        s2.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ans = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="- 注意事项"></a>- 注意事项</h2><span class="blur">注意在暴力的基础上想想怎么改进</span><h1 id="4、表示数值的字符串（中等）"><a href="#4、表示数值的字符串（中等）" class="headerlink" title="4、表示数值的字符串（中等）"></a>4、表示数值的字符串（中等）</h1><h2 id="描述-1"><a href="#描述-1" class="headerlink" title="- 描述"></a>- 描述</h2><blockquote><p>一个函数判断字符串是否表示数值（包括整数和小数），<a href="e%E6%95%B4%E6%95%B0">整数，小数</a></p></blockquote><h2 id="示例-3"><a href="#示例-3" class="headerlink" title="- 示例"></a>- 示例</h2><blockquote><p>数值：[“+100”, “5e2”, “-123”, “3.1416”, “-1E-16”, “0123”]<br>非数值：[“12e”, “1a3.14”, “1.2.3”, “+-5”, “12e+5.4”]</p></blockquote><h2 id="代码-3"><a href="#代码-3" class="headerlink" title="- 代码"></a>- 代码</h2><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>暂无</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">inNumber</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="- 注意事项"></a>- 注意事项</h2><p>前置知识：<span class="blur">编译原理</span></p><h1 id="5、翻转链表（简单）"><a href="#5、翻转链表（简单）" class="headerlink" title="5、翻转链表（简单）"></a>5、翻转链表（简单）</h1><h2 id="描述-2"><a href="#描述-2" class="headerlink" title="- 描述"></a>- 描述</h2><blockquote><p>定义一个函数，输入一个链表的头结点，翻转该链表并输出翻转后链表的头结点。</p></blockquote><h2 id="示例-4"><a href="#示例-4" class="headerlink" title="- 示例"></a>- 示例</h2><blockquote><p>略</p></blockquote><h2 id="代码-4"><a href="#代码-4" class="headerlink" title="- 代码"></a>- 代码</h2><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>链表遍历</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span>&#123;</span><br><span class="line">  <span class="type">int</span> val;</span><br><span class="line">  ListNode *next;</span><br><span class="line">  <span class="built_in">ListNode</span>(<span class="type">int</span> x): <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">NULL</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function">ListNode* <span class="title">reverseLink</span><span class="params">(ListNode* head)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!head || !head-&gt;next)  <span class="keyword">return</span> head;</span><br><span class="line">    ListNode* cur = head, ListNode* nHead = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">      ListNode* temp = cur-&gt;next;</span><br><span class="line">      cur-&gt;next = nHead;</span><br><span class="line">      nHead = cur;</span><br><span class="line">      cur = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nHead;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>递归</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">recursion</span>(<span class="literal">nullptr</span>, head);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="function">ListNode* <span class="title">recursion</span><span class="params">(ListNode* pre, ListNode* cur)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!cur)  <span class="keyword">return</span> cur;</span><br><span class="line">    <span class="built_in">recursion</span>(cur, cur-&gt;next);</span><br><span class="line">    cur-&gt;next = pre;</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="注意事项-4"><a href="#注意事项-4" class="headerlink" title="- 注意事项"></a>- 注意事项</h2><p>普通写法：头插法<br>注意递归写法</p><h1 id="6、包含min函数的栈（简单）"><a href="#6、包含min函数的栈（简单）" class="headerlink" title="6、包含min函数的栈（简单）"></a>6、包含min函数的栈（简单）</h1><h2 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="- 题目大意"></a>- 题目大意</h2><blockquote><p>实现一个栈，栈中能够得到最小元素的min函数，调用min、push及pop的时间复杂度都是O(1)</p></blockquote><h2 id="示例-5"><a href="#示例-5" class="headerlink" title="- 示例"></a>- 示例</h2><blockquote><p>略</p></blockquote><h2 id="代码-5"><a href="#代码-5" class="headerlink" title="- 代码"></a>- 代码</h2><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>带min的栈</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MinStack</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  stack&lt;<span class="type">int</span>&gt; s, smin;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">MinStack</span>()&#123;&#125;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    s.<span class="built_in">push</span>(x);</span><br><span class="line">    <span class="keyword">if</span>(smin.<span class="built_in">empty</span>() || x &lt;= smin.<span class="built_in">top</span>()) smin.<span class="built_in">push</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.<span class="built_in">top</span>() == smin.<span class="built_in">top</span>())   smin.<span class="built_in">pop</span>();</span><br><span class="line">    s.<span class="built_in">pop</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">top</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.<span class="built_in">top</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">min</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> smin.<span class="built_in">top</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="注意事项-5"><a href="#注意事项-5" class="headerlink" title="- 注意事项"></a>- 注意事项</h2><p>感觉可以注意一下栈空时不能pop和查询啊，标准代码里面并没有</p><h1 id="7、复杂链表的复制（简单）"><a href="#7、复杂链表的复制（简单）" class="headerlink" title="7、复杂链表的复制（简单）"></a>7、复杂链表的复制（简单）</h1><h2 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="- 题目大意"></a>- 题目大意</h2><blockquote><p>复杂链表的复制，除了next指针指向下一个结点，还有random指针指向随机结点</p></blockquote><h2 id="示例-6"><a href="#示例-6" class="headerlink" title="- 示例"></a>- 示例</h2><img src="/2022/02/19/DataStruct/randomPointer.png" class=""><h2 id="代码-6"><a href="#代码-6" class="headerlink" title="- 代码"></a>- 代码</h2><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>map映射解法，hash，旧结点指针映射新节点</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="type">int</span> val;</span><br><span class="line">  Node* next;</span><br><span class="line">  Node* random;</span><br><span class="line">  <span class="built_in">Node</span>(<span class="type">int</span> val):<span class="built_in">val</span>(val), <span class="built_in">next</span>(<span class="literal">NULL</span>), <span class="built_in">random</span>(<span class="literal">NULL</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  map&lt;Node*, Node*&gt; mp;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function">Node* <span class="title">copyRandomList</span><span class="params">(Node* head)</span></span>&#123;</span><br><span class="line">    Node* temp = head;</span><br><span class="line">    <span class="keyword">while</span>(temp)&#123;</span><br><span class="line">      Node *t = <span class="keyword">new</span> <span class="built_in">Node</span>(temp-&gt;val);</span><br><span class="line">      mp.<span class="built_in">insert</span>(&#123;temp, t&#125;);</span><br><span class="line">      temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    Node* nhead, *ntail;</span><br><span class="line">    nhead = ntail = mp[head];</span><br><span class="line">    <span class="keyword">while</span>(head)&#123;</span><br><span class="line">      ntail-&gt;next = mp[head-&gt;next];</span><br><span class="line">      ntail-&gt;random = mp[head-&gt;random];</span><br><span class="line">      ntail = ntail-&gt;next, head = head-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nhead;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>     </div></div>    </div><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>神奇解法</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function">Node* <span class="title">copyRandomList</span><span class="params">(Node* head)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!head) <span class="keyword">return</span> head;</span><br><span class="line">    <span class="comment">// 1、在每个结点后面插入一个新节点</span></span><br><span class="line">    Node* temp = head;</span><br><span class="line">    <span class="keyword">while</span>(temp)&#123;</span><br><span class="line">      Node* t = <span class="keyword">new</span> <span class="built_in">Node</span>(temp-&gt;val);</span><br><span class="line">      t-&gt;next = temp-&gt;next;</span><br><span class="line">      temp-&gt;next = t;</span><br><span class="line">      temp = t-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2、修改新节点的random指针</span></span><br><span class="line">    temp = head;</span><br><span class="line">    <span class="keyword">while</span>(temp)&#123;</span><br><span class="line">      <span class="keyword">if</span>(temp-&gt;random)  temp-&gt;next-&gt;random = temp-&gt;random-&gt;next;</span><br><span class="line">      temp = temp-&gt;next-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3、拆分旧结点和新结点</span></span><br><span class="line">    Node* ans = head-&gt;next;</span><br><span class="line">    Node* cur = head-&gt;next, *pre = head;</span><br><span class="line">    <span class="keyword">while</span>(cur-&gt;next)&#123;</span><br><span class="line">      pre-&gt;next = pre-&gt;next-&gt;next;</span><br><span class="line">      cur-&gt;next = cur-&gt;next-&gt;next;</span><br><span class="line">      pre = pre-&gt;next;</span><br><span class="line">      cur = cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    pre-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="注意事项-6"><a href="#注意事项-6" class="headerlink" title="- 注意事项"></a>- 注意事项</h2><p>1、<span class="blur">STL库的使用</span><br>2、注意第二种神奇解法，值得学习<br>3、值得注意的是，要时刻留意题目所给范围是不是能为空：nullptr<br>4、创建新的结点链表时，要注意不能对原链表进行改动</p><h1 id="8、左旋转字符串（简单，花样多）"><a href="#8、左旋转字符串（简单，花样多）" class="headerlink" title="8、左旋转字符串（简单，花样多）"></a>8、左旋转字符串（简单，花样多）</h1><h2 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="- 题目大意"></a>- 题目大意</h2><blockquote><p>把字符串前面的若干个字符转移到字符串的尾部</p></blockquote><h2 id="示例-7"><a href="#示例-7" class="headerlink" title="- 示例"></a>- 示例</h2><blockquote><p>输入: s &#x3D; “abcdefg”, k &#x3D; 2<br>输出: “cdefgab”</p></blockquote><h2 id="代码-7"><a href="#代码-7" class="headerlink" title="- 代码"></a>- 代码</h2><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>字符串切片方法</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function">string <span class="title">reverseLeftWords</span><span class="params">(string s, <span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    string ansTemp = s + s;</span><br><span class="line">    <span class="keyword">return</span> ansTemp.<span class="built_in">substr</span>(n, s.<span class="built_in">size</span>());</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function">string <span class="title">reverseLeftWords2</span><span class="params">(string s, <span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.<span class="built_in">substr</span>(n) + s.<span class="built_in">substr</span>(<span class="number">0</span>, n);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>     </div></div>    </div><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>不允许字符串切片，旋转方法</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function">string <span class="title">reverseLeftWords</span><span class="params">(string s, <span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="built_in">reverseString</span>(s, <span class="number">0</span>, n<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">reverseString</span>(s, n, s.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">reverseString</span>(s, <span class="number">0</span>, s.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">string <span class="title">reverseLeftWords</span><span class="params">(string s, <span class="type">int</span> n)</span></span>&#123; <span class="comment">//迭代器写法</span></span><br><span class="line">    <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">begin</span>() + n);</span><br><span class="line">    <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>() + n, s.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">reverseString</span><span class="params">(stirng&amp; s, <span class="type">int</span> i, <span class="type">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; j)  <span class="built_in">swap</span>(s[i++], s[j--]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="注意事项-7"><a href="#注意事项-7" class="headerlink" title="- 注意事项"></a>- 注意事项</h2><p>1、C++ 中 substr 函数，参数1：起始下标，参数2：从下标开始多少个数<br>2、翻转三次，相当于前后颠倒<br>3、C++ 中 字符串 属于 可变类型，因此可以原地操作，不同于 Python 和 Java<br>4、<span class="blur">注意，如果要改变实参的话，需要使用引用</span><br>5、如果要使用reverse函数，则需要使用<span class="blur">迭代器</span></p><h1 id="9、滑动窗口的最大值（中等）"><a href="#9、滑动窗口的最大值（中等）" class="headerlink" title="9、滑动窗口的最大值（中等）"></a>9、滑动窗口的最大值（中等）</h1><h2 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="- 题目大意"></a>- 题目大意</h2><blockquote><p>给定一个数组 nums 和 滑动窗口的大小 k，找出所有滑动窗口里的最大值。</p></blockquote><h2 id="示例-8"><a href="#示例-8" class="headerlink" title="- 示例"></a>- 示例</h2><img src="/2022/02/19/DataStruct/SlipperyWindow.png" class=""><h2 id="代码-8"><a href="#代码-8" class="headerlink" title="- 代码"></a>- 代码</h2><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>本人垃圾写法,multiset</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    multiset&lt;<span class="type">int</span>&gt; ms;</span><br><span class="line">    priority_queue&lt;<span class="type">int</span>&gt; pq;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">maxSlidingWindow</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">empty</span>())    <span class="keyword">return</span> ans;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;k; ++i)&#123;</span><br><span class="line">            pq.<span class="built_in">push</span>(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ans.<span class="built_in">push_back</span>(pq.<span class="built_in">top</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>, j=k; j&lt;nums.<span class="built_in">size</span>(); i++, j++)&#123;</span><br><span class="line">            ms.<span class="built_in">insert</span>(nums[i]);</span><br><span class="line">            <span class="keyword">auto</span> temp = ms.<span class="built_in">find</span>(pq.<span class="built_in">top</span>());</span><br><span class="line">            <span class="keyword">while</span>(temp!=ms.<span class="built_in">end</span>())&#123;</span><br><span class="line">                pq.<span class="built_in">pop</span>();</span><br><span class="line">                ms.<span class="built_in">erase</span>(temp);</span><br><span class="line">                temp = ms.<span class="built_in">find</span>(pq.<span class="built_in">top</span>());</span><br><span class="line">            &#125;</span><br><span class="line">            pq.<span class="built_in">push</span>(nums[j]);</span><br><span class="line">            ans.<span class="built_in">push_back</span>(pq.<span class="built_in">top</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>     </div></div>    </div><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>单调队列写法【值得二刷】</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  deque&lt;<span class="type">int</span>&gt; deq;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">maxSlidingWindow</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">    <span class="keyword">while</span>(<span class="type">int</span> i=<span class="number">0</span>-k, j=<span class="number">0</span>; j&lt;nums.<span class="built_in">size</span>(); ++i, ++j)&#123;</span><br><span class="line">      <span class="keyword">if</span>(i &gt;= <span class="number">0</span> &amp;&amp; deq.<span class="built_in">front</span>() == nums[i])  deq.<span class="built_in">pop_front</span>();</span><br><span class="line">      <span class="keyword">while</span>(!deq.<span class="built_in">empty</span>() &amp;&amp; deq.<span class="built_in">back</span>() &lt; nums[j]) deq.<span class="built_in">pop_back</span>();</span><br><span class="line">      deq.<span class="built_in">push_back</span>(nums[j]);</span><br><span class="line">      <span class="keyword">if</span>(i &gt;= <span class="number">-1</span>)  ans.<span class="built_in">push_back</span>(deq.<span class="built_in">front</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="注意事项-8"><a href="#注意事项-8" class="headerlink" title="- 注意事项"></a>- 注意事项</h2><p>multiset 和 priority_queue 优化一下就变成了单调队列的写法</p><h1 id="10、队列的最大值（和上题一样）"><a href="#10、队列的最大值（和上题一样）" class="headerlink" title="10、队列的最大值（和上题一样）"></a>10、队列的最大值（和上题一样）</h1><h2 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="- 题目大意"></a>- 题目大意</h2><blockquote><p>定义一个队列，实现函数<code>max_value</code>得到队列里的最大值，要求函数max_value、push_back和pop_front的均摊时间复杂度都是O(n)。<br>若队列为空，则返回pop_front、max_value返回-1</p></blockquote><h2 id="示例-9"><a href="#示例-9" class="headerlink" title="- 示例"></a>- 示例</h2><blockquote><p>略</p></blockquote><h2 id="代码-9"><a href="#代码-9" class="headerlink" title="- 代码"></a>- 代码</h2><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>估计可以单调队列写</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MaxQueue</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">  deque&lt;<span class="type">int</span>&gt; mq;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">MaxQueue</span>()&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">max_value</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(mq.<span class="built_in">empty</span>())  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> mq.<span class="built_in">front</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(<span class="type">int</span> value)</span></span>&#123;</span><br><span class="line">    q.<span class="built_in">push</span>(value);</span><br><span class="line">    <span class="keyword">while</span>(!mq.<span class="built_in">empty</span>() &amp;&amp; value &gt; mq.<span class="built_in">back</span>()) mq.<span class="built_in">pop_back</span>();</span><br><span class="line">    mq.<span class="built_in">push_back</span>(value);  </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">pop_front</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(q.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> ans = q.<span class="built_in">front</span>();</span><br><span class="line">    q.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">if</span>(mq.<span class="built_in">front</span>() == ans) mq.<span class="built_in">pop_front</span>();</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="注意事项-9"><a href="#注意事项-9" class="headerlink" title="-注意事项"></a>-注意事项</h2><p>和上体一样，单调队列解决</p><h1 id="11、"><a href="#11、" class="headerlink" title="11、"></a>11、</h1><h1 id="12、回文链表（简单）"><a href="#12、回文链表（简单）" class="headerlink" title="12、回文链表（简单）"></a>12、回文链表（简单）</h1><h2 id="题目大意-7"><a href="#题目大意-7" class="headerlink" title="- 题目大意"></a>- 题目大意</h2><blockquote><p>判断一个链表是否回文</p></blockquote><h2 id="示例-10"><a href="#示例-10" class="headerlink" title="- 示例"></a>- 示例</h2><blockquote><p>[1, 2, 2, 1] —— true<br>[1, 2] —— false</p></blockquote><h2 id="代码-10"><a href="#代码-10" class="headerlink" title="- 代码"></a>- 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  ListNode *left;</span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">judgePalindrome</span><span class="params">(ListNode *head)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!head) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="type">bool</span> res = <span class="built_in">judgeParlindrome</span>(head-&gt;next);</span><br><span class="line">    res = res &amp;&amp; (head-&gt;val == left-&gt;val);</span><br><span class="line">    left = left-&gt;next;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(ListNode *head)</span></span>&#123;</span><br><span class="line">    left = head;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">judgePalindrome</span>(head);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意事项-10"><a href="#注意事项-10" class="headerlink" title="- 注意事项"></a>- 注意事项</h2><p>使用链表的递归特性，不显式翻转链表的情况下，逆序读链表。<br>当然，本人的做法是翻转slow指针后的链表，如果想不破坏链表结构，再次翻转回来即可。</p><h1 id="13、填充每一个节点的下一个右侧指针（中等）"><a href="#13、填充每一个节点的下一个右侧指针（中等）" class="headerlink" title="13、填充每一个节点的下一个右侧指针（中等）"></a>13、填充每一个节点的下一个右侧指针（中等）</h1><h2 id="题目大意-8"><a href="#题目大意-8" class="headerlink" title="- 题目大意"></a>- 题目大意</h2><blockquote><p>给定一个完全二叉树，所有叶子结点都在同一层，每个父节点有两个子节点。<br>填充其 next 指针，指向下一个右侧结点</p></blockquote><h2 id="示例-11"><a href="#示例-11" class="headerlink" title="- 示例"></a>- 示例</h2><img src="/2022/02/19/DataStruct/116_sample.png" class=""><h2 id="代码-11"><a href="#代码-11" class="headerlink" title="- 代码"></a>- 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">connectTwoNodes</span><span class="params">(Node* LNode, Node* RNode)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!LNode || !RNode)  <span class="keyword">return</span> ;</span><br><span class="line">    LNode-&gt;next = RNode;</span><br><span class="line">    <span class="built_in">connectTwoNodes</span>(LNode-&gt;left, LNode-&gt;right);</span><br><span class="line">    <span class="built_in">connectTwoNodes</span>(RNode-&gt;left, RNode-&gt;right);</span><br><span class="line">    <span class="built_in">connectTwoNodes</span>(LNode-&gt;right, RNode-&gt;left);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function">Node* <span class="title">connect</span><span class="params">(Node* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> root;</span><br><span class="line">    <span class="built_in">connectTwoNodes</span>(root-&gt;left, root-&gt;right);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="注意事项-11"><a href="#注意事项-11" class="headerlink" title="- 注意事项"></a>- 注意事项</h2><p>使用递归的解法，连接两个结点。</p><h1 id="14、二叉树展开为链表（中等）"><a href="#14、二叉树展开为链表（中等）" class="headerlink" title="14、二叉树展开为链表（中等）"></a>14、二叉树展开为链表（中等）</h1><h2 id="题目大意-9"><a href="#题目大意-9" class="headerlink" title="- 题目大意"></a>- 题目大意</h2><blockquote><p>给出一个二叉树的根节点<code>root</code>，将其展开为一个单链表</p><ul><li>展开后的单链表同样使用<code>TreeNode</code>，其中<code>right</code>指针指向链表中下一个结点，而左指针时钟为<code>null</code></li><li>展开后的单链表应该与二叉树<code>先序遍历</code>相同</li></ul></blockquote><h2 id="示例-12"><a href="#示例-12" class="headerlink" title="- 示例"></a>- 示例</h2><img src="/2022/02/19/DataStruct/flatten.jpg" class=""><h2 id="代码-12"><a href="#代码-12" class="headerlink" title="- 代码"></a>- 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="function">TreeNode* <span class="title">connect</span><span class="params">(TreeNode* LNode, TreeNode* RNode)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!LNode)  <span class="keyword">return</span> RNode;</span><br><span class="line">    TreeNode* temp = LNode;</span><br><span class="line">    <span class="keyword">while</span>(temp-&gt;right) temp = temp-&gt;right;</span><br><span class="line">    temp-&gt;right = RNode;</span><br><span class="line">    <span class="keyword">return</span> LNode;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">flatten</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="built_in">flatten</span>(root-&gt;left);</span><br><span class="line">    <span class="built_in">flatten</span>(root-&gt;right);</span><br><span class="line">    root-&gt;right = <span class="built_in">connect</span>(root-&gt;left, root-&gt;right), root-&gt;left = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意事项-12"><a href="#注意事项-12" class="headerlink" title="- 注意事项"></a>- 注意事项</h2><p>解题步骤：</p><ol><li>将<code>root</code>的左子树和右子树拉平。</li><li>将<code>root</code>的右子树接在左子树的下方，并将整个左子树作为右子树。<br>由上述步骤可知，对每个子树都将其左子树和右子树拉平，其实就是完成一系列的递归操作。<br>综上，写二叉树的算法题，都是基于递归框架的，基于每个步骤的实现时机，选择先序、中序、后序。</li></ol><h1 id="15、寻找重复的子树"><a href="#15、寻找重复的子树" class="headerlink" title="15、寻找重复的子树"></a>15、寻找重复的子树</h1><h2 id="题目大意-10"><a href="#题目大意-10" class="headerlink" title="- 题目大意"></a>- 题目大意</h2><blockquote><p>给定一棵二叉树，返回所有重复的子树，对同一类重复的子树只需要返回任意一棵即可</p></blockquote><h2 id="示例-13"><a href="#示例-13" class="headerlink" title="- 示例"></a>- 示例</h2><img src="/2022/02/19/DataStruct/duplicateSubTree.jpg" class=""><h2 id="代码-13"><a href="#代码-13" class="headerlink" title="- 代码"></a>- 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="function">string <span class="title">findSubTree</span><span class="params">(vector&lt;TreeNode*&gt; &amp;v, map&lt;string, <span class="type">int</span>&gt; &amp;mp, TreeNode* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="string">&quot;#&quot;</span>;</span><br><span class="line">    string str = <span class="built_in">to_string</span>(root-&gt;val) + <span class="string">&quot; &quot;</span> + <span class="built_in">findSubTree</span>(v, mp, root-&gt;left) + <span class="string">&quot; &quot;</span> + <span class="built_in">findSubTree</span>(v, mp, root-&gt;right);</span><br><span class="line">    <span class="keyword">if</span>(mp[str] == <span class="number">1</span>)  v.<span class="built_in">push_back</span>(root);</span><br><span class="line">    mp[str]++;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function">vector&lt;TreeNode*&gt; <span class="title">findDuplicateSubTrees</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">    vector&lt;TreeNode*&gt; ans;</span><br><span class="line">    map&lt;string, <span class="type">int</span>&gt; mp;</span><br><span class="line">    <span class="built_in">findSubTree</span>(ans, mp, root);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="注意事项-13"><a href="#注意事项-13" class="headerlink" title="- 注意事项"></a>- 注意事项</h2><p>1、如何知道自己的子树什么样<br>2、如何知道别的子树长什么样</p><h1 id="16、删除二叉搜索树中的节点（中等）"><a href="#16、删除二叉搜索树中的节点（中等）" class="headerlink" title="16、删除二叉搜索树中的节点（中等）"></a>16、删除二叉搜索树中的节点（中等）</h1><h2 id="题目大意-11"><a href="#题目大意-11" class="headerlink" title="- 题目大意"></a>- 题目大意</h2><blockquote><p>给定 root 和 key，删除对应 key 的节点</p></blockquote><h2 id="示例-14"><a href="#示例-14" class="headerlink" title="- 示例"></a>- 示例</h2><blockquote><p>略</p></blockquote><h2 id="代码-14"><a href="#代码-14" class="headerlink" title="-代码"></a>-代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="function">TreeNode* <span class="title">getMin</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(root-&gt;left)&#123;</span><br><span class="line">      root = root-&gt;left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function">TreeNode* <span class="title">deleteNode</span><span class="params">(TreeNode* root, <span class="type">int</span> key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> root;</span><br><span class="line">    <span class="keyword">if</span>(root-&gt;val == key)&#123;</span><br><span class="line">      <span class="keyword">if</span>(!root-&gt;left) <span class="keyword">return</span> root-&gt;right;</span><br><span class="line">      <span class="keyword">if</span>(!root-&gt;right)  <span class="keyword">return</span> root-&gt;left;</span><br><span class="line"></span><br><span class="line">      TreeNode* minNode = <span class="built_in">getMin</span>(root-&gt;right);</span><br><span class="line">      root-&gt;right = <span class="built_in">deleteNode</span>(root-&gt;right, minNode-&gt;val);  <span class="comment">// 递归向下删除</span></span><br><span class="line">      minNode-&gt;left = root-&gt;left, minNode-&gt;right = root-&gt;right;</span><br><span class="line">      root = minNode;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;val &gt; key)&#123;</span><br><span class="line">      root-&gt;left = <span class="built_in">deleteNode</span>(root-&gt;left, key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      root-&gt;right = <span class="built_in">deleteNode</span>(root-&gt;right, key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="注意事项-14"><a href="#注意事项-14" class="headerlink" title="- 注意事项"></a>- 注意事项</h2><p>递归删除</p><h1 id="17、子数组范围和（中等）"><a href="#17、子数组范围和（中等）" class="headerlink" title="17、子数组范围和（中等）"></a>17、子数组范围和（中等）</h1><h2 id="题目大意-12"><a href="#题目大意-12" class="headerlink" title="- 题目大意"></a>- 题目大意</h2><blockquote><p>给一个整数数组<code>nums</code>。其中，子数组的范围是子数组中最大和最小元素差值。<br>返回其中所有子数组的和。</p></blockquote><h2 id="示例-15"><a href="#示例-15" class="headerlink" title="- 示例"></a>- 示例</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3]</span><br><span class="line">输出：4</span><br><span class="line">解释：nums 的 6 个子数组如下所示：</span><br><span class="line">[1]，范围 = 最大 - 最小 = 1 - 1 = 0 </span><br><span class="line">[2]，范围 = 2 - 2 = 0</span><br><span class="line">[3]，范围 = 3 - 3 = 0</span><br><span class="line">[1,2]，范围 = 2 - 1 = 1</span><br><span class="line">[2,3]，范围 = 3 - 2 = 1</span><br><span class="line">[1,2,3]，范围 = 3 - 1 = 2</span><br><span class="line">所有范围的和是 0 + 0 + 0 + 1 + 1 + 2 = 4</span><br></pre></td></tr></table></figure><h2 id="代码-15"><a href="#代码-15" class="headerlink" title="- 代码"></a>- 代码</h2><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>单调栈解法</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">subArrayRanges</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">minLeft</span><span class="params">(len)</span>, <span class="title">maxLeft</span><span class="params">(len)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">minRight</span><span class="params">(len)</span>, <span class="title">maxRight</span><span class="params">(len)</span></span>;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; minStack, maxStack;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;len; ++i)&#123;</span><br><span class="line">      <span class="keyword">while</span>(!minStack.<span class="built_in">empty</span>() &amp;&amp; nums[minStack.<span class="built_in">top</span>()] &gt; nums[i])&#123;</span><br><span class="line">        minStack.<span class="built_in">pop</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      minLeft[i] = minStack.<span class="built_in">empty</span>() ? <span class="number">-1</span> : minStack.<span class="built_in">top</span>();</span><br><span class="line">      minStack.<span class="built_in">push</span>(i);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span>(!maxStack.<span class="built_in">empty</span>() &amp;&amp; nums[maxStack.<span class="built_in">top</span>()] &lt; nums[i])&#123;</span><br><span class="line">        maxStack.<span class="built_in">pop</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      maxLeft[i] = maxStack.<span class="built_in">empty</span>() ? <span class="number">-1</span> : maxStack.<span class="built_in">top</span>();</span><br><span class="line">      maxStack.<span class="built_in">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    minStack = <span class="built_in">stack</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">    maxStack = <span class="built_in">stack</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = len - <span class="number">1</span>; i&gt;=<span class="number">0</span>; --i)&#123;</span><br><span class="line">      <span class="keyword">while</span>(!minStack.<span class="built_in">empty</span>() &amp;&amp; nums[minStack.<span class="built_in">top</span>()] &gt;= nums[i])&#123;</span><br><span class="line">        minStack.<span class="built_in">pop</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      minRight[i] = minStack.<span class="built_in">empty</span>() ? n : minStack.<span class="built_in">top</span>();</span><br><span class="line">      minStack.<span class="built_in">push</span>(i);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span>(!maxStack.<span class="built_in">empty</span>() &amp;&amp; nums[maxStack.<span class="built_in">top</span>()] &lt;= nums[i])&#123;</span><br><span class="line">        maxStack.<span class="built_in">pop</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      maxRight[i] = maxStack.<span class="built_in">empty</span>() ? n : maxStack.<span class="built_in">top</span>();</span><br><span class="line">      maxStack.<span class="built_in">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> sumMax = <span class="number">0</span>, sumMin = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt; len; ++i)&#123;</span><br><span class="line">      sumMax += <span class="built_in">static_cast</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;(maxRight[i] - i) * (i - maxLeft[i]) * nums[i];</span><br><span class="line">      sumMin += <span class="built_in">static_cast</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;(minRight[i] - i) * (i - minLeft[i]) * nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sumMax - sumMin;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="注意事项-15"><a href="#注意事项-15" class="headerlink" title="- 注意事项"></a>- 注意事项</h2><p>注意一下左右区间，一边闭，另一边就要开，都是要处理相等的情况</p><h1 id="18、蜡烛之间的盘子（中等）"><a href="#18、蜡烛之间的盘子（中等）" class="headerlink" title="18、蜡烛之间的盘子（中等）"></a>18、蜡烛之间的盘子（中等）</h1><h2 id="题目大意-13"><a href="#题目大意-13" class="headerlink" title="- 题目大意"></a>- 题目大意</h2><blockquote><p>用’*’代表盘子，’|’代表蜡烛，给定一个字符串，询问若干次，问：所询问区间内有多少蜡烛之间的盘子</p></blockquote><h2 id="示例-16"><a href="#示例-16" class="headerlink" title="- 示例"></a>- 示例</h2><img src="/2022/02/19/DataStruct/PlateBetweenCandles.png" class=""><h2 id="代码-16"><a href="#代码-16" class="headerlink" title="- 代码"></a>- 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">platesBetweenCandles</span><span class="params">(string s, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; queries)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">prefix</span><span class="params">(len)</span>, <span class="title">left</span><span class="params">(len)</span>, <span class="title">right</span><span class="params">(len)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>, lindex = <span class="number">-1</span>; i&lt;len; ++i)&#123;</span><br><span class="line">      <span class="keyword">if</span>(s[i] == <span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">        prefix[i] = (i == <span class="number">0</span>? <span class="number">1</span> : prefix[i<span class="number">-1</span>] + <span class="number">1</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        prefix[i] = (i == <span class="number">0</span>? <span class="number">0</span> : prefix[i<span class="number">-1</span>]);</span><br><span class="line">        lindex = i;</span><br><span class="line">      &#125;</span><br><span class="line">      left[i] = lindex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=len<span class="number">-1</span>, rindex = len; i&gt;=<span class="number">0</span>; --i)&#123;</span><br><span class="line">      <span class="keyword">if</span>(s[i] == <span class="string">&#x27;|&#x27;</span>) rindex = i;</span><br><span class="line">      right[i] = rindex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;it : queries)&#123;</span><br><span class="line">      <span class="type">int</span> lindex = right[it[<span class="number">0</span>]], rindex = leftp[it[<span class="number">1</span>]];</span><br><span class="line">      ans.<span class="built_in">push_back</span>(prefix[rindex] - prefix[lindex]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="注意事项-16"><a href="#注意事项-16" class="headerlink" title="- 注意事项"></a>- 注意事项</h2><p>前缀和思想处理蜡烛的数量，同时存储区间最近的左边界和右边界。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/02/12/hello-world/"/>
      <url>/2022/02/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
