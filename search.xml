<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据结构</title>
      <link href="/2022/02/19/DataStruct/"/>
      <url>/2022/02/19/DataStruct/</url>
      
        <content type="html"><![CDATA[<h1 id="1、替换空格（简单）"><a href="#1、替换空格（简单）" class="headerlink" title="1、替换空格（简单）"></a>1、替换空格（简单）</h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="- 题目大意"></a>- 题目大意</h2><blockquote><p>实现一个函数，把字符串中的每个空格替换为’%20’</p></blockquote><h2 id="示例"><a href="#示例" class="headerlink" title="- 示例"></a>- 示例</h2><blockquote><p>略</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="- 代码"></a>- 代码</h2><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>双指针版</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">replaceSpace</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">      <span class="type">int</span> count = <span class="number">0</span>, len = s.<span class="built_in">size</span>();</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">auto</span> w: s)&#123;</span><br><span class="line">        <span class="keyword">if</span>(w == <span class="string">&#x27; &#x27;</span>)  count ++;</span><br><span class="line">      &#125;</span><br><span class="line">      s.<span class="built_in">resize</span>(len + <span class="number">2</span> * count);</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> i = len - <span class="number">1</span>, j = s.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--, j--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">          s[j<span class="number">-2</span>] = <span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">          s[j<span class="number">-1</span>] = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">          s[j] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">          j -= <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          s[j] = s[i];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="- 注意事项"></a>- 注意事项</h2><p>上述解法使用了双指针<br>此题注意事项：<span class="blur">此处双指针是要从末尾开始数</span></p><hr><h1 id="2、从尾到头打印链表（简单）"><a href="#2、从尾到头打印链表（简单）" class="headerlink" title="2、从尾到头打印链表（简单）"></a>2、从尾到头打印链表（简单）</h1><h2 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="- 题目大意"></a>- 题目大意</h2><blockquote><p>输入一个链表的头结点，从尾到头反过来返回每个结点的值（数组返回）</p></blockquote><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="- 示例"></a>- 示例</h2><blockquote><p>略</p></blockquote><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="- 代码"></a>- 代码</h2><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>栈</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">     <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">reversePrint</span><span class="params">(ListNode* head)</span></span>&#123;</span><br><span class="line">       vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">       stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">       <span class="keyword">while</span>(head != <span class="literal">NULL</span>)&#123;</span><br><span class="line">         st.<span class="built_in">push</span>(head-&gt;val);</span><br><span class="line">         head = head-&gt;next;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">while</span>(!st.<span class="built_in">empty</span>())&#123;</span><br><span class="line">         ans.<span class="built_in">push_back</span>(st.<span class="built_in">top</span>());</span><br><span class="line">         st.<span class="built_in">pop</span>();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> ans;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="- 注意事项"></a>- 注意事项</h2><p>用栈即可</p><span class="blur">递归本质也是用栈实现的，因此递归也是不错的选择</span><h1 id="3、用两个栈实现队列（简单）"><a href="#3、用两个栈实现队列（简单）" class="headerlink" title="3、用两个栈实现队列（简单）"></a>3、用两个栈实现队列（简单）</h1><h2 id="描述"><a href="#描述" class="headerlink" title="- 描述"></a>- 描述</h2><blockquote><p>用两个栈实现队列，实现 appendTail 和 deleteHead 函数</p></blockquote><h2 id="示例-2"><a href="#示例-2" class="headerlink" title="- 示例"></a>- 示例</h2><blockquote><p>略</p></blockquote><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="- 代码"></a>- 代码</h2><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>两个栈实现队列</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CQueue</span>&#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; s1;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; s2;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">CQueue</span>()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">appendTail</span><span class="params">(<span class="type">int</span> value)</span></span>&#123;</span><br><span class="line">      s1.<span class="built_in">push</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">deleteHead</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span>(!s2.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        ans = s2.<span class="built_in">top</span>();</span><br><span class="line">        s2.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!s1.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="keyword">while</span>(!s1.<span class="built_in">empty</span>())&#123;</span><br><span class="line">          s2.<span class="built_in">push</span>(s1.<span class="built_in">top</span>());</span><br><span class="line">          s1.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        ans = s2.<span class="built_in">top</span>();</span><br><span class="line">        s2.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ans = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="- 注意事项"></a>- 注意事项</h2><span class="blur">注意在暴力的基础上想想怎么改进</span><h1 id="4、表示数值的字符串（中等）"><a href="#4、表示数值的字符串（中等）" class="headerlink" title="4、表示数值的字符串（中等）"></a>4、表示数值的字符串（中等）</h1><h2 id="描述-1"><a href="#描述-1" class="headerlink" title="- 描述"></a>- 描述</h2><blockquote><p>一个函数判断字符串是否表示数值（包括整数和小数），<a href="e%E6%95%B4%E6%95%B0">整数，小数</a></p></blockquote><h2 id="示例-3"><a href="#示例-3" class="headerlink" title="- 示例"></a>- 示例</h2><blockquote><p>数值：[“+100”, “5e2”, “-123”, “3.1416”, “-1E-16”, “0123”]<br>非数值：[“12e”, “1a3.14”, “1.2.3”, “+-5”, “12e+5.4”]</p></blockquote><h2 id="代码-3"><a href="#代码-3" class="headerlink" title="- 代码"></a>- 代码</h2><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>暂无</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">inNumber</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="- 注意事项"></a>- 注意事项</h2><p>前置知识：<span class="blur">编译原理</span></p><h1 id="5、翻转链表（简单）"><a href="#5、翻转链表（简单）" class="headerlink" title="5、翻转链表（简单）"></a>5、翻转链表（简单）</h1><h2 id="描述-2"><a href="#描述-2" class="headerlink" title="- 描述"></a>- 描述</h2><blockquote><p>定义一个函数，输入一个链表的头结点，翻转该链表并输出翻转后链表的头结点。</p></blockquote><h2 id="示例-4"><a href="#示例-4" class="headerlink" title="- 示例"></a>- 示例</h2><blockquote><p>略</p></blockquote><h2 id="代码-4"><a href="#代码-4" class="headerlink" title="- 代码"></a>- 代码</h2><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>链表遍历</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span>&#123;</span><br><span class="line">  <span class="type">int</span> val;</span><br><span class="line">  ListNode *next;</span><br><span class="line">  <span class="built_in">ListNode</span>(<span class="type">int</span> x): <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">NULL</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function">ListNode* <span class="title">reverseLink</span><span class="params">(ListNode* head)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!head || !head-&gt;next)  <span class="keyword">return</span> head;</span><br><span class="line">    ListNode* cur = head, ListNode* nHead = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">      ListNode* temp = cur-&gt;next;</span><br><span class="line">      cur-&gt;next = nHead;</span><br><span class="line">      nHead = cur;</span><br><span class="line">      cur = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nHead;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>递归</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">recursion</span>(<span class="literal">nullptr</span>, head);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="function">ListNode* <span class="title">recursion</span><span class="params">(ListNode* pre, ListNode* cur)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!cur)  <span class="keyword">return</span> cur;</span><br><span class="line">    <span class="built_in">recursion</span>(cur, cur-&gt;next);</span><br><span class="line">    cur-&gt;next = pre;</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="注意事项-4"><a href="#注意事项-4" class="headerlink" title="- 注意事项"></a>- 注意事项</h2><p>注意递归写法</p><h1 id="6、包含min函数的栈（简单）"><a href="#6、包含min函数的栈（简单）" class="headerlink" title="6、包含min函数的栈（简单）"></a>6、包含min函数的栈（简单）</h1><h2 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="- 题目大意"></a>- 题目大意</h2><blockquote><p>实现一个栈，栈中能够得到最小元素的min函数，调用min、push及pop的时间复杂度都是O(1)</p></blockquote><h2 id="示例-5"><a href="#示例-5" class="headerlink" title="- 示例"></a>- 示例</h2><blockquote><p>略</p></blockquote><h2 id="代码-5"><a href="#代码-5" class="headerlink" title="- 代码"></a>- 代码</h2><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>带min的栈</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MinStack</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  stack&lt;<span class="type">int</span>&gt; s, smin;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">MinStack</span>()&#123;&#125;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    s.<span class="built_in">push</span>(x);</span><br><span class="line">    <span class="keyword">if</span>(smin.<span class="built_in">empty</span>() || x &lt;= smin.<span class="built_in">top</span>()) smin.<span class="built_in">push</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.<span class="built_in">top</span>() == smin.<span class="built_in">top</span>())   smin.<span class="built_in">pop</span>();</span><br><span class="line">    s.<span class="built_in">pop</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">top</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.<span class="built_in">top</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">min</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> smin.<span class="built_in">top</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="注意事项-5"><a href="#注意事项-5" class="headerlink" title="- 注意事项"></a>- 注意事项</h2><p>感觉可以注意一下栈空时不能pop和查询啊，标准代码里面并没有</p><h1 id="7、复杂链表的复制（简单）"><a href="#7、复杂链表的复制（简单）" class="headerlink" title="7、复杂链表的复制（简单）"></a>7、复杂链表的复制（简单）</h1><h2 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="- 题目大意"></a>- 题目大意</h2><blockquote><p>复杂链表的复制，除了next指针指向下一个结点，还有random指针指向随机结点</p></blockquote><h2 id="示例-6"><a href="#示例-6" class="headerlink" title="- 示例"></a>- 示例</h2><h2 id="代码-6"><a href="#代码-6" class="headerlink" title="- 代码"></a>- 代码</h2><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2022/02/15/Git/"/>
      <url>/2022/02/15/Git/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="bb9287941b9a916724e05dc8bb931f7e94b2282e6a4c45e75082a7ca68d3fc17">472f0d2124ee617a2f29ff331422d5d3bd292059877923b2bde10f8b4beeb582b5677b97997720bb57b85e0be7567461086ac77154c3b73a123f9a7bd362615b985202fe042ae33378e199941510a256bd119c3f7bd94adfec7da650e928f3eb07c7e884e2c2926cf60d80d96d41147a7feee723b83d1f7b2b19a4cda3c6c4b1cbde4f18c0b820e742620d77c0e341839b114b65dce617bbd7ce6f44f6e393a0da648346fd65a5d49ec00b39e58d5d925ef0fc3a269a5edbe6d03c305189ee3261e43ee03b42068d6aaccc4d563c4d51d14088883f9decdf86ab07117e3a43f6ea70e45e9d9474f4e06b9fc82ed5b8ea89c0d9d4dd1edd56bf84478eceb593cbf513090b909ead96891bc28bc37582bb3e140ec0055ffc608bca9975355f670bcee4217c088ab622ab337a75ca9d6c0849fc18d184d0a3fd0790a04ab44fc7c52e6d6222cf77e554fd34c6979e8fa26d050537ba70e34eb40944dbbc34ae7ceaf01be644e13fdf9a656442f81e1010ca89954448dc749f30d2cf4d1acc3a791a90585cc703fb2725988c4ffc443e568b76d88dcc321b185dd81e42b7fce0170b0fd730ff25a01ba5d78c81888d64739f0ad90a5b640b842797233759ad20d7db45817a96ef7a77d22a93cd17f29f08ac7cba73e32c3c5556a6a5baa8657be52864beea381723456828f61216224879600ce916ae33158e3bcf943824184a212417ac670fcf734d45e556cc228924cbcdaa5daabada6894b646cdfe9f865dc1d353491ce9c90366effd944dc9cc828aa759e394705bf1419281ca2215a414d9f20180030a6a7bf997285845a102c5570aaefa5087c1cea218159f8786a526616e5d555d01121d1131b4da9504421736c99966d4ab153de7a5dd4fa45718f24d1144d6f8ca0f7be4d4a6c4f77457df8caa8229b39eb7dd9170790ac2841ea4a716f17420004f667f016f1f634768abce01345e30437a0a39e88c75bcb4d91802ebdba95177f4baeb946725df6f4688ec6d50699ca2d0237eb0ff7195a6771a21f69d2249c5a585ff70d20d847be1d8233dc4cf24cb991f9e22451f46fe4bfff28245823be09dc331a9ea626cf0ab11153ac4851b2e6a8816c0cd26edb15ea1d9f1b4de8be27fecc2348db94d46d4f65da72f8f27c2e472a07d06ea096a5ee62ac471c702c5bb991e68e8d228f7e13cf390eee339567b8d30c10eee067f30c41cf3d85ffba96332111e54ca126757112b8291a73a7a2e9aea28df33f899ccb088a3c8ab7f2776966d84b8a0c25c6d3bf7593c32ed5f860f2c4e91eb2e43bd3c50dead0f16de13655df6bb9e725fe8afd0d453539d44e4fb9f2b019da99633a6dbfee00517ea4e6a7b26c2d7ef4cd6ba4f7f8be75744e8b594a385bce710aef92650ffeb5b763b8d39c2e3f66c70b0dfe9abe288a2c4b0fd1b52dd37a5e017255f0b31138b4cfada784fe8f8b496e537cb29f861895c5628d4510654ce16365ea876750e0619fc32210de5b3d5a7adea36528cc605c5ac6797226ecdb05250aae623a4698649e87683c90ced7f820c98aebc657e05f77aa4e84e07202bbc657f3b818d6325de048887770516944b0eadc05c548dc130a136f76fa2d1ba3071f10fe02b529e01803cb05ca3ce9333ca62cbab5944221cf49ed1b2734af2f630cf987c53ed7a849482a6b258c439777543d1f4</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="Hey, password is required here.">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/02/12/hello-world/"/>
      <url>/2022/02/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
